# Generated from dafny.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,157,2637,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,1,0,5,0,404,8,0,10,0,12,
        0,407,9,0,1,0,5,0,410,8,0,10,0,12,0,413,9,0,1,0,1,0,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,429,8,2,1,3,1,3,1,4,1,4,
        1,4,3,4,436,8,4,1,5,1,5,5,5,440,8,5,10,5,12,5,443,9,5,1,5,1,5,1,
        5,3,5,448,8,5,1,5,1,5,5,5,452,8,5,10,5,12,5,455,9,5,1,5,1,5,1,6,
        1,6,3,6,461,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,472,8,6,
        1,7,1,7,1,7,3,7,477,8,7,1,8,1,8,1,8,1,8,1,8,5,8,484,8,8,10,8,12,
        8,487,9,8,1,8,1,8,3,8,491,8,8,1,9,1,9,3,9,495,8,9,1,9,3,9,498,8,
        9,1,9,1,9,1,9,1,9,5,9,504,8,9,10,9,12,9,507,9,9,1,9,1,9,1,9,1,9,
        5,9,513,8,9,10,9,12,9,516,9,9,1,9,3,9,519,8,9,1,9,1,9,1,9,1,9,5,
        9,525,8,9,10,9,12,9,528,9,9,1,9,3,9,531,8,9,3,9,533,8,9,1,10,1,10,
        1,10,3,10,538,8,10,1,11,1,11,3,11,542,8,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
        12,561,8,12,1,13,1,13,1,13,5,13,566,8,13,10,13,12,13,569,9,13,1,
        14,1,14,3,14,573,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,5,21,591,8,21,10,21,12,21,
        594,9,21,1,21,1,21,1,22,1,22,3,22,600,8,22,1,22,1,22,5,22,604,8,
        22,10,22,12,22,607,9,22,1,22,1,22,3,22,611,8,22,1,22,1,22,5,22,615,
        8,22,10,22,12,22,618,9,22,5,22,620,8,22,10,22,12,22,623,9,22,1,22,
        1,22,1,23,1,23,1,23,1,23,5,23,631,8,23,10,23,12,23,634,9,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,3,24,643,8,24,1,25,1,25,3,25,647,8,
        25,1,26,1,26,3,26,651,8,26,1,27,1,27,3,27,655,8,27,1,28,1,28,3,28,
        659,8,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
        3,32,672,8,32,1,33,1,33,1,34,1,34,5,34,678,8,34,10,34,12,34,681,
        9,34,1,34,1,34,5,34,685,8,34,10,34,12,34,688,9,34,1,34,3,34,691,
        8,34,1,34,1,34,1,34,1,35,1,35,5,35,698,8,35,10,35,12,35,701,9,35,
        1,35,1,35,5,35,705,8,35,10,35,12,35,708,9,35,1,35,3,35,711,8,35,
        1,35,3,35,714,8,35,1,36,1,36,5,36,718,8,36,10,36,12,36,721,9,36,
        1,36,5,36,724,8,36,10,36,12,36,727,9,36,1,36,1,36,1,37,1,37,5,37,
        733,8,37,10,37,12,37,736,9,37,1,37,1,37,3,37,740,8,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,753,8,37,1,38,
        1,38,1,39,1,39,5,39,759,8,39,10,39,12,39,762,9,39,1,39,1,39,1,39,
        3,39,767,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        3,39,779,8,39,1,39,3,39,782,8,39,1,39,3,39,785,8,39,1,40,1,40,5,
        40,789,8,40,10,40,12,40,792,9,40,1,40,1,40,3,40,796,8,40,1,40,1,
        40,1,40,1,40,5,40,802,8,40,10,40,12,40,805,9,40,1,40,3,40,808,8,
        40,1,40,1,40,5,40,812,8,40,10,40,12,40,815,9,40,1,40,4,40,818,8,
        40,11,40,12,40,819,5,40,822,8,40,10,40,12,40,825,9,40,1,40,1,40,
        1,41,1,41,1,41,1,41,3,41,833,8,41,1,42,1,42,5,42,837,8,42,10,42,
        12,42,840,9,42,1,42,1,42,3,42,844,8,42,1,42,1,42,1,42,1,42,5,42,
        850,8,42,10,42,12,42,853,9,42,1,42,3,42,856,8,42,1,42,1,42,5,42,
        860,8,42,10,42,12,42,863,9,42,1,42,4,42,866,8,42,11,42,12,42,867,
        5,42,870,8,42,10,42,12,42,873,9,42,1,42,1,42,1,43,1,43,1,44,1,44,
        3,44,881,8,44,1,45,1,45,5,45,885,8,45,10,45,12,45,888,9,45,1,45,
        1,45,3,45,892,8,45,1,45,1,45,1,45,3,45,897,8,45,1,45,3,45,900,8,
        45,1,45,1,45,3,45,904,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,3,46,918,8,46,1,47,1,47,5,47,922,8,47,10,
        47,12,47,925,9,47,1,47,1,47,3,47,929,8,47,1,47,1,47,3,47,933,8,47,
        1,47,3,47,936,8,47,1,47,1,47,1,47,5,47,941,8,47,10,47,12,47,944,
        9,47,1,47,3,47,947,8,47,1,48,5,48,950,8,48,10,48,12,48,953,9,48,
        1,48,1,48,3,48,957,8,48,1,49,1,49,5,49,961,8,49,10,49,12,49,964,
        9,49,1,49,1,49,1,49,5,49,969,8,49,10,49,12,49,972,9,49,1,50,1,50,
        5,50,976,8,50,10,50,12,50,979,9,50,1,50,1,50,3,50,983,8,50,1,50,
        1,50,3,50,987,8,50,1,51,1,51,5,51,991,8,51,10,51,12,51,994,9,51,
        1,51,3,51,997,8,51,1,51,1,51,3,51,1001,8,51,1,51,1,51,3,51,1005,
        8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1016,8,52,
        1,53,3,53,1019,8,53,1,53,3,53,1022,8,53,1,53,1,53,1,53,3,53,1027,
        8,53,1,54,1,54,5,54,1031,8,54,10,54,12,54,1034,9,54,1,54,1,54,1,
        54,5,54,1039,8,54,10,54,12,54,1042,9,54,1,54,5,54,1045,8,54,10,54,
        12,54,1048,9,54,3,54,1050,8,54,1,54,1,54,1,55,3,55,1055,8,55,1,55,
        1,55,3,55,1059,8,55,1,55,5,55,1062,8,55,10,55,12,55,1065,9,55,1,
        55,3,55,1068,8,55,1,55,1,55,1,55,1,55,1,55,3,55,1075,8,55,1,55,5,
        55,1078,8,55,10,55,12,55,1081,9,55,1,55,1,55,1,55,1,55,1,55,1,55,
        5,55,1089,8,55,10,55,12,55,1092,9,55,1,55,1,55,1,55,3,55,1097,8,
        55,1,55,1,55,3,55,1101,8,55,1,56,1,56,1,57,1,57,3,57,1107,8,57,1,
        58,3,58,1110,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1119,8,
        58,1,59,1,59,3,59,1123,8,59,1,60,3,60,1126,8,60,1,60,3,60,1129,8,
        60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1139,8,60,3,60,1141,
        8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1149,8,61,1,62,1,62,1,62,
        1,62,5,62,1155,8,62,10,62,12,62,1158,9,62,1,63,1,63,1,63,1,63,5,
        63,1164,8,63,10,63,12,63,1167,9,63,1,64,1,64,1,64,5,64,1172,8,64,
        10,64,12,64,1175,9,64,1,65,1,65,1,65,3,65,1180,8,65,1,65,1,65,3,
        65,1184,8,65,1,65,1,65,5,65,1188,8,65,10,65,12,65,1191,9,65,1,66,
        1,66,1,66,5,66,1196,8,66,10,66,12,66,1199,9,66,1,67,1,67,5,67,1203,
        8,67,10,67,12,67,1206,9,67,1,67,1,67,1,67,3,67,1211,8,67,1,67,1,
        67,3,67,1215,8,67,1,68,1,68,5,68,1219,8,68,10,68,12,68,1222,9,68,
        1,68,1,68,1,69,1,69,5,69,1228,8,69,10,69,12,69,1231,9,69,1,69,1,
        69,1,70,1,70,1,70,5,70,1238,8,70,10,70,12,70,1241,9,70,1,71,1,71,
        3,71,1245,8,71,1,72,1,72,5,72,1249,8,72,10,72,12,72,1252,9,72,1,
        72,1,72,1,72,5,72,1257,8,72,10,72,12,72,1260,9,72,1,73,1,73,5,73,
        1264,8,73,10,73,12,73,1267,9,73,1,73,1,73,1,74,1,74,5,74,1273,8,
        74,10,74,12,74,1276,9,74,1,74,1,74,1,74,5,74,1281,8,74,10,74,12,
        74,1284,9,74,1,75,1,75,3,75,1288,8,75,1,76,1,76,3,76,1292,8,76,1,
        76,3,76,1295,8,76,1,77,1,77,1,77,1,78,1,78,1,78,1,78,5,78,1304,8,
        78,10,78,12,78,1307,9,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        3,79,1330,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,
        1341,8,80,10,80,12,80,1344,9,80,1,80,1,80,1,80,5,80,1349,8,80,10,
        80,12,80,1352,9,80,1,80,1,80,3,80,1356,8,80,1,81,1,81,5,81,1360,
        8,81,10,81,12,81,1363,9,81,1,81,1,81,1,82,1,82,1,82,1,82,5,82,1371,
        8,82,10,82,12,82,1374,9,82,3,82,1376,8,82,1,82,1,82,1,83,1,83,1,
        83,1,83,5,83,1384,8,83,10,83,12,83,1387,9,83,3,83,1389,8,83,1,83,
        1,83,1,84,1,84,5,84,1395,8,84,10,84,12,84,1398,9,84,1,84,1,84,1,
        84,5,84,1403,8,84,10,84,12,84,1406,9,84,1,84,1,84,1,84,1,84,5,84,
        1412,8,84,10,84,12,84,1415,9,84,1,84,1,84,3,84,1419,8,84,1,84,3,
        84,1422,8,84,1,84,1,84,3,84,1426,8,84,1,85,1,85,1,85,5,85,1431,8,
        85,10,85,12,85,1434,9,85,3,85,1436,8,85,1,85,1,85,3,85,1440,8,85,
        1,85,1,85,1,85,5,85,1445,8,85,10,85,12,85,1448,9,85,1,85,1,85,1,
        86,3,86,1453,8,86,1,86,1,86,5,86,1457,8,86,10,86,12,86,1460,9,86,
        1,86,1,86,1,86,5,86,1465,8,86,10,86,12,86,1468,9,86,1,86,5,86,1471,
        8,86,10,86,12,86,1474,9,86,1,86,1,86,1,86,1,86,5,86,1480,8,86,10,
        86,12,86,1483,9,86,1,86,1,86,3,86,1487,8,86,1,86,1,86,1,86,5,86,
        1492,8,86,10,86,12,86,1495,9,86,1,86,5,86,1498,8,86,10,86,12,86,
        1501,9,86,1,86,1,86,3,86,1505,8,86,1,86,3,86,1508,8,86,1,86,1,86,
        1,86,5,86,1513,8,86,10,86,12,86,1516,9,86,1,86,3,86,1519,8,86,1,
        86,1,86,3,86,1523,8,86,1,86,1,86,1,87,3,87,1528,8,87,1,87,1,87,1,
        87,1,87,5,87,1534,8,87,10,87,12,87,1537,9,87,1,87,1,87,1,87,3,87,
        1542,8,87,1,88,1,88,1,88,1,88,1,88,3,88,1549,8,88,1,89,1,89,1,89,
        5,89,1554,8,89,10,89,12,89,1557,9,89,1,89,5,89,1560,8,89,10,89,12,
        89,1563,9,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,1572,8,90,1,
        90,1,90,1,90,1,90,3,90,1578,8,90,3,90,1580,8,90,3,90,1582,8,90,1,
        91,5,91,1585,8,91,10,91,12,91,1588,9,91,1,91,1,91,5,91,1592,8,91,
        10,91,12,91,1595,9,91,1,91,3,91,1598,8,91,1,92,1,92,1,92,3,92,1603,
        8,92,1,92,1,92,5,92,1607,8,92,10,92,12,92,1610,9,92,1,93,1,93,1,
        93,1,93,1,93,1,93,1,93,1,93,3,93,1620,8,93,3,93,1622,8,93,1,94,1,
        94,1,94,1,94,1,94,1,94,1,94,3,94,1631,8,94,1,94,1,94,1,94,3,94,1636,
        8,94,1,95,1,95,1,95,1,95,5,95,1642,8,95,10,95,12,95,1645,9,95,1,
        95,1,95,5,95,1649,8,95,10,95,12,95,1652,9,95,3,95,1654,8,95,1,96,
        1,96,1,96,1,96,5,96,1660,8,96,10,96,12,96,1663,9,96,1,97,1,97,5,
        97,1667,8,97,10,97,12,97,1670,9,97,1,97,1,97,1,97,3,97,1675,8,97,
        1,97,1,97,1,97,1,97,3,97,1681,8,97,1,98,1,98,5,98,1685,8,98,10,98,
        12,98,1688,9,98,1,98,1,98,1,98,1,99,1,99,5,99,1695,8,99,10,99,12,
        99,1698,9,99,1,99,1,99,1,99,3,99,1703,8,99,1,99,1,99,1,100,1,100,
        1,100,1,100,5,100,1711,8,100,10,100,12,100,1714,9,100,1,100,1,100,
        1,101,1,101,1,101,1,101,5,101,1722,8,101,10,101,12,101,1725,9,101,
        1,101,1,101,1,102,1,102,1,102,3,102,1732,8,102,1,102,1,102,3,102,
        1736,8,102,1,102,5,102,1739,8,102,10,102,12,102,1742,9,102,1,102,
        3,102,1745,8,102,1,103,1,103,5,103,1749,8,103,10,103,12,103,1752,
        9,103,1,103,1,103,1,103,5,103,1757,8,103,10,103,12,103,1760,9,103,
        1,103,1,103,1,104,1,104,5,104,1766,8,104,10,104,12,104,1769,9,104,
        1,104,3,104,1772,8,104,1,104,1,104,1,104,1,104,1,105,1,105,3,105,
        1780,8,105,1,105,1,105,5,105,1784,8,105,10,105,12,105,1787,9,105,
        1,106,1,106,1,106,1,107,1,107,5,107,1794,8,107,10,107,12,107,1797,
        9,107,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1805,8,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1815,8,108,1,109,
        1,109,1,109,3,109,1820,8,109,1,110,1,110,1,110,5,110,1825,8,110,
        10,110,12,110,1828,9,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        5,111,1837,8,111,10,111,12,111,1840,9,111,3,111,1842,8,111,1,112,
        1,112,1,112,3,112,1847,8,112,1,113,3,113,1850,8,113,1,113,1,113,
        1,113,5,113,1855,8,113,10,113,12,113,1858,9,113,1,114,1,114,1,114,
        1,114,5,114,1864,8,114,10,114,12,114,1867,9,114,1,115,1,115,1,115,
        1,115,1,115,1,115,3,115,1875,8,115,1,115,1,115,1,115,1,115,1,115,
        1,115,3,115,1883,8,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        3,115,1892,8,115,1,116,1,116,1,116,5,116,1897,8,116,10,116,12,116,
        1900,9,116,1,117,1,117,1,117,5,117,1905,8,117,10,117,12,117,1908,
        9,117,1,118,1,118,1,118,5,118,1913,8,118,10,118,12,118,1916,9,118,
        1,119,1,119,1,119,5,119,1921,8,119,10,119,12,119,1924,9,119,1,120,
        1,120,1,120,5,120,1929,8,120,10,120,12,120,1932,9,120,1,121,1,121,
        1,121,1,121,1,121,3,121,1939,8,121,1,122,1,122,5,122,1943,8,122,
        10,122,12,122,1946,9,122,1,122,1,122,1,122,5,122,1951,8,122,10,122,
        12,122,1954,9,122,1,122,1,122,5,122,1958,8,122,10,122,12,122,1961,
        9,122,1,122,1,122,5,122,1965,8,122,10,122,12,122,1968,9,122,1,122,
        1,122,1,122,5,122,1973,8,122,10,122,12,122,1976,9,122,3,122,1978,
        8,122,1,123,1,123,1,123,1,123,1,123,5,123,1985,8,123,10,123,12,123,
        1988,9,123,3,123,1990,8,123,1,123,3,123,1993,8,123,1,123,1,123,1,
        123,1,123,1,124,1,124,5,124,2001,8,124,10,124,12,124,2004,9,124,
        1,124,1,124,1,124,5,124,2009,8,124,10,124,12,124,2012,9,124,3,124,
        2014,8,124,1,125,1,125,1,125,1,125,1,125,5,125,2021,8,125,10,125,
        12,125,2024,9,125,3,125,2026,8,125,1,126,1,126,3,126,2030,8,126,
        1,126,1,126,3,126,2034,8,126,1,126,1,126,1,126,1,126,1,126,1,126,
        1,126,3,126,2043,8,126,1,126,3,126,2046,8,126,1,127,1,127,1,127,
        5,127,2051,8,127,10,127,12,127,2054,9,127,1,128,1,128,1,128,3,128,
        2059,8,128,1,128,1,128,1,129,1,129,1,129,1,129,3,129,2067,8,129,
        1,129,1,129,3,129,2071,8,129,1,129,3,129,2074,8,129,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,3,130,2084,8,130,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,3,131,2093,8,131,1,132,1,132,1,133,
        1,133,1,134,1,134,1,135,1,135,1,135,3,135,2104,8,135,1,135,1,135,
        1,135,1,135,1,136,1,136,1,136,3,136,2113,8,136,1,136,1,136,1,136,
        1,136,1,137,1,137,1,137,1,137,1,137,1,138,1,138,1,138,3,138,2127,
        8,138,1,138,1,138,1,138,1,138,5,138,2133,8,138,10,138,12,138,2136,
        9,138,1,138,1,138,1,139,1,139,1,139,1,139,1,140,1,140,3,140,2146,
        8,140,1,140,1,140,1,141,3,141,2151,8,141,1,141,1,141,1,141,3,141,
        2156,8,141,1,141,5,141,2159,8,141,10,141,12,141,2162,9,141,1,142,
        1,142,3,142,2166,8,142,1,142,1,142,1,142,3,142,2171,8,142,1,142,
        1,142,1,142,1,142,1,142,1,142,3,142,2179,8,142,1,143,3,143,2182,
        8,143,1,143,1,143,3,143,2186,8,143,1,143,1,143,1,143,1,143,1,143,
        1,143,3,143,2194,8,143,1,144,1,144,1,144,1,144,1,144,1,145,1,145,
        1,145,1,145,1,145,1,145,1,145,1,145,5,145,2209,8,145,10,145,12,145,
        2212,9,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        3,146,2223,8,146,1,147,1,147,1,147,3,147,2228,8,147,1,147,1,147,
        1,147,1,147,1,147,1,148,1,148,1,148,1,148,5,148,2239,8,148,10,148,
        12,148,2242,9,148,1,148,1,148,5,148,2246,8,148,10,148,12,148,2249,
        9,148,3,148,2251,8,148,1,149,1,149,5,149,2255,8,149,10,149,12,149,
        2258,9,149,1,149,1,149,1,149,1,149,1,150,1,150,3,150,2266,8,150,
        1,150,1,150,1,150,1,150,5,150,2272,8,150,10,150,12,150,2275,9,150,
        3,150,2277,8,150,1,150,3,150,2280,8,150,1,151,1,151,1,151,3,151,
        2285,8,151,1,151,1,151,1,151,1,151,5,151,2291,8,151,10,151,12,151,
        2294,9,151,3,151,2296,8,151,1,151,3,151,2299,8,151,1,152,3,152,2302,
        8,152,1,152,1,152,1,152,5,152,2307,8,152,10,152,12,152,2310,9,152,
        1,153,1,153,1,153,3,153,2315,8,153,1,153,3,153,2318,8,153,1,154,
        1,154,1,154,1,154,1,154,1,155,3,155,2326,8,155,1,155,1,155,1,155,
        3,155,2331,8,155,1,156,1,156,1,156,1,156,1,156,1,156,3,156,2339,
        8,156,1,157,1,157,1,157,1,157,1,157,3,157,2346,8,157,1,158,3,158,
        2349,8,158,1,158,1,158,1,158,1,158,5,158,2355,8,158,10,158,12,158,
        2358,9,158,1,158,1,158,1,158,5,158,2363,8,158,10,158,12,158,2366,
        9,158,1,158,3,158,2369,8,158,1,158,1,158,1,158,5,158,2374,8,158,
        10,158,12,158,2377,9,158,1,158,1,158,3,158,2381,8,158,1,158,1,158,
        1,158,1,159,1,159,1,159,3,159,2389,8,159,1,160,1,160,3,160,2393,
        8,160,1,160,1,160,1,160,1,160,1,160,3,160,2400,8,160,1,160,1,160,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,161,2411,8,161,1,162,
        1,162,1,162,1,162,3,162,2417,8,162,1,163,1,163,1,163,1,163,1,163,
        5,163,2424,8,163,10,163,12,163,2427,9,163,1,163,1,163,1,164,1,164,
        1,164,1,164,1,165,1,165,3,165,2437,8,165,1,165,1,165,3,165,2441,
        8,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,5,166,2451,
        8,166,10,166,12,166,2454,9,166,1,166,3,166,2457,8,166,3,166,2459,
        8,166,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,1,168,1,168,
        1,168,1,168,5,168,2473,8,168,10,168,12,168,2476,9,168,1,168,1,168,
        1,169,1,169,1,169,1,169,1,170,1,170,1,170,5,170,2487,8,170,10,170,
        12,170,2490,9,170,1,171,1,171,1,171,5,171,2495,8,171,10,171,12,171,
        2498,9,171,1,172,1,172,1,172,3,172,2503,8,172,1,172,5,172,2506,8,
        172,10,172,12,172,2509,9,172,1,172,1,172,3,172,2513,8,172,1,173,
        1,173,1,174,1,174,1,175,1,175,1,176,1,176,3,176,2523,8,176,1,177,
        1,177,1,178,1,178,3,178,2529,8,178,1,179,1,179,1,180,1,180,1,181,
        1,181,1,182,1,182,1,183,1,183,1,184,1,184,1,185,1,185,1,186,1,186,
        1,187,1,187,1,188,1,188,1,189,1,189,1,190,1,190,1,191,1,191,1,191,
        5,191,2558,8,191,10,191,12,191,2561,9,191,1,192,1,192,1,192,1,192,
        1,193,1,193,1,193,1,193,1,194,1,194,1,194,3,194,2574,8,194,1,195,
        5,195,2577,8,195,10,195,12,195,2580,9,195,1,195,1,195,1,195,3,195,
        2585,8,195,1,196,1,196,1,196,3,196,2590,8,196,1,197,1,197,1,197,
        3,197,2595,8,197,1,198,5,198,2598,8,198,10,198,12,198,2601,9,198,
        1,198,5,198,2604,8,198,10,198,12,198,2607,9,198,1,198,1,198,1,198,
        3,198,2612,8,198,1,198,1,198,1,198,3,198,2617,8,198,1,199,1,199,
        1,199,1,199,5,199,2623,8,199,10,199,12,199,2626,9,199,1,199,1,199,
        1,200,1,200,1,200,3,200,2633,8,200,1,200,1,200,1,200,0,0,201,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
        288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
        320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
        352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
        384,386,388,390,392,394,396,398,400,0,17,1,0,2,5,1,0,49,50,1,0,56,
        57,1,0,65,66,2,0,84,84,86,87,1,0,94,95,1,0,111,112,1,0,116,117,1,
        0,144,145,1,0,36,37,1,0,40,41,2,0,99,99,129,129,1,0,35,36,2,0,141,
        141,144,144,4,0,72,72,78,78,141,141,144,144,3,0,3,3,34,34,134,135,
        2,0,3,3,134,134,2899,0,405,1,0,0,0,2,416,1,0,0,0,4,428,1,0,0,0,6,
        430,1,0,0,0,8,435,1,0,0,0,10,437,1,0,0,0,12,458,1,0,0,0,14,473,1,
        0,0,0,16,490,1,0,0,0,18,492,1,0,0,0,20,534,1,0,0,0,22,541,1,0,0,
        0,24,560,1,0,0,0,26,562,1,0,0,0,28,570,1,0,0,0,30,574,1,0,0,0,32,
        576,1,0,0,0,34,578,1,0,0,0,36,580,1,0,0,0,38,582,1,0,0,0,40,584,
        1,0,0,0,42,586,1,0,0,0,44,597,1,0,0,0,46,626,1,0,0,0,48,642,1,0,
        0,0,50,644,1,0,0,0,52,648,1,0,0,0,54,652,1,0,0,0,56,656,1,0,0,0,
        58,660,1,0,0,0,60,662,1,0,0,0,62,665,1,0,0,0,64,671,1,0,0,0,66,673,
        1,0,0,0,68,675,1,0,0,0,70,695,1,0,0,0,72,715,1,0,0,0,74,730,1,0,
        0,0,76,754,1,0,0,0,78,756,1,0,0,0,80,786,1,0,0,0,82,832,1,0,0,0,
        84,834,1,0,0,0,86,876,1,0,0,0,88,878,1,0,0,0,90,882,1,0,0,0,92,917,
        1,0,0,0,94,919,1,0,0,0,96,951,1,0,0,0,98,958,1,0,0,0,100,973,1,0,
        0,0,102,988,1,0,0,0,104,1015,1,0,0,0,106,1018,1,0,0,0,108,1028,1,
        0,0,0,110,1096,1,0,0,0,112,1102,1,0,0,0,114,1106,1,0,0,0,116,1109,
        1,0,0,0,118,1122,1,0,0,0,120,1125,1,0,0,0,122,1142,1,0,0,0,124,1156,
        1,0,0,0,126,1165,1,0,0,0,128,1173,1,0,0,0,130,1189,1,0,0,0,132,1197,
        1,0,0,0,134,1200,1,0,0,0,136,1216,1,0,0,0,138,1225,1,0,0,0,140,1234,
        1,0,0,0,142,1244,1,0,0,0,144,1246,1,0,0,0,146,1261,1,0,0,0,148,1270,
        1,0,0,0,150,1287,1,0,0,0,152,1294,1,0,0,0,154,1296,1,0,0,0,156,1305,
        1,0,0,0,158,1329,1,0,0,0,160,1355,1,0,0,0,162,1357,1,0,0,0,164,1366,
        1,0,0,0,166,1379,1,0,0,0,168,1392,1,0,0,0,170,1435,1,0,0,0,172,1452,
        1,0,0,0,174,1541,1,0,0,0,176,1548,1,0,0,0,178,1550,1,0,0,0,180,1567,
        1,0,0,0,182,1597,1,0,0,0,184,1599,1,0,0,0,186,1611,1,0,0,0,188,1623,
        1,0,0,0,190,1637,1,0,0,0,192,1655,1,0,0,0,194,1664,1,0,0,0,196,1682,
        1,0,0,0,198,1692,1,0,0,0,200,1706,1,0,0,0,202,1717,1,0,0,0,204,1728,
        1,0,0,0,206,1746,1,0,0,0,208,1763,1,0,0,0,210,1785,1,0,0,0,212,1788,
        1,0,0,0,214,1795,1,0,0,0,216,1814,1,0,0,0,218,1816,1,0,0,0,220,1821,
        1,0,0,0,222,1829,1,0,0,0,224,1843,1,0,0,0,226,1849,1,0,0,0,228,1859,
        1,0,0,0,230,1891,1,0,0,0,232,1893,1,0,0,0,234,1901,1,0,0,0,236,1909,
        1,0,0,0,238,1917,1,0,0,0,240,1925,1,0,0,0,242,1938,1,0,0,0,244,1977,
        1,0,0,0,246,1992,1,0,0,0,248,2013,1,0,0,0,250,2025,1,0,0,0,252,2027,
        1,0,0,0,254,2047,1,0,0,0,256,2058,1,0,0,0,258,2062,1,0,0,0,260,2083,
        1,0,0,0,262,2092,1,0,0,0,264,2094,1,0,0,0,266,2096,1,0,0,0,268,2098,
        1,0,0,0,270,2100,1,0,0,0,272,2109,1,0,0,0,274,2118,1,0,0,0,276,2123,
        1,0,0,0,278,2139,1,0,0,0,280,2143,1,0,0,0,282,2150,1,0,0,0,284,2178,
        1,0,0,0,286,2193,1,0,0,0,288,2195,1,0,0,0,290,2200,1,0,0,0,292,2222,
        1,0,0,0,294,2224,1,0,0,0,296,2234,1,0,0,0,298,2252,1,0,0,0,300,2279,
        1,0,0,0,302,2298,1,0,0,0,304,2301,1,0,0,0,306,2317,1,0,0,0,308,2319,
        1,0,0,0,310,2325,1,0,0,0,312,2332,1,0,0,0,314,2345,1,0,0,0,316,2380,
        1,0,0,0,318,2385,1,0,0,0,320,2390,1,0,0,0,322,2410,1,0,0,0,324,2412,
        1,0,0,0,326,2418,1,0,0,0,328,2430,1,0,0,0,330,2434,1,0,0,0,332,2444,
        1,0,0,0,334,2462,1,0,0,0,336,2468,1,0,0,0,338,2479,1,0,0,0,340,2483,
        1,0,0,0,342,2491,1,0,0,0,344,2499,1,0,0,0,346,2514,1,0,0,0,348,2516,
        1,0,0,0,350,2518,1,0,0,0,352,2522,1,0,0,0,354,2524,1,0,0,0,356,2528,
        1,0,0,0,358,2530,1,0,0,0,360,2532,1,0,0,0,362,2534,1,0,0,0,364,2536,
        1,0,0,0,366,2538,1,0,0,0,368,2540,1,0,0,0,370,2542,1,0,0,0,372,2544,
        1,0,0,0,374,2546,1,0,0,0,376,2548,1,0,0,0,378,2550,1,0,0,0,380,2552,
        1,0,0,0,382,2554,1,0,0,0,384,2562,1,0,0,0,386,2566,1,0,0,0,388,2570,
        1,0,0,0,390,2578,1,0,0,0,392,2586,1,0,0,0,394,2591,1,0,0,0,396,2599,
        1,0,0,0,398,2618,1,0,0,0,400,2629,1,0,0,0,402,404,3,2,1,0,403,402,
        1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,411,
        1,0,0,0,407,405,1,0,0,0,408,410,3,4,2,0,409,408,1,0,0,0,410,413,
        1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,411,
        1,0,0,0,414,415,5,0,0,1,415,1,1,0,0,0,416,417,5,1,0,0,417,418,5,
        149,0,0,418,3,1,0,0,0,419,429,3,6,3,0,420,429,3,8,4,0,421,429,3,
        80,40,0,422,429,3,94,47,0,423,429,3,78,39,0,424,429,3,64,32,0,425,
        429,3,90,45,0,426,429,3,84,42,0,427,429,3,82,41,0,428,419,1,0,0,
        0,428,420,1,0,0,0,428,421,1,0,0,0,428,422,1,0,0,0,428,423,1,0,0,
        0,428,424,1,0,0,0,428,425,1,0,0,0,428,426,1,0,0,0,428,427,1,0,0,
        0,429,5,1,0,0,0,430,431,7,0,0,0,431,7,1,0,0,0,432,436,3,10,5,0,433,
        436,3,12,6,0,434,436,3,18,9,0,435,432,1,0,0,0,435,433,1,0,0,0,435,
        434,1,0,0,0,436,9,1,0,0,0,437,441,5,6,0,0,438,440,3,400,200,0,439,
        438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,
        444,1,0,0,0,443,441,1,0,0,0,444,447,3,382,191,0,445,446,5,7,0,0,
        446,448,3,382,191,0,447,445,1,0,0,0,447,448,1,0,0,0,448,449,1,0,
        0,0,449,453,5,8,0,0,450,452,3,4,2,0,451,450,1,0,0,0,452,455,1,0,
        0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,453,1,0,
        0,0,456,457,5,9,0,0,457,11,1,0,0,0,458,460,5,10,0,0,459,461,5,11,
        0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,471,1,0,0,0,462,472,3,14,
        7,0,463,464,3,358,179,0,464,465,5,12,0,0,465,466,3,14,7,0,466,472,
        1,0,0,0,467,468,3,358,179,0,468,469,5,13,0,0,469,470,3,14,7,0,470,
        472,1,0,0,0,471,462,1,0,0,0,471,463,1,0,0,0,471,467,1,0,0,0,472,
        13,1,0,0,0,473,476,3,382,191,0,474,475,5,14,0,0,475,477,3,16,8,0,
        476,474,1,0,0,0,476,477,1,0,0,0,477,15,1,0,0,0,478,491,3,378,189,
        0,479,480,5,8,0,0,480,485,3,378,189,0,481,482,5,15,0,0,482,484,3,
        378,189,0,483,481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,
        1,0,0,0,486,488,1,0,0,0,487,485,1,0,0,0,488,489,5,9,0,0,489,491,
        1,0,0,0,490,478,1,0,0,0,490,479,1,0,0,0,491,17,1,0,0,0,492,494,5,
        16,0,0,493,495,3,378,189,0,494,493,1,0,0,0,494,495,1,0,0,0,495,497,
        1,0,0,0,496,498,5,150,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,532,
        1,0,0,0,499,500,5,17,0,0,500,505,3,378,189,0,501,502,5,15,0,0,502,
        504,3,378,189,0,503,501,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,
        505,506,1,0,0,0,506,533,1,0,0,0,507,505,1,0,0,0,508,518,5,18,0,0,
        509,514,3,20,10,0,510,511,5,15,0,0,511,513,3,20,10,0,512,510,1,0,
        0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,519,1,0,
        0,0,516,514,1,0,0,0,517,519,5,157,0,0,518,509,1,0,0,0,518,517,1,
        0,0,0,519,533,1,0,0,0,520,530,5,19,0,0,521,526,3,20,10,0,522,523,
        5,15,0,0,523,525,3,20,10,0,524,522,1,0,0,0,525,528,1,0,0,0,526,524,
        1,0,0,0,526,527,1,0,0,0,527,531,1,0,0,0,528,526,1,0,0,0,529,531,
        5,157,0,0,530,521,1,0,0,0,530,529,1,0,0,0,531,533,1,0,0,0,532,499,
        1,0,0,0,532,508,1,0,0,0,532,520,1,0,0,0,533,19,1,0,0,0,534,537,3,
        380,190,0,535,536,5,20,0,0,536,538,3,380,190,0,537,535,1,0,0,0,537,
        538,1,0,0,0,538,21,1,0,0,0,539,542,3,24,12,0,540,542,3,92,46,0,541,
        539,1,0,0,0,541,540,1,0,0,0,542,23,1,0,0,0,543,561,3,30,15,0,544,
        561,3,40,20,0,545,561,3,32,16,0,546,561,3,34,17,0,547,561,3,38,19,
        0,548,561,3,36,18,0,549,561,3,86,43,0,550,561,3,50,25,0,551,561,
        3,52,26,0,552,561,3,54,27,0,553,561,3,60,30,0,554,561,3,62,31,0,
        555,561,3,56,28,0,556,561,3,76,38,0,557,561,3,58,29,0,558,561,3,
        88,44,0,559,561,3,26,13,0,560,543,1,0,0,0,560,544,1,0,0,0,560,545,
        1,0,0,0,560,546,1,0,0,0,560,547,1,0,0,0,560,548,1,0,0,0,560,549,
        1,0,0,0,560,550,1,0,0,0,560,551,1,0,0,0,560,552,1,0,0,0,560,553,
        1,0,0,0,560,554,1,0,0,0,560,555,1,0,0,0,560,556,1,0,0,0,560,557,
        1,0,0,0,560,558,1,0,0,0,560,559,1,0,0,0,561,25,1,0,0,0,562,567,3,
        28,14,0,563,564,5,20,0,0,564,566,3,28,14,0,565,563,1,0,0,0,566,569,
        1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,27,1,0,0,0,569,567,1,
        0,0,0,570,572,5,141,0,0,571,573,3,42,21,0,572,571,1,0,0,0,572,573,
        1,0,0,0,573,29,1,0,0,0,574,575,5,21,0,0,575,31,1,0,0,0,576,577,5,
        22,0,0,577,33,1,0,0,0,578,579,5,23,0,0,579,35,1,0,0,0,580,581,5,
        143,0,0,581,37,1,0,0,0,582,583,5,24,0,0,583,39,1,0,0,0,584,585,5,
        25,0,0,585,41,1,0,0,0,586,587,5,26,0,0,587,592,3,22,11,0,588,589,
        5,15,0,0,589,591,3,22,11,0,590,588,1,0,0,0,591,594,1,0,0,0,592,590,
        1,0,0,0,592,593,1,0,0,0,593,595,1,0,0,0,594,592,1,0,0,0,595,596,
        5,27,0,0,596,43,1,0,0,0,597,599,5,26,0,0,598,600,5,151,0,0,599,598,
        1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,605,3,370,185,0,602,
        604,3,46,23,0,603,602,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,605,
        606,1,0,0,0,606,621,1,0,0,0,607,605,1,0,0,0,608,610,5,15,0,0,609,
        611,5,151,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,
        616,3,370,185,0,613,615,3,46,23,0,614,613,1,0,0,0,615,618,1,0,0,
        0,616,614,1,0,0,0,616,617,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,
        0,619,608,1,0,0,0,620,623,1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,
        0,622,624,1,0,0,0,623,621,1,0,0,0,624,625,5,27,0,0,625,45,1,0,0,
        0,626,627,5,28,0,0,627,632,3,48,24,0,628,629,5,15,0,0,629,631,3,
        48,24,0,630,628,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,
        1,0,0,0,633,635,1,0,0,0,634,632,1,0,0,0,635,636,5,29,0,0,636,47,
        1,0,0,0,637,643,5,30,0,0,638,643,5,31,0,0,639,643,5,32,0,0,640,641,
        5,33,0,0,641,643,5,34,0,0,642,637,1,0,0,0,642,638,1,0,0,0,642,639,
        1,0,0,0,642,640,1,0,0,0,643,49,1,0,0,0,644,646,5,35,0,0,645,647,
        3,42,21,0,646,645,1,0,0,0,646,647,1,0,0,0,647,51,1,0,0,0,648,650,
        5,36,0,0,649,651,3,42,21,0,650,649,1,0,0,0,650,651,1,0,0,0,651,53,
        1,0,0,0,652,654,5,37,0,0,653,655,3,42,21,0,654,653,1,0,0,0,654,655,
        1,0,0,0,655,55,1,0,0,0,656,658,5,38,0,0,657,659,3,42,21,0,658,657,
        1,0,0,0,658,659,1,0,0,0,659,57,1,0,0,0,660,661,5,39,0,0,661,59,1,
        0,0,0,662,663,5,40,0,0,663,664,3,42,21,0,664,61,1,0,0,0,665,666,
        5,41,0,0,666,667,3,42,21,0,667,63,1,0,0,0,668,672,3,68,34,0,669,
        672,3,70,35,0,670,672,3,74,37,0,671,668,1,0,0,0,671,669,1,0,0,0,
        671,670,1,0,0,0,672,65,1,0,0,0,673,674,3,350,175,0,674,67,1,0,0,
        0,675,679,5,42,0,0,676,678,3,400,200,0,677,676,1,0,0,0,678,681,1,
        0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,682,1,0,0,0,681,679,1,
        0,0,0,682,686,3,66,33,0,683,685,3,46,23,0,684,683,1,0,0,0,685,688,
        1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,690,1,0,0,0,688,686,
        1,0,0,0,689,691,3,44,22,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,
        1,0,0,0,692,693,5,12,0,0,693,694,3,22,11,0,694,69,1,0,0,0,695,699,
        5,42,0,0,696,698,3,400,200,0,697,696,1,0,0,0,698,701,1,0,0,0,699,
        697,1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,699,1,0,0,0,702,
        706,3,66,33,0,703,705,3,46,23,0,704,703,1,0,0,0,705,708,1,0,0,0,
        706,704,1,0,0,0,706,707,1,0,0,0,707,710,1,0,0,0,708,706,1,0,0,0,
        709,711,3,44,22,0,710,709,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,
        0,712,714,3,72,36,0,713,712,1,0,0,0,713,714,1,0,0,0,714,71,1,0,0,
        0,715,725,5,8,0,0,716,718,3,6,3,0,717,716,1,0,0,0,718,721,1,0,0,
        0,719,717,1,0,0,0,719,720,1,0,0,0,720,722,1,0,0,0,721,719,1,0,0,
        0,722,724,3,82,41,0,723,719,1,0,0,0,724,727,1,0,0,0,725,723,1,0,
        0,0,725,726,1,0,0,0,726,728,1,0,0,0,727,725,1,0,0,0,728,729,5,9,
        0,0,729,73,1,0,0,0,730,734,5,42,0,0,731,733,3,400,200,0,732,731,
        1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,737,
        1,0,0,0,736,734,1,0,0,0,737,739,3,66,33,0,738,740,3,44,22,0,739,
        738,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,742,5,12,0,0,742,
        743,3,392,196,0,743,744,5,43,0,0,744,752,3,218,109,0,745,746,5,3,
        0,0,746,747,5,44,0,0,747,753,3,218,109,0,748,749,5,44,0,0,749,753,
        3,218,109,0,750,751,5,44,0,0,751,753,5,157,0,0,752,745,1,0,0,0,752,
        748,1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,75,1,0,0,0,754,755,
        5,45,0,0,755,77,1,0,0,0,756,760,5,46,0,0,757,759,3,400,200,0,758,
        757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,
        763,1,0,0,0,762,760,1,0,0,0,763,764,3,366,183,0,764,766,5,12,0,0,
        765,767,5,150,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,781,1,0,0,
        0,768,769,3,392,196,0,769,770,5,43,0,0,770,778,3,218,109,0,771,772,
        5,3,0,0,772,773,5,44,0,0,773,779,3,218,109,0,774,775,5,44,0,0,775,
        779,3,218,109,0,776,777,5,44,0,0,777,779,5,157,0,0,778,771,1,0,0,
        0,778,774,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,782,1,0,0,
        0,780,782,3,22,11,0,781,768,1,0,0,0,781,780,1,0,0,0,782,784,1,0,
        0,0,783,785,3,72,36,0,784,783,1,0,0,0,784,785,1,0,0,0,785,79,1,0,
        0,0,786,790,5,47,0,0,787,789,3,400,200,0,788,787,1,0,0,0,789,792,
        1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,790,
        1,0,0,0,793,795,3,360,180,0,794,796,3,44,22,0,795,794,1,0,0,0,795,
        796,1,0,0,0,796,807,1,0,0,0,797,798,5,17,0,0,798,803,3,22,11,0,799,
        800,5,15,0,0,800,802,3,22,11,0,801,799,1,0,0,0,802,805,1,0,0,0,803,
        801,1,0,0,0,803,804,1,0,0,0,804,808,1,0,0,0,805,803,1,0,0,0,806,
        808,5,150,0,0,807,797,1,0,0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,
        809,1,0,0,0,809,823,5,8,0,0,810,812,3,6,3,0,811,810,1,0,0,0,812,
        815,1,0,0,0,813,811,1,0,0,0,813,814,1,0,0,0,814,817,1,0,0,0,815,
        813,1,0,0,0,816,818,3,82,41,0,817,816,1,0,0,0,818,819,1,0,0,0,819,
        817,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,813,1,0,0,0,822,
        825,1,0,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,826,1,0,0,0,825,
        823,1,0,0,0,826,827,5,9,0,0,827,81,1,0,0,0,828,833,3,98,49,0,829,
        833,3,100,50,0,830,833,3,110,55,0,831,833,3,102,51,0,832,828,1,0,
        0,0,832,829,1,0,0,0,832,830,1,0,0,0,832,831,1,0,0,0,833,83,1,0,0,
        0,834,838,5,48,0,0,835,837,3,400,200,0,836,835,1,0,0,0,837,840,1,
        0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,838,1,
        0,0,0,841,843,3,360,180,0,842,844,3,44,22,0,843,842,1,0,0,0,843,
        844,1,0,0,0,844,855,1,0,0,0,845,846,5,17,0,0,846,851,3,22,11,0,847,
        848,5,15,0,0,848,850,3,22,11,0,849,847,1,0,0,0,850,853,1,0,0,0,851,
        849,1,0,0,0,851,852,1,0,0,0,852,856,1,0,0,0,853,851,1,0,0,0,854,
        856,5,150,0,0,855,845,1,0,0,0,855,854,1,0,0,0,856,857,1,0,0,0,857,
        871,5,8,0,0,858,860,3,6,3,0,859,858,1,0,0,0,860,863,1,0,0,0,861,
        859,1,0,0,0,861,862,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,864,
        866,3,82,41,0,865,864,1,0,0,0,866,867,1,0,0,0,867,865,1,0,0,0,867,
        868,1,0,0,0,868,870,1,0,0,0,869,861,1,0,0,0,870,873,1,0,0,0,871,
        869,1,0,0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,0,874,
        875,5,9,0,0,875,85,1,0,0,0,876,877,7,1,0,0,877,87,1,0,0,0,878,880,
        5,142,0,0,879,881,3,42,21,0,880,879,1,0,0,0,880,881,1,0,0,0,881,
        89,1,0,0,0,882,886,5,51,0,0,883,885,3,400,200,0,884,883,1,0,0,0,
        885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,
        888,886,1,0,0,0,889,899,3,368,184,0,890,892,3,44,22,0,891,890,1,
        0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,896,3,108,54,0,894,895,
        5,52,0,0,895,897,3,108,54,0,896,894,1,0,0,0,896,897,1,0,0,0,897,
        900,1,0,0,0,898,900,5,150,0,0,899,891,1,0,0,0,899,898,1,0,0,0,900,
        901,1,0,0,0,901,903,3,130,65,0,902,904,3,162,81,0,903,902,1,0,0,
        0,903,904,1,0,0,0,904,91,1,0,0,0,905,906,3,24,12,0,906,907,5,53,
        0,0,907,908,3,22,11,0,908,918,1,0,0,0,909,910,3,24,12,0,910,911,
        5,54,0,0,911,912,3,22,11,0,912,918,1,0,0,0,913,914,3,24,12,0,914,
        915,5,55,0,0,915,916,3,22,11,0,916,918,1,0,0,0,917,905,1,0,0,0,917,
        909,1,0,0,0,917,913,1,0,0,0,918,93,1,0,0,0,919,923,7,2,0,0,920,922,
        3,400,200,0,921,920,1,0,0,0,922,925,1,0,0,0,923,921,1,0,0,0,923,
        924,1,0,0,0,924,926,1,0,0,0,925,923,1,0,0,0,926,928,3,362,181,0,
        927,929,3,44,22,0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,
        0,930,932,5,12,0,0,931,933,5,150,0,0,932,931,1,0,0,0,932,933,1,0,
        0,0,933,935,1,0,0,0,934,936,5,43,0,0,935,934,1,0,0,0,935,936,1,0,
        0,0,936,937,1,0,0,0,937,942,3,96,48,0,938,939,5,43,0,0,939,941,3,
        96,48,0,940,938,1,0,0,0,941,944,1,0,0,0,942,940,1,0,0,0,942,943,
        1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,945,947,3,72,36,0,946,945,
        1,0,0,0,946,947,1,0,0,0,947,95,1,0,0,0,948,950,3,400,200,0,949,948,
        1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,954,
        1,0,0,0,953,951,1,0,0,0,954,956,3,364,182,0,955,957,3,398,199,0,
        956,955,1,0,0,0,956,957,1,0,0,0,957,97,1,0,0,0,958,962,5,58,0,0,
        959,961,3,400,200,0,960,959,1,0,0,0,961,964,1,0,0,0,962,960,1,0,
        0,0,962,963,1,0,0,0,963,965,1,0,0,0,964,962,1,0,0,0,965,970,3,386,
        193,0,966,967,5,15,0,0,967,969,3,386,193,0,968,966,1,0,0,0,969,972,
        1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,99,1,0,0,0,972,970,1,
        0,0,0,973,977,5,59,0,0,974,976,3,400,200,0,975,974,1,0,0,0,976,979,
        1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,980,1,0,0,0,979,977,
        1,0,0,0,980,982,3,388,194,0,981,983,5,150,0,0,982,981,1,0,0,0,982,
        983,1,0,0,0,983,986,1,0,0,0,984,985,5,60,0,0,985,987,3,218,109,0,
        986,984,1,0,0,0,986,987,1,0,0,0,987,101,1,0,0,0,988,992,3,104,52,
        0,989,991,3,400,200,0,990,989,1,0,0,0,991,994,1,0,0,0,992,990,1,
        0,0,0,992,993,1,0,0,0,993,996,1,0,0,0,994,992,1,0,0,0,995,997,3,
        372,186,0,996,995,1,0,0,0,996,997,1,0,0,0,997,1000,1,0,0,0,998,1001,
        3,106,53,0,999,1001,5,150,0,0,1000,998,1,0,0,0,1000,999,1,0,0,0,
        1001,1002,1,0,0,0,1002,1004,3,124,62,0,1003,1005,3,162,81,0,1004,
        1003,1,0,0,0,1004,1005,1,0,0,0,1005,103,1,0,0,0,1006,1016,5,61,0,
        0,1007,1016,5,62,0,0,1008,1016,5,63,0,0,1009,1010,5,64,0,0,1010,
        1016,5,63,0,0,1011,1012,5,65,0,0,1012,1016,5,63,0,0,1013,1014,5,
        66,0,0,1014,1016,5,63,0,0,1015,1006,1,0,0,0,1015,1007,1,0,0,0,1015,
        1008,1,0,0,0,1015,1009,1,0,0,0,1015,1011,1,0,0,0,1015,1013,1,0,0,
        0,1016,105,1,0,0,0,1017,1019,3,44,22,0,1018,1017,1,0,0,0,1018,1019,
        1,0,0,0,1019,1021,1,0,0,0,1020,1022,5,152,0,0,1021,1020,1,0,0,0,
        1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1026,3,108,54,0,1024,1025,
        5,67,0,0,1025,1027,3,108,54,0,1026,1024,1,0,0,0,1026,1027,1,0,0,
        0,1027,107,1,0,0,0,1028,1049,5,28,0,0,1029,1031,3,400,200,0,1030,
        1029,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,
        0,1033,1035,1,0,0,0,1034,1032,1,0,0,0,1035,1046,3,390,195,0,1036,
        1040,5,15,0,0,1037,1039,3,400,200,0,1038,1037,1,0,0,0,1039,1042,
        1,0,0,0,1040,1038,1,0,0,0,1040,1041,1,0,0,0,1041,1043,1,0,0,0,1042,
        1040,1,0,0,0,1043,1045,3,390,195,0,1044,1036,1,0,0,0,1045,1048,1,
        0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1050,1,0,0,0,1048,
        1046,1,0,0,0,1049,1032,1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,
        0,1051,1052,5,29,0,0,1052,109,1,0,0,0,1053,1055,5,64,0,0,1054,1053,
        1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,1058,5,68,0,0,1057,
        1059,5,61,0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1063,1,0,
        0,0,1060,1062,3,400,200,0,1061,1060,1,0,0,0,1062,1065,1,0,0,0,1063,
        1061,1,0,0,0,1063,1064,1,0,0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,
        0,1066,1068,3,112,56,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,
        1069,1,0,0,0,1069,1070,3,372,186,0,1070,1071,3,114,57,0,1071,1097,
        1,0,0,0,1072,1074,5,69,0,0,1073,1075,5,61,0,0,1074,1073,1,0,0,0,
        1074,1075,1,0,0,0,1075,1079,1,0,0,0,1076,1078,3,400,200,0,1077,1076,
        1,0,0,0,1078,1081,1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,
        1082,1,0,0,0,1081,1079,1,0,0,0,1082,1083,3,372,186,0,1083,1084,3,
        118,59,0,1084,1097,1,0,0,0,1085,1086,7,3,0,0,1086,1090,5,69,0,0,
        1087,1089,3,400,200,0,1088,1087,1,0,0,0,1089,1092,1,0,0,0,1090,1088,
        1,0,0,0,1090,1091,1,0,0,0,1091,1093,1,0,0,0,1092,1090,1,0,0,0,1093,
        1094,3,372,186,0,1094,1095,3,118,59,0,1095,1097,1,0,0,0,1096,1054,
        1,0,0,0,1096,1072,1,0,0,0,1096,1085,1,0,0,0,1097,1098,1,0,0,0,1098,
        1100,3,126,63,0,1099,1101,3,122,61,0,1100,1099,1,0,0,0,1100,1101,
        1,0,0,0,1101,111,1,0,0,0,1102,1103,5,70,0,0,1103,113,1,0,0,0,1104,
        1107,3,116,58,0,1105,1107,5,150,0,0,1106,1104,1,0,0,0,1106,1105,
        1,0,0,0,1107,115,1,0,0,0,1108,1110,3,44,22,0,1109,1108,1,0,0,0,1109,
        1110,1,0,0,0,1110,1111,1,0,0,0,1111,1112,3,108,54,0,1112,1118,5,
        13,0,0,1113,1119,3,22,11,0,1114,1115,5,28,0,0,1115,1116,3,390,195,
        0,1116,1117,5,29,0,0,1117,1119,1,0,0,0,1118,1113,1,0,0,0,1118,1114,
        1,0,0,0,1119,117,1,0,0,0,1120,1123,3,120,60,0,1121,1123,5,150,0,
        0,1122,1120,1,0,0,0,1122,1121,1,0,0,0,1123,119,1,0,0,0,1124,1126,
        3,44,22,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1128,1,0,0,0,
        1127,1129,5,152,0,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1130,
        1,0,0,0,1130,1140,3,108,54,0,1131,1138,5,13,0,0,1132,1139,3,22,11,
        0,1133,1134,5,28,0,0,1134,1135,5,141,0,0,1135,1136,5,13,0,0,1136,
        1137,5,21,0,0,1137,1139,5,29,0,0,1138,1132,1,0,0,0,1138,1133,1,0,
        0,0,1139,1141,1,0,0,0,1140,1131,1,0,0,0,1140,1141,1,0,0,0,1141,121,
        1,0,0,0,1142,1143,5,8,0,0,1143,1144,3,218,109,0,1144,1148,5,9,0,
        0,1145,1146,5,71,0,0,1146,1147,5,61,0,0,1147,1149,3,162,81,0,1148,
        1145,1,0,0,0,1148,1149,1,0,0,0,1149,123,1,0,0,0,1150,1155,3,144,
        72,0,1151,1155,3,134,67,0,1152,1155,3,136,68,0,1153,1155,3,138,69,
        0,1154,1150,1,0,0,0,1154,1151,1,0,0,0,1154,1152,1,0,0,0,1154,1153,
        1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,1157,1,0,0,0,1157,
        125,1,0,0,0,1158,1156,1,0,0,0,1159,1164,3,134,67,0,1160,1164,3,148,
        74,0,1161,1164,3,136,68,0,1162,1164,3,138,69,0,1163,1159,1,0,0,0,
        1163,1160,1,0,0,0,1163,1161,1,0,0,0,1163,1162,1,0,0,0,1164,1167,
        1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,127,1,0,0,0,1167,
        1165,1,0,0,0,1168,1172,3,148,74,0,1169,1170,5,72,0,0,1170,1172,3,
        218,109,0,1171,1168,1,0,0,0,1171,1169,1,0,0,0,1172,1175,1,0,0,0,
        1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,129,1,0,0,0,1175,1173,1,
        0,0,0,1176,1188,3,148,74,0,1177,1188,3,144,72,0,1178,1180,5,73,0,
        0,1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,1188,
        3,134,67,0,1182,1184,5,73,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,
        0,1184,1185,1,0,0,0,1185,1188,3,136,68,0,1186,1188,3,138,69,0,1187,
        1176,1,0,0,0,1187,1177,1,0,0,0,1187,1179,1,0,0,0,1187,1183,1,0,0,
        0,1187,1186,1,0,0,0,1188,1191,1,0,0,0,1189,1187,1,0,0,0,1189,1190,
        1,0,0,0,1190,131,1,0,0,0,1191,1189,1,0,0,0,1192,1196,3,146,73,0,
        1193,1196,3,138,69,0,1194,1196,3,144,72,0,1195,1192,1,0,0,0,1195,
        1193,1,0,0,0,1195,1194,1,0,0,0,1196,1199,1,0,0,0,1197,1195,1,0,0,
        0,1197,1198,1,0,0,0,1198,133,1,0,0,0,1199,1197,1,0,0,0,1200,1204,
        5,72,0,0,1201,1203,3,400,200,0,1202,1201,1,0,0,0,1203,1206,1,0,0,
        0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,1210,1,0,0,0,1206,1204,
        1,0,0,0,1207,1208,3,374,187,0,1208,1209,5,13,0,0,1209,1211,1,0,0,
        0,1210,1207,1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,1212,1214,
        3,218,109,0,1213,1215,5,139,0,0,1214,1213,1,0,0,0,1214,1215,1,0,
        0,0,1215,135,1,0,0,0,1216,1220,5,74,0,0,1217,1219,3,400,200,0,1218,
        1217,1,0,0,0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,
        0,1221,1223,1,0,0,0,1222,1220,1,0,0,0,1223,1224,3,218,109,0,1224,
        137,1,0,0,0,1225,1229,5,75,0,0,1226,1228,3,400,200,0,1227,1226,1,
        0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,
        1232,1,0,0,0,1231,1229,1,0,0,0,1232,1233,3,140,70,0,1233,139,1,0,
        0,0,1234,1239,3,142,71,0,1235,1236,5,15,0,0,1236,1238,3,142,71,0,
        1237,1235,1,0,0,0,1238,1241,1,0,0,0,1239,1237,1,0,0,0,1239,1240,
        1,0,0,0,1240,141,1,0,0,0,1241,1239,1,0,0,0,1242,1245,5,157,0,0,1243,
        1245,3,218,109,0,1244,1242,1,0,0,0,1244,1243,1,0,0,0,1245,143,1,
        0,0,0,1246,1250,5,76,0,0,1247,1249,3,400,200,0,1248,1247,1,0,0,0,
        1249,1252,1,0,0,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,1251,1253,
        1,0,0,0,1252,1250,1,0,0,0,1253,1258,3,152,76,0,1254,1255,5,15,0,
        0,1255,1257,3,152,76,0,1256,1254,1,0,0,0,1257,1260,1,0,0,0,1258,
        1256,1,0,0,0,1258,1259,1,0,0,0,1259,145,1,0,0,0,1260,1258,1,0,0,
        0,1261,1265,5,77,0,0,1262,1264,3,400,200,0,1263,1262,1,0,0,0,1264,
        1267,1,0,0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,1268,1,0,0,
        0,1267,1265,1,0,0,0,1268,1269,3,218,109,0,1269,147,1,0,0,0,1270,
        1274,5,78,0,0,1271,1273,3,400,200,0,1272,1271,1,0,0,0,1273,1276,
        1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,1277,1,0,0,0,1276,
        1274,1,0,0,0,1277,1282,3,150,75,0,1278,1279,5,15,0,0,1279,1281,3,
        150,75,0,1280,1278,1,0,0,0,1281,1284,1,0,0,0,1282,1280,1,0,0,0,1282,
        1283,1,0,0,0,1283,149,1,0,0,0,1284,1282,1,0,0,0,1285,1288,5,157,
        0,0,1286,1288,3,152,76,0,1287,1285,1,0,0,0,1287,1286,1,0,0,0,1288,
        151,1,0,0,0,1289,1291,3,218,109,0,1290,1292,3,154,77,0,1291,1290,
        1,0,0,0,1291,1292,1,0,0,0,1292,1295,1,0,0,0,1293,1295,3,154,77,0,
        1294,1289,1,0,0,0,1294,1293,1,0,0,0,1295,153,1,0,0,0,1296,1297,5,
        14,0,0,1297,1298,3,354,177,0,1298,155,1,0,0,0,1299,1300,5,79,0,0,
        1300,1301,3,374,187,0,1301,1302,5,13,0,0,1302,1304,1,0,0,0,1303,
        1299,1,0,0,0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,
        0,1306,1308,1,0,0,0,1307,1305,1,0,0,0,1308,1309,3,158,79,0,1309,
        157,1,0,0,0,1310,1330,3,194,97,0,1311,1330,3,196,98,0,1312,1330,
        3,162,81,0,1313,1330,3,160,80,0,1314,1330,3,208,104,0,1315,1330,
        3,198,99,0,1316,1330,3,204,102,0,1317,1330,3,180,90,0,1318,1330,
        3,190,95,0,1319,1330,3,206,103,0,1320,1330,3,200,100,0,1321,1330,
        3,164,82,0,1322,1330,3,202,101,0,1323,1330,3,168,84,0,1324,1330,
        3,170,85,0,1325,1330,3,172,86,0,1326,1330,3,186,93,0,1327,1330,3,
        188,94,0,1328,1330,3,166,83,0,1329,1310,1,0,0,0,1329,1311,1,0,0,
        0,1329,1312,1,0,0,0,1329,1313,1,0,0,0,1329,1314,1,0,0,0,1329,1315,
        1,0,0,0,1329,1316,1,0,0,0,1329,1317,1,0,0,0,1329,1318,1,0,0,0,1329,
        1319,1,0,0,0,1329,1320,1,0,0,0,1329,1321,1,0,0,0,1329,1322,1,0,0,
        0,1329,1323,1,0,0,0,1329,1324,1,0,0,0,1329,1325,1,0,0,0,1329,1326,
        1,0,0,0,1329,1327,1,0,0,0,1329,1328,1,0,0,0,1330,159,1,0,0,0,1331,
        1332,5,80,0,0,1332,1333,3,374,187,0,1333,1334,5,139,0,0,1334,1356,
        1,0,0,0,1335,1336,5,81,0,0,1336,1337,3,374,187,0,1337,1338,5,139,
        0,0,1338,1356,1,0,0,0,1339,1341,5,80,0,0,1340,1339,1,0,0,0,1341,
        1344,1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,
        0,1344,1342,1,0,0,0,1345,1346,5,80,0,0,1346,1356,5,139,0,0,1347,
        1349,5,80,0,0,1348,1347,1,0,0,0,1349,1352,1,0,0,0,1350,1348,1,0,
        0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,1352,1350,1,0,0,0,1353,1354,
        5,81,0,0,1354,1356,5,139,0,0,1355,1331,1,0,0,0,1355,1335,1,0,0,0,
        1355,1342,1,0,0,0,1355,1350,1,0,0,0,1356,161,1,0,0,0,1357,1361,5,
        8,0,0,1358,1360,3,156,78,0,1359,1358,1,0,0,0,1360,1363,1,0,0,0,1361,
        1359,1,0,0,0,1361,1362,1,0,0,0,1362,1364,1,0,0,0,1363,1361,1,0,0,
        0,1364,1365,5,9,0,0,1365,163,1,0,0,0,1366,1375,5,82,0,0,1367,1372,
        3,250,125,0,1368,1369,5,15,0,0,1369,1371,3,250,125,0,1370,1368,1,
        0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,
        1376,1,0,0,0,1374,1372,1,0,0,0,1375,1367,1,0,0,0,1375,1376,1,0,0,
        0,1376,1377,1,0,0,0,1377,1378,5,139,0,0,1378,165,1,0,0,0,1379,1388,
        5,73,0,0,1380,1385,3,250,125,0,1381,1382,5,15,0,0,1382,1384,3,250,
        125,0,1383,1381,1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,1385,
        1386,1,0,0,0,1386,1389,1,0,0,0,1387,1385,1,0,0,0,1388,1380,1,0,0,
        0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,1390,1391,5,139,0,0,1391,167,
        1,0,0,0,1392,1425,3,248,124,0,1393,1395,3,400,200,0,1394,1393,1,
        0,0,0,1395,1398,1,0,0,0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,
        1399,1,0,0,0,1398,1396,1,0,0,0,1399,1426,5,139,0,0,1400,1401,5,15,
        0,0,1401,1403,3,248,124,0,1402,1400,1,0,0,0,1403,1406,1,0,0,0,1404,
        1402,1,0,0,0,1404,1405,1,0,0,0,1405,1421,1,0,0,0,1406,1404,1,0,0,
        0,1407,1408,5,60,0,0,1408,1413,3,250,125,0,1409,1410,5,15,0,0,1410,
        1412,3,250,125,0,1411,1409,1,0,0,0,1412,1415,1,0,0,0,1413,1411,1,
        0,0,0,1413,1414,1,0,0,0,1414,1422,1,0,0,0,1415,1413,1,0,0,0,1416,
        1418,5,83,0,0,1417,1419,5,84,0,0,1418,1417,1,0,0,0,1418,1419,1,0,
        0,0,1419,1420,1,0,0,0,1420,1422,3,218,109,0,1421,1407,1,0,0,0,1421,
        1416,1,0,0,0,1422,1423,1,0,0,0,1423,1424,5,139,0,0,1424,1426,1,0,
        0,0,1425,1396,1,0,0,0,1425,1404,1,0,0,0,1426,169,1,0,0,0,1427,1432,
        3,248,124,0,1428,1429,5,15,0,0,1429,1431,3,248,124,0,1430,1428,1,
        0,0,0,1431,1434,1,0,0,0,1432,1430,1,0,0,0,1432,1433,1,0,0,0,1433,
        1436,1,0,0,0,1434,1432,1,0,0,0,1435,1427,1,0,0,0,1435,1436,1,0,0,
        0,1436,1437,1,0,0,0,1437,1439,5,85,0,0,1438,1440,7,4,0,0,1439,1438,
        1,0,0,0,1439,1440,1,0,0,0,1440,1441,1,0,0,0,1441,1446,3,218,109,
        0,1442,1443,5,15,0,0,1443,1445,3,250,125,0,1444,1442,1,0,0,0,1445,
        1448,1,0,0,0,1446,1444,1,0,0,0,1446,1447,1,0,0,0,1447,1449,1,0,0,
        0,1448,1446,1,0,0,0,1449,1450,5,139,0,0,1450,171,1,0,0,0,1451,1453,
        5,3,0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,
        1458,5,58,0,0,1455,1457,3,400,200,0,1456,1455,1,0,0,0,1457,1460,
        1,0,0,0,1458,1456,1,0,0,0,1458,1459,1,0,0,0,1459,1522,1,0,0,0,1460,
        1458,1,0,0,0,1461,1472,3,392,196,0,1462,1466,5,15,0,0,1463,1465,
        3,400,200,0,1464,1463,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,
        0,1466,1467,1,0,0,0,1467,1469,1,0,0,0,1468,1466,1,0,0,0,1469,1471,
        3,392,196,0,1470,1462,1,0,0,0,1471,1474,1,0,0,0,1472,1470,1,0,0,
        0,1472,1473,1,0,0,0,1473,1507,1,0,0,0,1474,1472,1,0,0,0,1475,1476,
        5,60,0,0,1476,1481,3,250,125,0,1477,1478,5,15,0,0,1478,1480,3,250,
        125,0,1479,1477,1,0,0,0,1480,1483,1,0,0,0,1481,1479,1,0,0,0,1481,
        1482,1,0,0,0,1482,1508,1,0,0,0,1483,1481,1,0,0,0,1484,1486,5,85,
        0,0,1485,1487,7,4,0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,
        1,0,0,0,1488,1493,3,218,109,0,1489,1490,5,15,0,0,1490,1492,3,250,
        125,0,1491,1489,1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,0,0,1493,
        1494,1,0,0,0,1494,1508,1,0,0,0,1495,1493,1,0,0,0,1496,1498,3,400,
        200,0,1497,1496,1,0,0,0,1498,1501,1,0,0,0,1499,1497,1,0,0,0,1499,
        1500,1,0,0,0,1500,1502,1,0,0,0,1501,1499,1,0,0,0,1502,1504,5,83,
        0,0,1503,1505,5,84,0,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,
        1506,1,0,0,0,1506,1508,3,218,109,0,1507,1475,1,0,0,0,1507,1484,1,
        0,0,0,1507,1499,1,0,0,0,1507,1508,1,0,0,0,1508,1523,1,0,0,0,1509,
        1518,3,174,87,0,1510,1519,5,60,0,0,1511,1513,3,400,200,0,1512,1511,
        1,0,0,0,1513,1516,1,0,0,0,1514,1512,1,0,0,0,1514,1515,1,0,0,0,1515,
        1517,1,0,0,0,1516,1514,1,0,0,0,1517,1519,5,83,0,0,1518,1510,1,0,
        0,0,1518,1514,1,0,0,0,1519,1520,1,0,0,0,1520,1521,3,218,109,0,1521,
        1523,1,0,0,0,1522,1461,1,0,0,0,1522,1509,1,0,0,0,1523,1524,1,0,0,
        0,1524,1525,5,139,0,0,1525,173,1,0,0,0,1526,1528,5,141,0,0,1527,
        1526,1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,0,0,0,1529,1530,5,28,
        0,0,1530,1535,3,174,87,0,1531,1532,5,15,0,0,1532,1534,3,174,87,0,
        1533,1531,1,0,0,0,1534,1537,1,0,0,0,1535,1533,1,0,0,0,1535,1536,
        1,0,0,0,1536,1538,1,0,0,0,1537,1535,1,0,0,0,1538,1539,5,29,0,0,1539,
        1542,1,0,0,0,1540,1542,3,392,196,0,1541,1527,1,0,0,0,1541,1540,1,
        0,0,0,1542,175,1,0,0,0,1543,1549,5,157,0,0,1544,1545,5,28,0,0,1545,
        1546,5,157,0,0,1546,1549,5,29,0,0,1547,1549,3,218,109,0,1548,1543,
        1,0,0,0,1548,1544,1,0,0,0,1548,1547,1,0,0,0,1549,177,1,0,0,0,1550,
        1555,3,394,197,0,1551,1552,5,15,0,0,1552,1554,3,394,197,0,1553,1551,
        1,0,0,0,1554,1557,1,0,0,0,1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,
        1561,1,0,0,0,1557,1555,1,0,0,0,1558,1560,3,400,200,0,1559,1558,1,
        0,0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,0,1561,1562,1,0,0,0,1562,
        1564,1,0,0,0,1563,1561,1,0,0,0,1564,1565,5,83,0,0,1565,1566,3,218,
        109,0,1566,179,1,0,0,0,1567,1581,5,88,0,0,1568,1582,3,182,91,0,1569,
        1572,3,178,89,0,1570,1572,3,176,88,0,1571,1569,1,0,0,0,1571,1570,
        1,0,0,0,1572,1573,1,0,0,0,1573,1579,3,162,81,0,1574,1577,5,89,0,
        0,1575,1578,3,180,90,0,1576,1578,3,162,81,0,1577,1575,1,0,0,0,1577,
        1576,1,0,0,0,1578,1580,1,0,0,0,1579,1574,1,0,0,0,1579,1580,1,0,0,
        0,1580,1582,1,0,0,0,1581,1568,1,0,0,0,1581,1571,1,0,0,0,1582,181,
        1,0,0,0,1583,1585,3,184,92,0,1584,1583,1,0,0,0,1585,1588,1,0,0,0,
        1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,1598,1,0,0,0,1588,1586,
        1,0,0,0,1589,1593,5,8,0,0,1590,1592,3,184,92,0,1591,1590,1,0,0,0,
        1592,1595,1,0,0,0,1593,1591,1,0,0,0,1593,1594,1,0,0,0,1594,1596,
        1,0,0,0,1595,1593,1,0,0,0,1596,1598,5,9,0,0,1597,1586,1,0,0,0,1597,
        1589,1,0,0,0,1598,183,1,0,0,0,1599,1602,5,90,0,0,1600,1603,3,178,
        89,0,1601,1603,3,218,109,0,1602,1600,1,0,0,0,1602,1601,1,0,0,0,1603,
        1604,1,0,0,0,1604,1608,5,91,0,0,1605,1607,3,156,78,0,1606,1605,1,
        0,0,0,1607,1610,1,0,0,0,1608,1606,1,0,0,0,1608,1609,1,0,0,0,1609,
        185,1,0,0,0,1610,1608,1,0,0,0,1611,1621,5,92,0,0,1612,1613,3,132,
        66,0,1613,1614,3,182,91,0,1614,1622,1,0,0,0,1615,1616,3,176,88,0,
        1616,1619,3,132,66,0,1617,1620,3,162,81,0,1618,1620,1,0,0,0,1619,
        1617,1,0,0,0,1619,1618,1,0,0,0,1620,1622,1,0,0,0,1621,1612,1,0,0,
        0,1621,1615,1,0,0,0,1622,187,1,0,0,0,1623,1624,5,93,0,0,1624,1625,
        3,394,197,0,1625,1626,5,60,0,0,1626,1627,3,218,109,0,1627,1630,7,
        5,0,0,1628,1631,5,157,0,0,1629,1631,3,218,109,0,1630,1628,1,0,0,
        0,1630,1629,1,0,0,0,1631,1632,1,0,0,0,1632,1635,3,132,66,0,1633,
        1636,3,162,81,0,1634,1636,1,0,0,0,1635,1633,1,0,0,0,1635,1634,1,
        0,0,0,1636,189,1,0,0,0,1637,1638,5,96,0,0,1638,1653,3,218,109,0,
        1639,1643,5,8,0,0,1640,1642,3,192,96,0,1641,1640,1,0,0,0,1642,1645,
        1,0,0,0,1643,1641,1,0,0,0,1643,1644,1,0,0,0,1644,1646,1,0,0,0,1645,
        1643,1,0,0,0,1646,1654,5,9,0,0,1647,1649,3,192,96,0,1648,1647,1,
        0,0,0,1649,1652,1,0,0,0,1650,1648,1,0,0,0,1650,1651,1,0,0,0,1651,
        1654,1,0,0,0,1652,1650,1,0,0,0,1653,1639,1,0,0,0,1653,1650,1,0,0,
        0,1654,191,1,0,0,0,1655,1656,5,90,0,0,1656,1657,3,304,152,0,1657,
        1661,5,91,0,0,1658,1660,3,156,78,0,1659,1658,1,0,0,0,1660,1663,1,
        0,0,0,1661,1659,1,0,0,0,1661,1662,1,0,0,0,1662,193,1,0,0,0,1663,
        1661,1,0,0,0,1664,1668,5,87,0,0,1665,1667,3,400,200,0,1666,1665,
        1,0,0,0,1667,1670,1,0,0,0,1668,1666,1,0,0,0,1668,1669,1,0,0,0,1669,
        1674,1,0,0,0,1670,1668,1,0,0,0,1671,1672,3,374,187,0,1672,1673,5,
        13,0,0,1673,1675,1,0,0,0,1674,1671,1,0,0,0,1674,1675,1,0,0,0,1675,
        1676,1,0,0,0,1676,1680,3,218,109,0,1677,1681,5,139,0,0,1678,1679,
        5,71,0,0,1679,1681,3,162,81,0,1680,1677,1,0,0,0,1680,1678,1,0,0,
        0,1681,195,1,0,0,0,1682,1686,5,84,0,0,1683,1685,3,400,200,0,1684,
        1683,1,0,0,0,1685,1688,1,0,0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,
        0,1687,1689,1,0,0,0,1688,1686,1,0,0,0,1689,1690,3,218,109,0,1690,
        1691,5,139,0,0,1691,197,1,0,0,0,1692,1696,5,86,0,0,1693,1695,3,400,
        200,0,1694,1693,1,0,0,0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1696,
        1697,1,0,0,0,1697,1699,1,0,0,0,1698,1696,1,0,0,0,1699,1702,3,218,
        109,0,1700,1701,5,15,0,0,1701,1703,3,218,109,0,1702,1700,1,0,0,0,
        1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,1705,5,139,0,0,1705,199,
        1,0,0,0,1706,1707,5,97,0,0,1707,1712,3,218,109,0,1708,1709,5,15,
        0,0,1709,1711,3,218,109,0,1710,1708,1,0,0,0,1711,1714,1,0,0,0,1712,
        1710,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1712,1,0,0,
        0,1715,1716,5,139,0,0,1716,201,1,0,0,0,1717,1718,5,98,0,0,1718,1723,
        3,218,109,0,1719,1720,5,15,0,0,1720,1722,3,218,109,0,1721,1719,1,
        0,0,0,1722,1725,1,0,0,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,
        1726,1,0,0,0,1725,1723,1,0,0,0,1726,1727,5,139,0,0,1727,203,1,0,
        0,0,1728,1735,5,99,0,0,1729,1731,5,28,0,0,1730,1732,3,342,171,0,
        1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1733,1,0,0,0,1733,1736,
        5,29,0,0,1734,1736,3,342,171,0,1735,1729,1,0,0,0,1735,1734,1,0,0,
        0,1736,1740,1,0,0,0,1737,1739,3,136,68,0,1738,1737,1,0,0,0,1739,
        1742,1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1744,1,0,0,
        0,1742,1740,1,0,0,0,1743,1745,3,162,81,0,1744,1743,1,0,0,0,1744,
        1745,1,0,0,0,1745,205,1,0,0,0,1746,1750,5,100,0,0,1747,1749,3,400,
        200,0,1748,1747,1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,
        1751,1,0,0,0,1751,1753,1,0,0,0,1752,1750,1,0,0,0,1753,1758,3,152,
        76,0,1754,1755,5,15,0,0,1755,1757,3,152,76,0,1756,1754,1,0,0,0,1757,
        1760,1,0,0,0,1758,1756,1,0,0,0,1758,1759,1,0,0,0,1759,1761,1,0,0,
        0,1760,1758,1,0,0,0,1761,1762,5,139,0,0,1762,207,1,0,0,0,1763,1767,
        5,101,0,0,1764,1766,3,400,200,0,1765,1764,1,0,0,0,1766,1769,1,0,
        0,0,1767,1765,1,0,0,0,1767,1768,1,0,0,0,1768,1771,1,0,0,0,1769,1767,
        1,0,0,0,1770,1772,3,216,108,0,1771,1770,1,0,0,0,1771,1772,1,0,0,
        0,1772,1773,1,0,0,0,1773,1774,5,8,0,0,1774,1775,3,210,105,0,1775,
        1776,5,9,0,0,1776,209,1,0,0,0,1777,1779,3,212,106,0,1778,1780,3,
        216,108,0,1779,1778,1,0,0,0,1779,1780,1,0,0,0,1780,1781,1,0,0,0,
        1781,1782,3,214,107,0,1782,1784,1,0,0,0,1783,1777,1,0,0,0,1784,1787,
        1,0,0,0,1785,1783,1,0,0,0,1785,1786,1,0,0,0,1786,211,1,0,0,0,1787,
        1785,1,0,0,0,1788,1789,3,218,109,0,1789,1790,5,139,0,0,1790,213,
        1,0,0,0,1791,1794,3,162,81,0,1792,1794,3,208,104,0,1793,1791,1,0,
        0,0,1793,1792,1,0,0,0,1794,1797,1,0,0,0,1795,1793,1,0,0,0,1795,1796,
        1,0,0,0,1796,215,1,0,0,0,1797,1795,1,0,0,0,1798,1804,5,30,0,0,1799,
        1800,5,102,0,0,1800,1801,5,103,0,0,1801,1802,3,218,109,0,1802,1803,
        5,104,0,0,1803,1805,1,0,0,0,1804,1799,1,0,0,0,1804,1805,1,0,0,0,
        1805,1815,1,0,0,0,1806,1815,5,26,0,0,1807,1815,5,27,0,0,1808,1815,
        5,105,0,0,1809,1815,5,106,0,0,1810,1815,5,107,0,0,1811,1815,5,108,
        0,0,1812,1815,5,109,0,0,1813,1815,5,110,0,0,1814,1798,1,0,0,0,1814,
        1806,1,0,0,0,1814,1807,1,0,0,0,1814,1808,1,0,0,0,1814,1809,1,0,0,
        0,1814,1810,1,0,0,0,1814,1811,1,0,0,0,1814,1812,1,0,0,0,1814,1813,
        1,0,0,0,1815,217,1,0,0,0,1816,1819,3,220,110,0,1817,1818,5,139,0,
        0,1818,1820,3,218,109,0,1819,1817,1,0,0,0,1819,1820,1,0,0,0,1820,
        219,1,0,0,0,1821,1826,3,222,111,0,1822,1823,5,108,0,0,1823,1825,
        3,222,111,0,1824,1822,1,0,0,0,1825,1828,1,0,0,0,1826,1824,1,0,0,
        0,1826,1827,1,0,0,0,1827,221,1,0,0,0,1828,1826,1,0,0,0,1829,1841,
        3,226,113,0,1830,1831,5,109,0,0,1831,1842,3,224,112,0,1832,1833,
        5,110,0,0,1833,1838,3,226,113,0,1834,1835,5,110,0,0,1835,1837,3,
        226,113,0,1836,1834,1,0,0,0,1837,1840,1,0,0,0,1838,1836,1,0,0,0,
        1838,1839,1,0,0,0,1839,1842,1,0,0,0,1840,1838,1,0,0,0,1841,1830,
        1,0,0,0,1841,1832,1,0,0,0,1841,1842,1,0,0,0,1842,223,1,0,0,0,1843,
        1846,3,226,113,0,1844,1845,5,109,0,0,1845,1847,3,224,112,0,1846,
        1844,1,0,0,0,1846,1847,1,0,0,0,1847,225,1,0,0,0,1848,1850,7,6,0,
        0,1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,1851,1856,
        3,228,114,0,1852,1853,7,6,0,0,1853,1855,3,228,114,0,1854,1852,1,
        0,0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,1856,1857,1,0,0,0,1857,
        227,1,0,0,0,1858,1856,1,0,0,0,1859,1865,3,232,116,0,1860,1861,3,
        230,115,0,1861,1862,3,232,116,0,1862,1864,1,0,0,0,1863,1860,1,0,
        0,0,1864,1867,1,0,0,0,1865,1863,1,0,0,0,1865,1866,1,0,0,0,1866,229,
        1,0,0,0,1867,1865,1,0,0,0,1868,1874,5,30,0,0,1869,1870,5,102,0,0,
        1870,1871,5,103,0,0,1871,1872,3,218,109,0,1872,1873,5,104,0,0,1873,
        1875,1,0,0,0,1874,1869,1,0,0,0,1874,1875,1,0,0,0,1875,1892,1,0,0,
        0,1876,1882,5,105,0,0,1877,1878,5,102,0,0,1878,1879,5,103,0,0,1879,
        1880,3,218,109,0,1880,1881,5,104,0,0,1881,1883,1,0,0,0,1882,1877,
        1,0,0,0,1882,1883,1,0,0,0,1883,1892,1,0,0,0,1884,1892,5,26,0,0,1885,
        1892,5,27,0,0,1886,1892,5,106,0,0,1887,1892,5,107,0,0,1888,1892,
        5,113,0,0,1889,1892,5,114,0,0,1890,1892,5,115,0,0,1891,1868,1,0,
        0,0,1891,1876,1,0,0,0,1891,1884,1,0,0,0,1891,1885,1,0,0,0,1891,1886,
        1,0,0,0,1891,1887,1,0,0,0,1891,1888,1,0,0,0,1891,1889,1,0,0,0,1891,
        1890,1,0,0,0,1892,231,1,0,0,0,1893,1898,3,234,117,0,1894,1895,5,
        153,0,0,1895,1897,3,234,117,0,1896,1894,1,0,0,0,1897,1900,1,0,0,
        0,1898,1896,1,0,0,0,1898,1899,1,0,0,0,1899,233,1,0,0,0,1900,1898,
        1,0,0,0,1901,1906,3,236,118,0,1902,1903,5,154,0,0,1903,1905,3,236,
        118,0,1904,1902,1,0,0,0,1905,1908,1,0,0,0,1906,1904,1,0,0,0,1906,
        1907,1,0,0,0,1907,235,1,0,0,0,1908,1906,1,0,0,0,1909,1914,3,238,
        119,0,1910,1911,5,155,0,0,1911,1913,3,238,119,0,1912,1910,1,0,0,
        0,1913,1916,1,0,0,0,1914,1912,1,0,0,0,1914,1915,1,0,0,0,1915,237,
        1,0,0,0,1916,1914,1,0,0,0,1917,1922,3,240,120,0,1918,1919,5,156,
        0,0,1919,1921,3,240,120,0,1920,1918,1,0,0,0,1921,1924,1,0,0,0,1922,
        1920,1,0,0,0,1922,1923,1,0,0,0,1923,239,1,0,0,0,1924,1922,1,0,0,
        0,1925,1930,3,242,121,0,1926,1927,7,7,0,0,1927,1929,3,22,11,0,1928,
        1926,1,0,0,0,1929,1932,1,0,0,0,1930,1928,1,0,0,0,1930,1931,1,0,0,
        0,1931,241,1,0,0,0,1932,1930,1,0,0,0,1933,1934,5,118,0,0,1934,1939,
        3,242,121,0,1935,1936,5,33,0,0,1936,1939,3,242,121,0,1937,1939,3,
        244,122,0,1938,1933,1,0,0,0,1938,1935,1,0,0,0,1938,1937,1,0,0,0,
        1939,243,1,0,0,0,1940,1944,3,318,159,0,1941,1943,3,322,161,0,1942,
        1941,1,0,0,0,1943,1946,1,0,0,0,1944,1942,1,0,0,0,1944,1945,1,0,0,
        0,1945,1978,1,0,0,0,1946,1944,1,0,0,0,1947,1978,3,246,123,0,1948,
        1952,3,288,144,0,1949,1951,3,322,161,0,1950,1949,1,0,0,0,1951,1954,
        1,0,0,0,1952,1950,1,0,0,0,1952,1953,1,0,0,0,1953,1978,1,0,0,0,1954,
        1952,1,0,0,0,1955,1959,3,284,142,0,1956,1958,3,322,161,0,1957,1956,
        1,0,0,0,1958,1961,1,0,0,0,1959,1957,1,0,0,0,1959,1960,1,0,0,0,1960,
        1978,1,0,0,0,1961,1959,1,0,0,0,1962,1966,3,286,143,0,1963,1965,3,
        322,161,0,1964,1963,1,0,0,0,1965,1968,1,0,0,0,1966,1964,1,0,0,0,
        1966,1967,1,0,0,0,1967,1978,1,0,0,0,1968,1966,1,0,0,0,1969,1978,
        3,292,146,0,1970,1974,3,260,130,0,1971,1973,3,322,161,0,1972,1971,
        1,0,0,0,1973,1976,1,0,0,0,1974,1972,1,0,0,0,1974,1975,1,0,0,0,1975,
        1978,1,0,0,0,1976,1974,1,0,0,0,1977,1940,1,0,0,0,1977,1947,1,0,0,
        0,1977,1948,1,0,0,0,1977,1955,1,0,0,0,1977,1962,1,0,0,0,1977,1969,
        1,0,0,0,1977,1970,1,0,0,0,1978,245,1,0,0,0,1979,1993,3,352,176,0,
        1980,1989,5,28,0,0,1981,1986,3,394,197,0,1982,1983,5,15,0,0,1983,
        1985,3,394,197,0,1984,1982,1,0,0,0,1985,1988,1,0,0,0,1986,1984,1,
        0,0,0,1986,1987,1,0,0,0,1987,1990,1,0,0,0,1988,1986,1,0,0,0,1989,
        1981,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,1991,1993,5,29,
        0,0,1992,1979,1,0,0,0,1992,1980,1,0,0,0,1993,1994,1,0,0,0,1994,1995,
        3,128,64,0,1995,1996,5,91,0,0,1996,1997,3,218,109,0,1997,247,1,0,
        0,0,1998,2002,3,318,159,0,1999,2001,3,322,161,0,2000,1999,1,0,0,
        0,2001,2004,1,0,0,0,2002,2000,1,0,0,0,2002,2003,1,0,0,0,2003,2014,
        1,0,0,0,2004,2002,1,0,0,0,2005,2006,3,260,130,0,2006,2010,3,322,
        161,0,2007,2009,3,322,161,0,2008,2007,1,0,0,0,2009,2012,1,0,0,0,
        2010,2008,1,0,0,0,2010,2011,1,0,0,0,2011,2014,1,0,0,0,2012,2010,
        1,0,0,0,2013,1998,1,0,0,0,2013,2005,1,0,0,0,2014,249,1,0,0,0,2015,
        2026,3,252,126,0,2016,2026,3,258,129,0,2017,2026,3,218,109,0,2018,
        2022,5,157,0,0,2019,2021,3,400,200,0,2020,2019,1,0,0,0,2021,2024,
        1,0,0,0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,2026,1,0,0,0,2024,
        2022,1,0,0,0,2025,2015,1,0,0,0,2025,2016,1,0,0,0,2025,2017,1,0,0,
        0,2025,2018,1,0,0,0,2026,251,1,0,0,0,2027,2029,5,34,0,0,2028,2030,
        3,22,11,0,2029,2028,1,0,0,0,2029,2030,1,0,0,0,2030,2031,1,0,0,0,
        2031,2033,5,103,0,0,2032,2034,3,340,170,0,2033,2032,1,0,0,0,2033,
        2034,1,0,0,0,2034,2035,1,0,0,0,2035,2045,5,104,0,0,2036,2037,5,28,
        0,0,2037,2038,3,218,109,0,2038,2039,5,29,0,0,2039,2046,1,0,0,0,2040,
        2042,5,103,0,0,2041,2043,3,340,170,0,2042,2041,1,0,0,0,2042,2043,
        1,0,0,0,2043,2044,1,0,0,0,2044,2046,5,104,0,0,2045,2036,1,0,0,0,
        2045,2040,1,0,0,0,2045,2046,1,0,0,0,2046,253,1,0,0,0,2047,2052,3,
        256,128,0,2048,2049,5,15,0,0,2049,2051,3,256,128,0,2050,2048,1,0,
        0,0,2051,2054,1,0,0,0,2052,2050,1,0,0,0,2052,2053,1,0,0,0,2053,255,
        1,0,0,0,2054,2052,1,0,0,0,2055,2056,3,356,178,0,2056,2057,5,60,0,
        0,2057,2059,1,0,0,0,2058,2055,1,0,0,0,2058,2059,1,0,0,0,2059,2060,
        1,0,0,0,2060,2061,3,218,109,0,2061,257,1,0,0,0,2062,2063,5,34,0,
        0,2063,2066,3,22,11,0,2064,2065,5,20,0,0,2065,2067,3,380,190,0,2066,
        2064,1,0,0,0,2066,2067,1,0,0,0,2067,2073,1,0,0,0,2068,2070,5,28,
        0,0,2069,2071,3,254,127,0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,
        2072,1,0,0,0,2072,2074,5,29,0,0,2073,2068,1,0,0,0,2073,2074,1,0,
        0,0,2074,259,1,0,0,0,2075,2084,3,262,131,0,2076,2084,3,268,134,0,
        2077,2084,3,272,136,0,2078,2084,3,274,137,0,2079,2084,3,276,138,
        0,2080,2084,3,270,135,0,2081,2084,3,278,139,0,2082,2084,3,280,140,
        0,2083,2075,1,0,0,0,2083,2076,1,0,0,0,2083,2077,1,0,0,0,2083,2078,
        1,0,0,0,2083,2079,1,0,0,0,2083,2080,1,0,0,0,2083,2081,1,0,0,0,2083,
        2082,1,0,0,0,2084,261,1,0,0,0,2085,2093,5,119,0,0,2086,2093,5,120,
        0,0,2087,2093,5,121,0,0,2088,2093,3,264,132,0,2089,2093,3,266,133,
        0,2090,2093,5,148,0,0,2091,2093,5,149,0,0,2092,2085,1,0,0,0,2092,
        2086,1,0,0,0,2092,2087,1,0,0,0,2092,2088,1,0,0,0,2092,2089,1,0,0,
        0,2092,2090,1,0,0,0,2092,2091,1,0,0,0,2093,263,1,0,0,0,2094,2095,
        7,8,0,0,2095,265,1,0,0,0,2096,2097,5,146,0,0,2097,267,1,0,0,0,2098,
        2099,5,122,0,0,2099,269,1,0,0,0,2100,2103,5,123,0,0,2101,2102,5,
        124,0,0,2102,2104,3,374,187,0,2103,2101,1,0,0,0,2103,2104,1,0,0,
        0,2104,2105,1,0,0,0,2105,2106,5,28,0,0,2106,2107,3,218,109,0,2107,
        2108,5,29,0,0,2108,271,1,0,0,0,2109,2112,5,125,0,0,2110,2111,5,124,
        0,0,2111,2113,3,374,187,0,2112,2110,1,0,0,0,2112,2113,1,0,0,0,2113,
        2114,1,0,0,0,2114,2115,5,28,0,0,2115,2116,3,218,109,0,2116,2117,
        5,29,0,0,2117,273,1,0,0,0,2118,2119,5,126,0,0,2119,2120,5,28,0,0,
        2120,2121,3,218,109,0,2121,2122,5,29,0,0,2122,275,1,0,0,0,2123,2126,
        5,127,0,0,2124,2125,5,124,0,0,2125,2127,3,374,187,0,2126,2124,1,
        0,0,0,2126,2127,1,0,0,0,2127,2128,1,0,0,0,2128,2129,5,28,0,0,2129,
        2134,3,152,76,0,2130,2131,5,15,0,0,2131,2133,3,152,76,0,2132,2130,
        1,0,0,0,2133,2136,1,0,0,0,2134,2132,1,0,0,0,2134,2135,1,0,0,0,2135,
        2137,1,0,0,0,2136,2134,1,0,0,0,2137,2138,5,29,0,0,2138,277,1,0,0,
        0,2139,2140,5,43,0,0,2140,2141,3,218,109,0,2141,2142,5,43,0,0,2142,
        279,1,0,0,0,2143,2145,5,28,0,0,2144,2146,3,282,141,0,2145,2144,1,
        0,0,0,2145,2146,1,0,0,0,2146,2147,1,0,0,0,2147,2148,5,29,0,0,2148,
        281,1,0,0,0,2149,2151,5,3,0,0,2150,2149,1,0,0,0,2150,2151,1,0,0,
        0,2151,2152,1,0,0,0,2152,2160,3,256,128,0,2153,2155,5,15,0,0,2154,
        2156,5,3,0,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,2157,1,0,0,
        0,2157,2159,3,256,128,0,2158,2153,1,0,0,0,2159,2162,1,0,0,0,2160,
        2158,1,0,0,0,2160,2161,1,0,0,0,2161,283,1,0,0,0,2162,2160,1,0,0,
        0,2163,2165,5,103,0,0,2164,2166,3,340,170,0,2165,2164,1,0,0,0,2165,
        2166,1,0,0,0,2166,2167,1,0,0,0,2167,2179,5,104,0,0,2168,2170,5,38,
        0,0,2169,2171,3,42,21,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,
        2172,1,0,0,0,2172,2173,5,28,0,0,2173,2174,3,218,109,0,2174,2175,
        5,15,0,0,2175,2176,3,218,109,0,2176,2177,5,29,0,0,2177,2179,1,0,
        0,0,2178,2163,1,0,0,0,2178,2168,1,0,0,0,2179,285,1,0,0,0,2180,2182,
        7,9,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2183,1,0,0,0,2183,
        2185,5,8,0,0,2184,2186,3,340,170,0,2185,2184,1,0,0,0,2185,2186,1,
        0,0,0,2186,2187,1,0,0,0,2187,2194,5,9,0,0,2188,2189,5,37,0,0,2189,
        2190,5,28,0,0,2190,2191,3,218,109,0,2191,2192,5,29,0,0,2192,2194,
        1,0,0,0,2193,2181,1,0,0,0,2193,2188,1,0,0,0,2194,287,1,0,0,0,2195,
        2196,7,10,0,0,2196,2197,5,103,0,0,2197,2198,3,290,145,0,2198,2199,
        5,104,0,0,2199,289,1,0,0,0,2200,2201,3,218,109,0,2201,2202,5,60,
        0,0,2202,2210,3,218,109,0,2203,2204,5,15,0,0,2204,2205,3,218,109,
        0,2205,2206,5,60,0,0,2206,2207,3,218,109,0,2207,2209,1,0,0,0,2208,
        2203,1,0,0,0,2209,2212,1,0,0,0,2210,2208,1,0,0,0,2210,2211,1,0,0,
        0,2211,291,1,0,0,0,2212,2210,1,0,0,0,2213,2223,3,294,147,0,2214,
        2223,3,296,148,0,2215,2223,3,308,154,0,2216,2223,3,310,155,0,2217,
        2218,3,314,157,0,2218,2219,3,218,109,0,2219,2223,1,0,0,0,2220,2223,
        3,316,158,0,2221,2223,3,312,156,0,2222,2213,1,0,0,0,2222,2214,1,
        0,0,0,2222,2215,1,0,0,0,2222,2216,1,0,0,0,2222,2217,1,0,0,0,2222,
        2220,1,0,0,0,2222,2221,1,0,0,0,2223,293,1,0,0,0,2224,2227,5,88,0,
        0,2225,2228,3,178,89,0,2226,2228,3,218,109,0,2227,2225,1,0,0,0,2227,
        2226,1,0,0,0,2228,2229,1,0,0,0,2229,2230,5,128,0,0,2230,2231,3,218,
        109,0,2231,2232,5,89,0,0,2232,2233,3,218,109,0,2233,295,1,0,0,0,
        2234,2235,5,96,0,0,2235,2250,3,218,109,0,2236,2240,5,8,0,0,2237,
        2239,3,298,149,0,2238,2237,1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,
        0,0,0,2240,2241,1,0,0,0,2241,2243,1,0,0,0,2242,2240,1,0,0,0,2243,
        2251,5,9,0,0,2244,2246,3,298,149,0,2245,2244,1,0,0,0,2246,2249,1,
        0,0,0,2247,2245,1,0,0,0,2247,2248,1,0,0,0,2248,2251,1,0,0,0,2249,
        2247,1,0,0,0,2250,2236,1,0,0,0,2250,2247,1,0,0,0,2251,297,1,0,0,
        0,2252,2256,5,90,0,0,2253,2255,3,400,200,0,2254,2253,1,0,0,0,2255,
        2258,1,0,0,0,2256,2254,1,0,0,0,2256,2257,1,0,0,0,2257,2259,1,0,0,
        0,2258,2256,1,0,0,0,2259,2260,3,304,152,0,2260,2261,5,91,0,0,2261,
        2262,3,218,109,0,2262,299,1,0,0,0,2263,2280,3,394,197,0,2264,2266,
        5,141,0,0,2265,2264,1,0,0,0,2265,2266,1,0,0,0,2266,2267,1,0,0,0,
        2267,2276,5,28,0,0,2268,2273,3,300,150,0,2269,2270,5,15,0,0,2270,
        2272,3,300,150,0,2271,2269,1,0,0,0,2272,2275,1,0,0,0,2273,2271,1,
        0,0,0,2273,2274,1,0,0,0,2274,2277,1,0,0,0,2275,2273,1,0,0,0,2276,
        2268,1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,0,2278,2280,5,29,
        0,0,2279,2263,1,0,0,0,2279,2265,1,0,0,0,2280,301,1,0,0,0,2281,2299,
        3,306,153,0,2282,2299,3,394,197,0,2283,2285,5,141,0,0,2284,2283,
        1,0,0,0,2284,2285,1,0,0,0,2285,2286,1,0,0,0,2286,2295,5,28,0,0,2287,
        2292,3,302,151,0,2288,2289,5,15,0,0,2289,2291,3,302,151,0,2290,2288,
        1,0,0,0,2291,2294,1,0,0,0,2292,2290,1,0,0,0,2292,2293,1,0,0,0,2293,
        2296,1,0,0,0,2294,2292,1,0,0,0,2295,2287,1,0,0,0,2295,2296,1,0,0,
        0,2296,2297,1,0,0,0,2297,2299,5,29,0,0,2298,2281,1,0,0,0,2298,2282,
        1,0,0,0,2298,2284,1,0,0,0,2299,303,1,0,0,0,2300,2302,5,43,0,0,2301,
        2300,1,0,0,0,2301,2302,1,0,0,0,2302,2303,1,0,0,0,2303,2308,3,302,
        151,0,2304,2305,5,43,0,0,2305,2307,3,302,151,0,2306,2304,1,0,0,0,
        2307,2310,1,0,0,0,2308,2306,1,0,0,0,2308,2309,1,0,0,0,2309,305,1,
        0,0,0,2310,2308,1,0,0,0,2311,2314,5,118,0,0,2312,2315,3,264,132,
        0,2313,2315,3,266,133,0,2314,2312,1,0,0,0,2314,2313,1,0,0,0,2315,
        2318,1,0,0,0,2316,2318,3,262,131,0,2317,2311,1,0,0,0,2317,2316,1,
        0,0,0,2318,307,1,0,0,0,2319,2320,7,11,0,0,2320,2321,3,342,171,0,
        2321,2322,5,130,0,0,2322,2323,3,218,109,0,2323,309,1,0,0,0,2324,
        2326,7,12,0,0,2325,2324,1,0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,
        0,0,2327,2330,3,342,171,0,2328,2329,5,130,0,0,2329,2331,3,218,109,
        0,2330,2328,1,0,0,0,2330,2331,1,0,0,0,2331,311,1,0,0,0,2332,2333,
        7,10,0,0,2333,2334,3,342,171,0,2334,2335,5,130,0,0,2335,2338,3,218,
        109,0,2336,2337,5,60,0,0,2337,2339,3,218,109,0,2338,2336,1,0,0,0,
        2338,2339,1,0,0,0,2339,313,1,0,0,0,2340,2346,3,194,97,0,2341,2346,
        3,196,98,0,2342,2346,3,198,99,0,2343,2346,3,202,101,0,2344,2346,
        3,208,104,0,2345,2340,1,0,0,0,2345,2341,1,0,0,0,2345,2342,1,0,0,
        0,2345,2343,1,0,0,0,2345,2344,1,0,0,0,2346,315,1,0,0,0,2347,2349,
        5,3,0,0,2348,2347,1,0,0,0,2348,2349,1,0,0,0,2349,2350,1,0,0,0,2350,
        2351,5,58,0,0,2351,2356,3,300,150,0,2352,2353,5,15,0,0,2353,2355,
        3,300,150,0,2354,2352,1,0,0,0,2355,2358,1,0,0,0,2356,2354,1,0,0,
        0,2356,2357,1,0,0,0,2357,2368,1,0,0,0,2358,2356,1,0,0,0,2359,2369,
        5,60,0,0,2360,2369,5,85,0,0,2361,2363,3,400,200,0,2362,2361,1,0,
        0,0,2363,2366,1,0,0,0,2364,2362,1,0,0,0,2364,2365,1,0,0,0,2365,2367,
        1,0,0,0,2366,2364,1,0,0,0,2367,2369,5,83,0,0,2368,2359,1,0,0,0,2368,
        2360,1,0,0,0,2368,2364,1,0,0,0,2369,2370,1,0,0,0,2370,2375,3,218,
        109,0,2371,2372,5,15,0,0,2372,2374,3,218,109,0,2373,2371,1,0,0,0,
        2374,2377,1,0,0,0,2375,2373,1,0,0,0,2375,2376,1,0,0,0,2376,2381,
        1,0,0,0,2377,2375,1,0,0,0,2378,2379,5,85,0,0,2379,2381,3,218,109,
        0,2380,2348,1,0,0,0,2380,2378,1,0,0,0,2381,2382,1,0,0,0,2382,2383,
        5,139,0,0,2383,2384,3,218,109,0,2384,317,1,0,0,0,2385,2388,5,141,
        0,0,2386,2389,3,42,21,0,2387,2389,3,320,160,0,2388,2386,1,0,0,0,
        2388,2387,1,0,0,0,2388,2389,1,0,0,0,2389,319,1,0,0,0,2390,2392,5,
        102,0,0,2391,2393,3,42,21,0,2392,2391,1,0,0,0,2392,2393,1,0,0,0,
        2393,2394,1,0,0,0,2394,2395,5,103,0,0,2395,2396,3,218,109,0,2396,
        2397,5,104,0,0,2397,2399,5,28,0,0,2398,2400,3,254,127,0,2399,2398,
        1,0,0,0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,2401,2402,5,29,0,0,2402,
        321,1,0,0,0,2403,2411,3,324,162,0,2404,2411,3,326,163,0,2405,2411,
        3,330,165,0,2406,2411,3,332,166,0,2407,2411,3,334,167,0,2408,2411,
        3,336,168,0,2409,2411,3,338,169,0,2410,2403,1,0,0,0,2410,2404,1,
        0,0,0,2410,2405,1,0,0,0,2410,2406,1,0,0,0,2410,2407,1,0,0,0,2410,
        2408,1,0,0,0,2410,2409,1,0,0,0,2411,323,1,0,0,0,2412,2413,5,20,0,
        0,2413,2416,3,348,174,0,2414,2417,3,42,21,0,2415,2417,3,320,160,
        0,2416,2414,1,0,0,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,325,
        1,0,0,0,2418,2419,5,20,0,0,2419,2420,5,28,0,0,2420,2425,3,328,164,
        0,2421,2422,5,15,0,0,2422,2424,3,328,164,0,2423,2421,1,0,0,0,2424,
        2427,1,0,0,0,2425,2423,1,0,0,0,2425,2426,1,0,0,0,2426,2428,1,0,0,
        0,2427,2425,1,0,0,0,2428,2429,5,29,0,0,2429,327,1,0,0,0,2430,2431,
        7,13,0,0,2431,2432,5,60,0,0,2432,2433,3,218,109,0,2433,329,1,0,0,
        0,2434,2436,5,103,0,0,2435,2437,3,218,109,0,2436,2435,1,0,0,0,2436,
        2437,1,0,0,0,2437,2438,1,0,0,0,2438,2440,5,131,0,0,2439,2441,3,218,
        109,0,2440,2439,1,0,0,0,2440,2441,1,0,0,0,2441,2442,1,0,0,0,2442,
        2443,5,104,0,0,2443,331,1,0,0,0,2444,2445,5,103,0,0,2445,2446,3,
        218,109,0,2446,2458,5,13,0,0,2447,2452,3,218,109,0,2448,2449,5,13,
        0,0,2449,2451,3,218,109,0,2450,2448,1,0,0,0,2451,2454,1,0,0,0,2452,
        2450,1,0,0,0,2452,2453,1,0,0,0,2453,2456,1,0,0,0,2454,2452,1,0,0,
        0,2455,2457,5,13,0,0,2456,2455,1,0,0,0,2456,2457,1,0,0,0,2457,2459,
        1,0,0,0,2458,2447,1,0,0,0,2458,2459,1,0,0,0,2459,2460,1,0,0,0,2460,
        2461,5,104,0,0,2461,333,1,0,0,0,2462,2463,5,103,0,0,2463,2464,3,
        218,109,0,2464,2465,5,60,0,0,2465,2466,3,218,109,0,2466,2467,5,104,
        0,0,2467,335,1,0,0,0,2468,2469,5,103,0,0,2469,2474,3,218,109,0,2470,
        2471,5,15,0,0,2471,2473,3,218,109,0,2472,2470,1,0,0,0,2473,2476,
        1,0,0,0,2474,2472,1,0,0,0,2474,2475,1,0,0,0,2475,2477,1,0,0,0,2476,
        2474,1,0,0,0,2477,2478,5,104,0,0,2478,337,1,0,0,0,2479,2480,5,28,
        0,0,2480,2481,3,340,170,0,2481,2482,5,29,0,0,2482,339,1,0,0,0,2483,
        2488,3,218,109,0,2484,2485,5,15,0,0,2485,2487,3,218,109,0,2486,2484,
        1,0,0,0,2487,2490,1,0,0,0,2488,2486,1,0,0,0,2488,2489,1,0,0,0,2489,
        341,1,0,0,0,2490,2488,1,0,0,0,2491,2496,3,344,172,0,2492,2493,5,
        15,0,0,2493,2495,3,344,172,0,2494,2492,1,0,0,0,2495,2498,1,0,0,0,
        2496,2494,1,0,0,0,2496,2497,1,0,0,0,2497,343,1,0,0,0,2498,2496,1,
        0,0,0,2499,2502,3,394,197,0,2500,2501,5,132,0,0,2501,2503,3,218,
        109,0,2502,2500,1,0,0,0,2502,2503,1,0,0,0,2503,2507,1,0,0,0,2504,
        2506,3,400,200,0,2505,2504,1,0,0,0,2506,2509,1,0,0,0,2507,2505,1,
        0,0,0,2507,2508,1,0,0,0,2508,2512,1,0,0,0,2509,2507,1,0,0,0,2510,
        2511,5,43,0,0,2511,2513,3,218,109,0,2512,2510,1,0,0,0,2512,2513,
        1,0,0,0,2513,345,1,0,0,0,2514,2515,5,141,0,0,2515,347,1,0,0,0,2516,
        2517,7,14,0,0,2517,349,1,0,0,0,2518,2519,5,141,0,0,2519,351,1,0,
        0,0,2520,2523,3,350,175,0,2521,2523,5,133,0,0,2522,2520,1,0,0,0,
        2522,2521,1,0,0,0,2523,353,1,0,0,0,2524,2525,7,13,0,0,2525,355,1,
        0,0,0,2526,2529,3,350,175,0,2527,2529,5,144,0,0,2528,2526,1,0,0,
        0,2528,2527,1,0,0,0,2529,357,1,0,0,0,2530,2531,3,350,175,0,2531,
        359,1,0,0,0,2532,2533,3,350,175,0,2533,361,1,0,0,0,2534,2535,3,350,
        175,0,2535,363,1,0,0,0,2536,2537,3,356,178,0,2537,365,1,0,0,0,2538,
        2539,3,350,175,0,2539,367,1,0,0,0,2540,2541,3,350,175,0,2541,369,
        1,0,0,0,2542,2543,3,350,175,0,2543,371,1,0,0,0,2544,2545,3,356,178,
        0,2545,373,1,0,0,0,2546,2547,3,356,178,0,2547,375,1,0,0,0,2548,2549,
        3,350,175,0,2549,377,1,0,0,0,2550,2551,3,356,178,0,2551,379,1,0,
        0,0,2552,2553,3,356,178,0,2553,381,1,0,0,0,2554,2559,3,358,179,0,
        2555,2556,5,20,0,0,2556,2558,3,358,179,0,2557,2555,1,0,0,0,2558,
        2561,1,0,0,0,2559,2557,1,0,0,0,2559,2560,1,0,0,0,2560,383,1,0,0,
        0,2561,2559,1,0,0,0,2562,2563,3,352,176,0,2563,2564,5,13,0,0,2564,
        2565,3,22,11,0,2565,385,1,0,0,0,2566,2567,3,356,178,0,2567,2568,
        5,13,0,0,2568,2569,3,22,11,0,2569,387,1,0,0,0,2570,2573,3,356,178,
        0,2571,2572,5,13,0,0,2572,2574,3,22,11,0,2573,2571,1,0,0,0,2573,
        2574,1,0,0,0,2574,389,1,0,0,0,2575,2577,7,15,0,0,2576,2575,1,0,0,
        0,2577,2580,1,0,0,0,2578,2576,1,0,0,0,2578,2579,1,0,0,0,2579,2581,
        1,0,0,0,2580,2578,1,0,0,0,2581,2584,3,384,192,0,2582,2583,5,60,0,
        0,2583,2585,3,218,109,0,2584,2582,1,0,0,0,2584,2585,1,0,0,0,2585,
        391,1,0,0,0,2586,2589,3,352,176,0,2587,2588,5,13,0,0,2588,2590,3,
        22,11,0,2589,2587,1,0,0,0,2589,2590,1,0,0,0,2590,393,1,0,0,0,2591,
        2594,3,352,176,0,2592,2593,5,13,0,0,2593,2595,3,22,11,0,2594,2592,
        1,0,0,0,2594,2595,1,0,0,0,2595,395,1,0,0,0,2596,2598,3,400,200,0,
        2597,2596,1,0,0,0,2598,2601,1,0,0,0,2599,2597,1,0,0,0,2599,2600,
        1,0,0,0,2600,2605,1,0,0,0,2601,2599,1,0,0,0,2602,2604,7,16,0,0,2603,
        2602,1,0,0,0,2604,2607,1,0,0,0,2605,2603,1,0,0,0,2605,2606,1,0,0,
        0,2606,2611,1,0,0,0,2607,2605,1,0,0,0,2608,2609,3,356,178,0,2609,
        2610,5,13,0,0,2610,2612,1,0,0,0,2611,2608,1,0,0,0,2611,2612,1,0,
        0,0,2612,2613,1,0,0,0,2613,2616,3,22,11,0,2614,2615,5,60,0,0,2615,
        2617,3,218,109,0,2616,2614,1,0,0,0,2616,2617,1,0,0,0,2617,397,1,
        0,0,0,2618,2619,5,28,0,0,2619,2624,3,396,198,0,2620,2621,5,15,0,
        0,2621,2623,3,396,198,0,2622,2620,1,0,0,0,2623,2626,1,0,0,0,2624,
        2622,1,0,0,0,2624,2625,1,0,0,0,2625,2627,1,0,0,0,2626,2624,1,0,0,
        0,2627,2628,5,29,0,0,2628,399,1,0,0,0,2629,2630,5,136,0,0,2630,2632,
        3,376,188,0,2631,2633,3,340,170,0,2632,2631,1,0,0,0,2632,2633,1,
        0,0,0,2633,2634,1,0,0,0,2634,2635,5,9,0,0,2635,401,1,0,0,0,341,405,
        411,428,435,441,447,453,460,471,476,485,490,494,497,505,514,518,
        526,530,532,537,541,560,567,572,592,599,605,610,616,621,632,642,
        646,650,654,658,671,679,686,690,699,706,710,713,719,725,734,739,
        752,760,766,778,781,784,790,795,803,807,813,819,823,832,838,843,
        851,855,861,867,871,880,886,891,896,899,903,917,923,928,932,935,
        942,946,951,956,962,970,977,982,986,992,996,1000,1004,1015,1018,
        1021,1026,1032,1040,1046,1049,1054,1058,1063,1067,1074,1079,1090,
        1096,1100,1106,1109,1118,1122,1125,1128,1138,1140,1148,1154,1156,
        1163,1165,1171,1173,1179,1183,1187,1189,1195,1197,1204,1210,1214,
        1220,1229,1239,1244,1250,1258,1265,1274,1282,1287,1291,1294,1305,
        1329,1342,1350,1355,1361,1372,1375,1385,1388,1396,1404,1413,1418,
        1421,1425,1432,1435,1439,1446,1452,1458,1466,1472,1481,1486,1493,
        1499,1504,1507,1514,1518,1522,1527,1535,1541,1548,1555,1561,1571,
        1577,1579,1581,1586,1593,1597,1602,1608,1619,1621,1630,1635,1643,
        1650,1653,1661,1668,1674,1680,1686,1696,1702,1712,1723,1731,1735,
        1740,1744,1750,1758,1767,1771,1779,1785,1793,1795,1804,1814,1819,
        1826,1838,1841,1846,1849,1856,1865,1874,1882,1891,1898,1906,1914,
        1922,1930,1938,1944,1952,1959,1966,1974,1977,1986,1989,1992,2002,
        2010,2013,2022,2025,2029,2033,2042,2045,2052,2058,2066,2070,2073,
        2083,2092,2103,2112,2126,2134,2145,2150,2155,2160,2165,2170,2178,
        2181,2185,2193,2210,2222,2227,2240,2247,2250,2256,2265,2273,2276,
        2279,2284,2292,2295,2298,2301,2308,2314,2317,2325,2330,2338,2345,
        2348,2356,2364,2368,2375,2380,2388,2392,2399,2410,2416,2425,2436,
        2440,2452,2456,2458,2474,2488,2496,2502,2507,2512,2522,2528,2559,
        2573,2578,2584,2589,2594,2599,2605,2611,2616,2624,2632
    ]

class dafnyParser ( Parser ):

    grammarFileName = "dafny.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'include'", "'abstract'", "'ghost'", 
                     "'static'", "'opaque'", "'module'", "'refines'", "'{'", 
                     "'}'", "'import'", "'opened'", "'='", "':'", "'`'", 
                     "','", "'export'", "'extends'", "'provides'", "'reveals'", 
                     "'.'", "'bool'", "'int'", "'real'", "'ORDINAL'", "'char'", 
                     "'<'", "'>'", "'('", "')'", "'=='", "'0'", "'00'", 
                     "'!'", "'new'", "'set'", "'iset'", "'multiset'", "'seq'", 
                     "'string'", "'map'", "'imap'", "'type'", "'|'", "'witness'", 
                     "'nat'", "'newtype'", "'class'", "'trait'", "'object'", 
                     "'object?'", "'iterator'", "'yields'", "'~>'", "'-->'", 
                     "'->'", "'datatype'", "'codatatype'", "'var'", "'const'", 
                     "':='", "'method'", "'constructor'", "'lemma'", "'twostate'", 
                     "'least'", "'greatest'", "'returns'", "'function'", 
                     "'predicate'", "'{:opaque}'", "'by'", "'requires'", 
                     "'yield'", "'ensures'", "'decreases'", "'modifies'", 
                     "'invariant'", "'reads'", "'label'", "'break'", "'continue'", 
                     "'return'", "':|'", "'assume'", "':-'", "'expect'", 
                     "'assert'", "'if'", "'else'", "'case'", "'=>'", "'while'", 
                     "'for'", "'to'", "'downto'", "'match'", "'print'", 
                     "'reveal'", "'forall'", "'modify'", "'calc'", "'#'", 
                     "'['", "']'", "'!='", "'<='", "'>='", "'<==>'", "'==>'", 
                     "'<=='", "'&&'", "'||'", "'in'", "'!in'", "'!!'", "'as'", 
                     "'is'", "'-'", "'false'", "'true'", "'null'", "'this'", 
                     "'old'", "'@'", "'fresh'", "'allocated'", "'unchanged'", 
                     "'then'", "'exists'", "'::'", "'..'", "'<-'", "'_'", 
                     "'nameonly'", "'older'", "'{:'", "<INVALID>", "<INVALID>", 
                     "';'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'...'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'*'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WHITESPACE", "COMMENT", "SEMICOLON", 
                      "RESERVED_WORDS", "IDENT", "ARRAY_TOKEN", "BV_TOKEN", 
                      "DIGITS", "HEXDIGITS", "DECIMALDIGITS", "ESCAPEDCHAR", 
                      "CHARTOKEN", "STRINGTOKEN", "ELLIPSIS", "Variance", 
                      "KType", "ShiftOp", "AddOp", "MulOp", "BVOp", "HavocRhs_" ]

    RULE_program = 0
    RULE_includeDirective_ = 1
    RULE_topDecl = 2
    RULE_declModifier = 3
    RULE_subModuleDecl = 4
    RULE_moduleDefinition = 5
    RULE_moduleImport = 6
    RULE_qualifiedModuleExport = 7
    RULE_moduleExportSuffix = 8
    RULE_moduleExport = 9
    RULE_exportSignature = 10
    RULE_type = 11
    RULE_domainType_ = 12
    RULE_namedType = 13
    RULE_nameSegmentForTypeName = 14
    RULE_boolType_ = 15
    RULE_intType_ = 16
    RULE_realType_ = 17
    RULE_bitVectorType_ = 18
    RULE_ordinalType_ = 19
    RULE_charType_ = 20
    RULE_genericInstantiation = 21
    RULE_genericParameters = 22
    RULE_typeParameterCharacteristics = 23
    RULE_tPCharOption = 24
    RULE_finiteSetType_ = 25
    RULE_infiniteSetType_ = 26
    RULE_multisetType_ = 27
    RULE_sequenceType_ = 28
    RULE_stringType_ = 29
    RULE_finiteMapType_ = 30
    RULE_infiniteMapType_ = 31
    RULE_synonymTypeDecl = 32
    RULE_synonymTypeName = 33
    RULE_synonymTypeDecl_ = 34
    RULE_opaqueTypeDecl_ = 35
    RULE_typeMembers = 36
    RULE_subsetTypeDecl_ = 37
    RULE_natType_ = 38
    RULE_newtypeDecl = 39
    RULE_classDecl = 40
    RULE_classMemberDecl = 41
    RULE_traitDecl = 42
    RULE_objectType_ = 43
    RULE_arrayType_ = 44
    RULE_iteratorDecl = 45
    RULE_arrowType_ = 46
    RULE_datatypeDecl = 47
    RULE_datatypeMemberDecl = 48
    RULE_fieldDecl = 49
    RULE_constantFieldDecl = 50
    RULE_methodDecl = 51
    RULE_methodKeyword_ = 52
    RULE_methodSignature_ = 53
    RULE_formals = 54
    RULE_functionDecl = 55
    RULE_opaqueAttribute = 56
    RULE_functionSignatureOrEllipsis_ = 57
    RULE_functionSignature_ = 58
    RULE_predicateSignatureOrEllipsis_ = 59
    RULE_predicateSignature_ = 60
    RULE_functionBody = 61
    RULE_methodSpec = 62
    RULE_functionSpec = 63
    RULE_lambdaSpec = 64
    RULE_iteratorSpec = 65
    RULE_loopSpec = 66
    RULE_requiresClause = 67
    RULE_ensuresClause = 68
    RULE_decreasesClause = 69
    RULE_decreasesList = 70
    RULE_possiblyWildExpression = 71
    RULE_modifiesClause = 72
    RULE_invariantClause_ = 73
    RULE_readsClause = 74
    RULE_possiblyWildFrameExpression = 75
    RULE_frameExpression = 76
    RULE_frameField = 77
    RULE_stmt = 78
    RULE_nonLabeledStmt = 79
    RULE_breakStmt = 80
    RULE_blockStmt = 81
    RULE_returnStmt = 82
    RULE_yieldStmt = 83
    RULE_updateStmt = 84
    RULE_updateFailureStmt = 85
    RULE_varDeclStatement = 86
    RULE_casePatternLocal = 87
    RULE_guard = 88
    RULE_bindingGuard = 89
    RULE_ifStmt = 90
    RULE_alternativeBlock = 91
    RULE_alternativeBlockCase = 92
    RULE_whileStmt = 93
    RULE_forLoopStmt = 94
    RULE_matchStmt = 95
    RULE_caseStmt = 96
    RULE_assertStmt = 97
    RULE_assumeStmt = 98
    RULE_expectStmt = 99
    RULE_printStmt = 100
    RULE_revealStmt = 101
    RULE_forallStmt = 102
    RULE_modifyStmt = 103
    RULE_calcStmt = 104
    RULE_calcBody_ = 105
    RULE_calcLine_ = 106
    RULE_hints_ = 107
    RULE_calcOp = 108
    RULE_expression = 109
    RULE_equivExpression = 110
    RULE_impliesExpliesExpression = 111
    RULE_impliesExpression = 112
    RULE_logicalExpression = 113
    RULE_relationalExpression = 114
    RULE_relOp = 115
    RULE_shiftTerm = 116
    RULE_term = 117
    RULE_factor = 118
    RULE_bitvectorFactor = 119
    RULE_asExpression = 120
    RULE_unaryExpression = 121
    RULE_primaryExpression = 122
    RULE_lambdaExpression = 123
    RULE_lhs = 124
    RULE_rhs = 125
    RULE_arrayAllocation_ = 126
    RULE_actualBindings = 127
    RULE_actualBinding = 128
    RULE_objectAllocation_ = 129
    RULE_constAtomExpression = 130
    RULE_literalExpression = 131
    RULE_nat = 132
    RULE_dec = 133
    RULE_thisExpression_ = 134
    RULE_oldExpression_ = 135
    RULE_freshExpression_ = 136
    RULE_allocatedExpression_ = 137
    RULE_unchangedExpression_ = 138
    RULE_cardinalityExpression_ = 139
    RULE_parensExpression = 140
    RULE_tupleArgs = 141
    RULE_seqDisplayExpr = 142
    RULE_setDisplayExpr = 143
    RULE_mapDisplayExpr = 144
    RULE_mapLiteralExpressions = 145
    RULE_endlessExpression = 146
    RULE_ifExpression = 147
    RULE_matchExpression = 148
    RULE_caseExpression = 149
    RULE_casePattern = 150
    RULE_singleExtendedPattern = 151
    RULE_extendedPattern = 152
    RULE_possiblyNegatedLiteralExpression = 153
    RULE_quantifierExpression = 154
    RULE_setComprehensionExpr = 155
    RULE_mapComprehensionExpr = 156
    RULE_stmtInExpr = 157
    RULE_letExpression = 158
    RULE_nameSegment = 159
    RULE_hashCall = 160
    RULE_suffix = 161
    RULE_augmentedDotSuffix_ = 162
    RULE_datatypeUpdateSuffix_ = 163
    RULE_memberBindingUpdate = 164
    RULE_subsequenceSuffix_ = 165
    RULE_slicesByLengthSuffix_ = 166
    RULE_sequenceUpdateSuffix_ = 167
    RULE_selectionSuffix_ = 168
    RULE_argumentListSuffix_ = 169
    RULE_expressions = 170
    RULE_quantifierDomain = 171
    RULE_quantifierVarDecl = 172
    RULE_ident = 173
    RULE_dotSuffix = 174
    RULE_noUSIdent = 175
    RULE_wildIdent = 176
    RULE_identOrDigits = 177
    RULE_noUSIdentOrDigits = 178
    RULE_moduleName = 179
    RULE_className = 180
    RULE_datatypeName = 181
    RULE_datatypeMemberName = 182
    RULE_newtypeName = 183
    RULE_iteratorName = 184
    RULE_typeVariableName = 185
    RULE_methodFunctionName = 186
    RULE_labelName = 187
    RULE_attributeName = 188
    RULE_exportId = 189
    RULE_typeNameOrCtorSuffix = 190
    RULE_moduleQualifiedName = 191
    RULE_identType = 192
    RULE_fIdentType = 193
    RULE_cIdentType = 194
    RULE_gIdentType = 195
    RULE_localIdentTypeOptional = 196
    RULE_identTypeOptional = 197
    RULE_typeIdentOptional = 198
    RULE_formalsOptionalIds = 199
    RULE_attribute = 200

    ruleNames =  [ "program", "includeDirective_", "topDecl", "declModifier", 
                   "subModuleDecl", "moduleDefinition", "moduleImport", 
                   "qualifiedModuleExport", "moduleExportSuffix", "moduleExport", 
                   "exportSignature", "type", "domainType_", "namedType", 
                   "nameSegmentForTypeName", "boolType_", "intType_", "realType_", 
                   "bitVectorType_", "ordinalType_", "charType_", "genericInstantiation", 
                   "genericParameters", "typeParameterCharacteristics", 
                   "tPCharOption", "finiteSetType_", "infiniteSetType_", 
                   "multisetType_", "sequenceType_", "stringType_", "finiteMapType_", 
                   "infiniteMapType_", "synonymTypeDecl", "synonymTypeName", 
                   "synonymTypeDecl_", "opaqueTypeDecl_", "typeMembers", 
                   "subsetTypeDecl_", "natType_", "newtypeDecl", "classDecl", 
                   "classMemberDecl", "traitDecl", "objectType_", "arrayType_", 
                   "iteratorDecl", "arrowType_", "datatypeDecl", "datatypeMemberDecl", 
                   "fieldDecl", "constantFieldDecl", "methodDecl", "methodKeyword_", 
                   "methodSignature_", "formals", "functionDecl", "opaqueAttribute", 
                   "functionSignatureOrEllipsis_", "functionSignature_", 
                   "predicateSignatureOrEllipsis_", "predicateSignature_", 
                   "functionBody", "methodSpec", "functionSpec", "lambdaSpec", 
                   "iteratorSpec", "loopSpec", "requiresClause", "ensuresClause", 
                   "decreasesClause", "decreasesList", "possiblyWildExpression", 
                   "modifiesClause", "invariantClause_", "readsClause", 
                   "possiblyWildFrameExpression", "frameExpression", "frameField", 
                   "stmt", "nonLabeledStmt", "breakStmt", "blockStmt", "returnStmt", 
                   "yieldStmt", "updateStmt", "updateFailureStmt", "varDeclStatement", 
                   "casePatternLocal", "guard", "bindingGuard", "ifStmt", 
                   "alternativeBlock", "alternativeBlockCase", "whileStmt", 
                   "forLoopStmt", "matchStmt", "caseStmt", "assertStmt", 
                   "assumeStmt", "expectStmt", "printStmt", "revealStmt", 
                   "forallStmt", "modifyStmt", "calcStmt", "calcBody_", 
                   "calcLine_", "hints_", "calcOp", "expression", "equivExpression", 
                   "impliesExpliesExpression", "impliesExpression", "logicalExpression", 
                   "relationalExpression", "relOp", "shiftTerm", "term", 
                   "factor", "bitvectorFactor", "asExpression", "unaryExpression", 
                   "primaryExpression", "lambdaExpression", "lhs", "rhs", 
                   "arrayAllocation_", "actualBindings", "actualBinding", 
                   "objectAllocation_", "constAtomExpression", "literalExpression", 
                   "nat", "dec", "thisExpression_", "oldExpression_", "freshExpression_", 
                   "allocatedExpression_", "unchangedExpression_", "cardinalityExpression_", 
                   "parensExpression", "tupleArgs", "seqDisplayExpr", "setDisplayExpr", 
                   "mapDisplayExpr", "mapLiteralExpressions", "endlessExpression", 
                   "ifExpression", "matchExpression", "caseExpression", 
                   "casePattern", "singleExtendedPattern", "extendedPattern", 
                   "possiblyNegatedLiteralExpression", "quantifierExpression", 
                   "setComprehensionExpr", "mapComprehensionExpr", "stmtInExpr", 
                   "letExpression", "nameSegment", "hashCall", "suffix", 
                   "augmentedDotSuffix_", "datatypeUpdateSuffix_", "memberBindingUpdate", 
                   "subsequenceSuffix_", "slicesByLengthSuffix_", "sequenceUpdateSuffix_", 
                   "selectionSuffix_", "argumentListSuffix_", "expressions", 
                   "quantifierDomain", "quantifierVarDecl", "ident", "dotSuffix", 
                   "noUSIdent", "wildIdent", "identOrDigits", "noUSIdentOrDigits", 
                   "moduleName", "className", "datatypeName", "datatypeMemberName", 
                   "newtypeName", "iteratorName", "typeVariableName", "methodFunctionName", 
                   "labelName", "attributeName", "exportId", "typeNameOrCtorSuffix", 
                   "moduleQualifiedName", "identType", "fIdentType", "cIdentType", 
                   "gIdentType", "localIdentTypeOptional", "identTypeOptional", 
                   "typeIdentOptional", "formalsOptionalIds", "attribute" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    WHITESPACE=137
    COMMENT=138
    SEMICOLON=139
    RESERVED_WORDS=140
    IDENT=141
    ARRAY_TOKEN=142
    BV_TOKEN=143
    DIGITS=144
    HEXDIGITS=145
    DECIMALDIGITS=146
    ESCAPEDCHAR=147
    CHARTOKEN=148
    STRINGTOKEN=149
    ELLIPSIS=150
    Variance=151
    KType=152
    ShiftOp=153
    AddOp=154
    MulOp=155
    BVOp=156
    HavocRhs_=157

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(dafnyParser.EOF, 0)

        def includeDirective_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.IncludeDirective_Context)
            else:
                return self.getTypedRuleContext(dafnyParser.IncludeDirective_Context,i)


        def topDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TopDeclContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TopDeclContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = dafnyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 402
                self.includeDirective_()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1222230319575268228) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 55) != 0):
                self.state = 408
                self.topDecl()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            self.match(dafnyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeDirective_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGTOKEN(self):
            return self.getToken(dafnyParser.STRINGTOKEN, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_includeDirective_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeDirective_" ):
                listener.enterIncludeDirective_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeDirective_" ):
                listener.exitIncludeDirective_(self)




    def includeDirective_(self):

        localctx = dafnyParser.IncludeDirective_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_includeDirective_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(dafnyParser.T__0)
            self.state = 417
            self.match(dafnyParser.STRINGTOKEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declModifier(self):
            return self.getTypedRuleContext(dafnyParser.DeclModifierContext,0)


        def subModuleDecl(self):
            return self.getTypedRuleContext(dafnyParser.SubModuleDeclContext,0)


        def classDecl(self):
            return self.getTypedRuleContext(dafnyParser.ClassDeclContext,0)


        def datatypeDecl(self):
            return self.getTypedRuleContext(dafnyParser.DatatypeDeclContext,0)


        def newtypeDecl(self):
            return self.getTypedRuleContext(dafnyParser.NewtypeDeclContext,0)


        def synonymTypeDecl(self):
            return self.getTypedRuleContext(dafnyParser.SynonymTypeDeclContext,0)


        def iteratorDecl(self):
            return self.getTypedRuleContext(dafnyParser.IteratorDeclContext,0)


        def traitDecl(self):
            return self.getTypedRuleContext(dafnyParser.TraitDeclContext,0)


        def classMemberDecl(self):
            return self.getTypedRuleContext(dafnyParser.ClassMemberDeclContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_topDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopDecl" ):
                listener.enterTopDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopDecl" ):
                listener.exitTopDecl(self)




    def topDecl(self):

        localctx = dafnyParser.TopDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_topDecl)
        try:
            self.state = 428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.declModifier()
                pass
            elif token in [6, 10, 16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.subModuleDecl()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.classDecl()
                pass
            elif token in [56, 57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self.datatypeDecl()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 423
                self.newtypeDecl()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 6)
                self.state = 424
                self.synonymTypeDecl()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 7)
                self.state = 425
                self.iteratorDecl()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 8)
                self.state = 426
                self.traitDecl()
                pass
            elif token in [58, 59, 61, 62, 63, 64, 65, 66, 68, 69]:
                self.enterOuterAlt(localctx, 9)
                self.state = 427
                self.classMemberDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_declModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclModifier" ):
                listener.enterDeclModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclModifier" ):
                listener.exitDeclModifier(self)




    def declModifier(self):

        localctx = dafnyParser.DeclModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_declModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 60) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubModuleDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDefinition(self):
            return self.getTypedRuleContext(dafnyParser.ModuleDefinitionContext,0)


        def moduleImport(self):
            return self.getTypedRuleContext(dafnyParser.ModuleImportContext,0)


        def moduleExport(self):
            return self.getTypedRuleContext(dafnyParser.ModuleExportContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_subModuleDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubModuleDecl" ):
                listener.enterSubModuleDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubModuleDecl" ):
                listener.exitSubModuleDecl(self)




    def subModuleDecl(self):

        localctx = dafnyParser.SubModuleDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_subModuleDecl)
        try:
            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.moduleDefinition()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.moduleImport()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.moduleExport()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleQualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ModuleQualifiedNameContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ModuleQualifiedNameContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def topDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TopDeclContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TopDeclContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_moduleDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDefinition" ):
                listener.enterModuleDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDefinition" ):
                listener.exitModuleDefinition(self)




    def moduleDefinition(self):

        localctx = dafnyParser.ModuleDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(dafnyParser.T__5)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 438
                self.attribute()
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 444
            self.moduleQualifiedName()
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 445
                self.match(dafnyParser.T__6)
                self.state = 446
                self.moduleQualifiedName()


            self.state = 449
            self.match(dafnyParser.T__7)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1222230319575268228) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 55) != 0):
                self.state = 450
                self.topDecl()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 456
            self.match(dafnyParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleImportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedModuleExport(self):
            return self.getTypedRuleContext(dafnyParser.QualifiedModuleExportContext,0)


        def moduleName(self):
            return self.getTypedRuleContext(dafnyParser.ModuleNameContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_moduleImport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleImport" ):
                listener.enterModuleImport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleImport" ):
                listener.exitModuleImport(self)




    def moduleImport(self):

        localctx = dafnyParser.ModuleImportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleImport)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(dafnyParser.T__9)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 459
                self.match(dafnyParser.T__10)


            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 462
                self.qualifiedModuleExport()
                pass

            elif la_ == 2:
                self.state = 463
                self.moduleName()
                self.state = 464
                self.match(dafnyParser.T__11)
                self.state = 465
                self.qualifiedModuleExport()
                pass

            elif la_ == 3:
                self.state = 467
                self.moduleName()
                self.state = 468
                self.match(dafnyParser.T__12)
                self.state = 469
                self.qualifiedModuleExport()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedModuleExportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleQualifiedName(self):
            return self.getTypedRuleContext(dafnyParser.ModuleQualifiedNameContext,0)


        def moduleExportSuffix(self):
            return self.getTypedRuleContext(dafnyParser.ModuleExportSuffixContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_qualifiedModuleExport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedModuleExport" ):
                listener.enterQualifiedModuleExport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedModuleExport" ):
                listener.exitQualifiedModuleExport(self)




    def qualifiedModuleExport(self):

        localctx = dafnyParser.QualifiedModuleExportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_qualifiedModuleExport)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.moduleQualifiedName()
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 474
                self.match(dafnyParser.T__13)
                self.state = 475
                self.moduleExportSuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleExportSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exportId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExportIdContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExportIdContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_moduleExportSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleExportSuffix" ):
                listener.enterModuleExportSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleExportSuffix" ):
                listener.exitModuleExportSuffix(self)




    def moduleExportSuffix(self):

        localctx = dafnyParser.ModuleExportSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_moduleExportSuffix)
        self._la = 0 # Token type
        try:
            self.state = 490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141, 144]:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.exportId()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.match(dafnyParser.T__7)
                self.state = 480
                self.exportId()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 481
                    self.match(dafnyParser.T__14)
                    self.state = 482
                    self.exportId()
                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 488
                self.match(dafnyParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleExportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exportId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExportIdContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExportIdContext,i)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def exportSignature(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExportSignatureContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExportSignatureContext,i)


        def HavocRhs_(self):
            return self.getToken(dafnyParser.HavocRhs_, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_moduleExport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleExport" ):
                listener.enterModuleExport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleExport" ):
                listener.exitModuleExport(self)




    def moduleExport(self):

        localctx = dafnyParser.ModuleExportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_moduleExport)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(dafnyParser.T__15)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141 or _la==144:
                self.state = 493
                self.exportId()


            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 496
                self.match(dafnyParser.ELLIPSIS)


            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 499
                self.match(dafnyParser.T__16)
                self.state = 500
                self.exportId()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 501
                    self.match(dafnyParser.T__14)
                    self.state = 502
                    self.exportId()
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [18]:
                self.state = 508
                self.match(dafnyParser.T__17)
                self.state = 518
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [141, 144]:
                    self.state = 509
                    self.exportSignature()
                    self.state = 514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 510
                        self.match(dafnyParser.T__14)
                        self.state = 511
                        self.exportSignature()
                        self.state = 516
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [157]:
                    self.state = 517
                    self.match(dafnyParser.HavocRhs_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [19]:
                self.state = 520
                self.match(dafnyParser.T__18)
                self.state = 530
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [141, 144]:
                    self.state = 521
                    self.exportSignature()
                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 522
                        self.match(dafnyParser.T__14)
                        self.state = 523
                        self.exportSignature()
                        self.state = 528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [157]:
                    self.state = 529
                    self.match(dafnyParser.HavocRhs_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeNameOrCtorSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeNameOrCtorSuffixContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeNameOrCtorSuffixContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_exportSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportSignature" ):
                listener.enterExportSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportSignature" ):
                listener.exitExportSignature(self)




    def exportSignature(self):

        localctx = dafnyParser.ExportSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_exportSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.typeNameOrCtorSuffix()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 535
                self.match(dafnyParser.T__19)
                self.state = 536
                self.typeNameOrCtorSuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domainType_(self):
            return self.getTypedRuleContext(dafnyParser.DomainType_Context,0)


        def arrowType_(self):
            return self.getTypedRuleContext(dafnyParser.ArrowType_Context,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = dafnyParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_type)
        try:
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.domainType_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 540
                self.arrowType_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DomainType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolType_(self):
            return self.getTypedRuleContext(dafnyParser.BoolType_Context,0)


        def charType_(self):
            return self.getTypedRuleContext(dafnyParser.CharType_Context,0)


        def intType_(self):
            return self.getTypedRuleContext(dafnyParser.IntType_Context,0)


        def realType_(self):
            return self.getTypedRuleContext(dafnyParser.RealType_Context,0)


        def ordinalType_(self):
            return self.getTypedRuleContext(dafnyParser.OrdinalType_Context,0)


        def bitVectorType_(self):
            return self.getTypedRuleContext(dafnyParser.BitVectorType_Context,0)


        def objectType_(self):
            return self.getTypedRuleContext(dafnyParser.ObjectType_Context,0)


        def finiteSetType_(self):
            return self.getTypedRuleContext(dafnyParser.FiniteSetType_Context,0)


        def infiniteSetType_(self):
            return self.getTypedRuleContext(dafnyParser.InfiniteSetType_Context,0)


        def multisetType_(self):
            return self.getTypedRuleContext(dafnyParser.MultisetType_Context,0)


        def finiteMapType_(self):
            return self.getTypedRuleContext(dafnyParser.FiniteMapType_Context,0)


        def infiniteMapType_(self):
            return self.getTypedRuleContext(dafnyParser.InfiniteMapType_Context,0)


        def sequenceType_(self):
            return self.getTypedRuleContext(dafnyParser.SequenceType_Context,0)


        def natType_(self):
            return self.getTypedRuleContext(dafnyParser.NatType_Context,0)


        def stringType_(self):
            return self.getTypedRuleContext(dafnyParser.StringType_Context,0)


        def arrayType_(self):
            return self.getTypedRuleContext(dafnyParser.ArrayType_Context,0)


        def namedType(self):
            return self.getTypedRuleContext(dafnyParser.NamedTypeContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_domainType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomainType_" ):
                listener.enterDomainType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomainType_" ):
                listener.exitDomainType_(self)




    def domainType_(self):

        localctx = dafnyParser.DomainType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_domainType_)
        try:
            self.state = 560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self.boolType_()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.charType_()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 3)
                self.state = 545
                self.intType_()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 4)
                self.state = 546
                self.realType_()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 5)
                self.state = 547
                self.ordinalType_()
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 6)
                self.state = 548
                self.bitVectorType_()
                pass
            elif token in [49, 50]:
                self.enterOuterAlt(localctx, 7)
                self.state = 549
                self.objectType_()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 8)
                self.state = 550
                self.finiteSetType_()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 9)
                self.state = 551
                self.infiniteSetType_()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 10)
                self.state = 552
                self.multisetType_()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 11)
                self.state = 553
                self.finiteMapType_()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 12)
                self.state = 554
                self.infiniteMapType_()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 13)
                self.state = 555
                self.sequenceType_()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 14)
                self.state = 556
                self.natType_()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 15)
                self.state = 557
                self.stringType_()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 16)
                self.state = 558
                self.arrayType_()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 17)
                self.state = 559
                self.namedType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameSegmentForTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.NameSegmentForTypeNameContext)
            else:
                return self.getTypedRuleContext(dafnyParser.NameSegmentForTypeNameContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_namedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedType" ):
                listener.enterNamedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedType" ):
                listener.exitNamedType(self)




    def namedType(self):

        localctx = dafnyParser.NamedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_namedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.nameSegmentForTypeName()
            self.state = 567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 563
                    self.match(dafnyParser.T__19)
                    self.state = 564
                    self.nameSegmentForTypeName() 
                self.state = 569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameSegmentForTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_nameSegmentForTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameSegmentForTypeName" ):
                listener.enterNameSegmentForTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameSegmentForTypeName" ):
                listener.exitNameSegmentForTypeName(self)




    def nameSegmentForTypeName(self):

        localctx = dafnyParser.NameSegmentForTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_nameSegmentForTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(dafnyParser.IDENT)
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 571
                self.genericInstantiation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_boolType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolType_" ):
                listener.enterBoolType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolType_" ):
                listener.exitBoolType_(self)




    def boolType_(self):

        localctx = dafnyParser.BoolType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_boolType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(dafnyParser.T__20)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_intType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntType_" ):
                listener.enterIntType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntType_" ):
                listener.exitIntType_(self)




    def intType_(self):

        localctx = dafnyParser.IntType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_intType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(dafnyParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_realType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealType_" ):
                listener.enterRealType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealType_" ):
                listener.exitRealType_(self)




    def realType_(self):

        localctx = dafnyParser.RealType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_realType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(dafnyParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitVectorType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BV_TOKEN(self):
            return self.getToken(dafnyParser.BV_TOKEN, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_bitVectorType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitVectorType_" ):
                listener.enterBitVectorType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitVectorType_" ):
                listener.exitBitVectorType_(self)




    def bitVectorType_(self):

        localctx = dafnyParser.BitVectorType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_bitVectorType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(dafnyParser.BV_TOKEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrdinalType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_ordinalType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinalType_" ):
                listener.enterOrdinalType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinalType_" ):
                listener.exitOrdinalType_(self)




    def ordinalType_(self):

        localctx = dafnyParser.OrdinalType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_ordinalType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(dafnyParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_charType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharType_" ):
                listener.enterCharType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharType_" ):
                listener.exitCharType_(self)




    def charType_(self):

        localctx = dafnyParser.CharType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_charType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(dafnyParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInstantiationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_genericInstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInstantiation" ):
                listener.enterGenericInstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInstantiation" ):
                listener.exitGenericInstantiation(self)




    def genericInstantiation(self):

        localctx = dafnyParser.GenericInstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_genericInstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(dafnyParser.T__25)
            self.state = 587
            self.type_()
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 588
                self.match(dafnyParser.T__14)
                self.state = 589
                self.type_()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 595
            self.match(dafnyParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeVariableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeVariableNameContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeVariableNameContext,i)


        def Variance(self, i:int=None):
            if i is None:
                return self.getTokens(dafnyParser.Variance)
            else:
                return self.getToken(dafnyParser.Variance, i)

        def typeParameterCharacteristics(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeParameterCharacteristicsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeParameterCharacteristicsContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_genericParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericParameters" ):
                listener.enterGenericParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericParameters" ):
                listener.exitGenericParameters(self)




    def genericParameters(self):

        localctx = dafnyParser.GenericParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_genericParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(dafnyParser.T__25)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 598
                self.match(dafnyParser.Variance)


            self.state = 601
            self.typeVariableName()
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28:
                self.state = 602
                self.typeParameterCharacteristics()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 608
                self.match(dafnyParser.T__14)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 609
                    self.match(dafnyParser.Variance)


                self.state = 612
                self.typeVariableName()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==28:
                    self.state = 613
                    self.typeParameterCharacteristics()
                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 624
            self.match(dafnyParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterCharacteristicsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tPCharOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TPCharOptionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TPCharOptionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_typeParameterCharacteristics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterCharacteristics" ):
                listener.enterTypeParameterCharacteristics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterCharacteristics" ):
                listener.exitTypeParameterCharacteristics(self)




    def typeParameterCharacteristics(self):

        localctx = dafnyParser.TypeParameterCharacteristicsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typeParameterCharacteristics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(dafnyParser.T__27)
            self.state = 627
            self.tPCharOption()
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 628
                self.match(dafnyParser.T__14)
                self.state = 629
                self.tPCharOption()
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 635
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TPCharOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_tPCharOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTPCharOption" ):
                listener.enterTPCharOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTPCharOption" ):
                listener.exitTPCharOption(self)




    def tPCharOption(self):

        localctx = dafnyParser.TPCharOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tPCharOption)
        try:
            self.state = 642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.match(dafnyParser.T__29)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.match(dafnyParser.T__30)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 639
                self.match(dafnyParser.T__31)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 640
                self.match(dafnyParser.T__32)
                self.state = 641
                self.match(dafnyParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FiniteSetType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_finiteSetType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiniteSetType_" ):
                listener.enterFiniteSetType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiniteSetType_" ):
                listener.exitFiniteSetType_(self)




    def finiteSetType_(self):

        localctx = dafnyParser.FiniteSetType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_finiteSetType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(dafnyParser.T__34)
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 645
                self.genericInstantiation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfiniteSetType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_infiniteSetType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfiniteSetType_" ):
                listener.enterInfiniteSetType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfiniteSetType_" ):
                listener.exitInfiniteSetType_(self)




    def infiniteSetType_(self):

        localctx = dafnyParser.InfiniteSetType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_infiniteSetType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(dafnyParser.T__35)
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 649
                self.genericInstantiation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultisetType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_multisetType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultisetType_" ):
                listener.enterMultisetType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultisetType_" ):
                listener.exitMultisetType_(self)




    def multisetType_(self):

        localctx = dafnyParser.MultisetType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_multisetType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(dafnyParser.T__36)
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 653
                self.genericInstantiation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SequenceType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_sequenceType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequenceType_" ):
                listener.enterSequenceType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequenceType_" ):
                listener.exitSequenceType_(self)




    def sequenceType_(self):

        localctx = dafnyParser.SequenceType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_sequenceType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(dafnyParser.T__37)
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 657
                self.genericInstantiation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_stringType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringType_" ):
                listener.enterStringType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringType_" ):
                listener.exitStringType_(self)




    def stringType_(self):

        localctx = dafnyParser.StringType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_stringType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(dafnyParser.T__38)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FiniteMapType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_finiteMapType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiniteMapType_" ):
                listener.enterFiniteMapType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiniteMapType_" ):
                listener.exitFiniteMapType_(self)




    def finiteMapType_(self):

        localctx = dafnyParser.FiniteMapType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_finiteMapType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(dafnyParser.T__39)

            self.state = 663
            self.genericInstantiation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfiniteMapType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_infiniteMapType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfiniteMapType_" ):
                listener.enterInfiniteMapType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfiniteMapType_" ):
                listener.exitInfiniteMapType_(self)




    def infiniteMapType_(self):

        localctx = dafnyParser.InfiniteMapType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_infiniteMapType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(dafnyParser.T__40)

            self.state = 666
            self.genericInstantiation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SynonymTypeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def synonymTypeDecl_(self):
            return self.getTypedRuleContext(dafnyParser.SynonymTypeDecl_Context,0)


        def opaqueTypeDecl_(self):
            return self.getTypedRuleContext(dafnyParser.OpaqueTypeDecl_Context,0)


        def subsetTypeDecl_(self):
            return self.getTypedRuleContext(dafnyParser.SubsetTypeDecl_Context,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_synonymTypeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynonymTypeDecl" ):
                listener.enterSynonymTypeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynonymTypeDecl" ):
                listener.exitSynonymTypeDecl(self)




    def synonymTypeDecl(self):

        localctx = dafnyParser.SynonymTypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_synonymTypeDecl)
        try:
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.synonymTypeDecl_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.opaqueTypeDecl_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.subsetTypeDecl_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SynonymTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_synonymTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynonymTypeName" ):
                listener.enterSynonymTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynonymTypeName" ):
                listener.exitSynonymTypeName(self)




    def synonymTypeName(self):

        localctx = dafnyParser.SynonymTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_synonymTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.noUSIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SynonymTypeDecl_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def synonymTypeName(self):
            return self.getTypedRuleContext(dafnyParser.SynonymTypeNameContext,0)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def typeParameterCharacteristics(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeParameterCharacteristicsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeParameterCharacteristicsContext,i)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_synonymTypeDecl_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynonymTypeDecl_" ):
                listener.enterSynonymTypeDecl_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynonymTypeDecl_" ):
                listener.exitSynonymTypeDecl_(self)




    def synonymTypeDecl_(self):

        localctx = dafnyParser.SynonymTypeDecl_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_synonymTypeDecl_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(dafnyParser.T__41)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 676
                self.attribute()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 682
            self.synonymTypeName()
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28:
                self.state = 683
                self.typeParameterCharacteristics()
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 689
                self.genericParameters()


            self.state = 692
            self.match(dafnyParser.T__11)
            self.state = 693
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueTypeDecl_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def synonymTypeName(self):
            return self.getTypedRuleContext(dafnyParser.SynonymTypeNameContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def typeParameterCharacteristics(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeParameterCharacteristicsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeParameterCharacteristicsContext,i)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def typeMembers(self):
            return self.getTypedRuleContext(dafnyParser.TypeMembersContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_opaqueTypeDecl_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueTypeDecl_" ):
                listener.enterOpaqueTypeDecl_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueTypeDecl_" ):
                listener.exitOpaqueTypeDecl_(self)




    def opaqueTypeDecl_(self):

        localctx = dafnyParser.OpaqueTypeDecl_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_opaqueTypeDecl_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(dafnyParser.T__41)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 696
                self.attribute()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 702
            self.synonymTypeName()
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28:
                self.state = 703
                self.typeParameterCharacteristics()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 709
                self.genericParameters()


            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 712
                self.typeMembers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classMemberDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ClassMemberDeclContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ClassMemberDeclContext,i)


        def declModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.DeclModifierContext)
            else:
                return self.getTypedRuleContext(dafnyParser.DeclModifierContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_typeMembers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeMembers" ):
                listener.enterTypeMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeMembers" ):
                listener.exitTypeMembers(self)




    def typeMembers(self):

        localctx = dafnyParser.TypeMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_typeMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(dafnyParser.T__7)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1441151880758558660) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 55) != 0):
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 60) != 0):
                    self.state = 716
                    self.declModifier()
                    self.state = 721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 722
                self.classMemberDecl()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 728
            self.match(dafnyParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsetTypeDecl_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def synonymTypeName(self):
            return self.getTypedRuleContext(dafnyParser.SynonymTypeNameContext,0)


        def localIdentTypeOptional(self):
            return self.getTypedRuleContext(dafnyParser.LocalIdentTypeOptionalContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def HavocRhs_(self):
            return self.getToken(dafnyParser.HavocRhs_, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_subsetTypeDecl_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubsetTypeDecl_" ):
                listener.enterSubsetTypeDecl_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubsetTypeDecl_" ):
                listener.exitSubsetTypeDecl_(self)




    def subsetTypeDecl_(self):

        localctx = dafnyParser.SubsetTypeDecl_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_subsetTypeDecl_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(dafnyParser.T__41)
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 731
                self.attribute()
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 737
            self.synonymTypeName()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 738
                self.genericParameters()


            self.state = 741
            self.match(dafnyParser.T__11)
            self.state = 742
            self.localIdentTypeOptional()
            self.state = 743
            self.match(dafnyParser.T__42)
            self.state = 744
            self.expression()
            self.state = 752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 745
                self.match(dafnyParser.T__2)
                self.state = 746
                self.match(dafnyParser.T__43)
                self.state = 747
                self.expression()

            elif la_ == 2:
                self.state = 748
                self.match(dafnyParser.T__43)
                self.state = 749
                self.expression()

            elif la_ == 3:
                self.state = 750
                self.match(dafnyParser.T__43)
                self.state = 751
                self.match(dafnyParser.HavocRhs_)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NatType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_natType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatType_" ):
                listener.enterNatType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatType_" ):
                listener.exitNatType_(self)




    def natType_(self):

        localctx = dafnyParser.NatType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_natType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(dafnyParser.T__44)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtypeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def newtypeName(self):
            return self.getTypedRuleContext(dafnyParser.NewtypeNameContext,0)


        def localIdentTypeOptional(self):
            return self.getTypedRuleContext(dafnyParser.LocalIdentTypeOptionalContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def typeMembers(self):
            return self.getTypedRuleContext(dafnyParser.TypeMembersContext,0)


        def HavocRhs_(self):
            return self.getToken(dafnyParser.HavocRhs_, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_newtypeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeDecl" ):
                listener.enterNewtypeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeDecl" ):
                listener.exitNewtypeDecl(self)




    def newtypeDecl(self):

        localctx = dafnyParser.NewtypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_newtypeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(dafnyParser.T__45)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 757
                self.attribute()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 763
            self.newtypeName()
            self.state = 764
            self.match(dafnyParser.T__11)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 765
                self.match(dafnyParser.ELLIPSIS)


            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 768
                self.localIdentTypeOptional()
                self.state = 769
                self.match(dafnyParser.T__42)
                self.state = 770
                self.expression()
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 771
                    self.match(dafnyParser.T__2)
                    self.state = 772
                    self.match(dafnyParser.T__43)
                    self.state = 773
                    self.expression()

                elif la_ == 2:
                    self.state = 774
                    self.match(dafnyParser.T__43)
                    self.state = 775
                    self.expression()

                elif la_ == 3:
                    self.state = 776
                    self.match(dafnyParser.T__43)
                    self.state = 777
                    self.match(dafnyParser.HavocRhs_)


                pass

            elif la_ == 2:
                self.state = 780
                self.type_()
                pass


            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 783
                self.typeMembers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(dafnyParser.ClassNameContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeContext,i)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def declModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.DeclModifierContext)
            else:
                return self.getTypedRuleContext(dafnyParser.DeclModifierContext,i)


        def classMemberDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ClassMemberDeclContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ClassMemberDeclContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_classDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDecl" ):
                listener.enterClassDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDecl" ):
                listener.exitClassDecl(self)




    def classDecl(self):

        localctx = dafnyParser.ClassDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_classDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(dafnyParser.T__46)
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 787
                self.attribute()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 793
            self.className()
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 794
                self.genericParameters()


            self.state = 807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 797
                self.match(dafnyParser.T__16)
                self.state = 798
                self.type_()
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 799
                    self.match(dafnyParser.T__14)
                    self.state = 800
                    self.type_()
                    self.state = 805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [150]:
                self.state = 806
                self.match(dafnyParser.ELLIPSIS)
                pass
            elif token in [8]:
                pass
            else:
                pass
            self.state = 809
            self.match(dafnyParser.T__7)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1441151880758558660) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 55) != 0):
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 60) != 0):
                    self.state = 810
                    self.declModifier()
                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 817 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 816
                        self.classMemberDecl()

                    else:
                        raise NoViableAltException(self)
                    self.state = 819 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 826
            self.match(dafnyParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDecl(self):
            return self.getTypedRuleContext(dafnyParser.FieldDeclContext,0)


        def constantFieldDecl(self):
            return self.getTypedRuleContext(dafnyParser.ConstantFieldDeclContext,0)


        def functionDecl(self):
            return self.getTypedRuleContext(dafnyParser.FunctionDeclContext,0)


        def methodDecl(self):
            return self.getTypedRuleContext(dafnyParser.MethodDeclContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_classMemberDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDecl" ):
                listener.enterClassMemberDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDecl" ):
                listener.exitClassMemberDecl(self)




    def classMemberDecl(self):

        localctx = dafnyParser.ClassMemberDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_classMemberDecl)
        try:
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.fieldDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.constantFieldDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 830
                self.functionDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 831
                self.methodDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(dafnyParser.ClassNameContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeContext,i)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def declModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.DeclModifierContext)
            else:
                return self.getTypedRuleContext(dafnyParser.DeclModifierContext,i)


        def classMemberDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ClassMemberDeclContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ClassMemberDeclContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_traitDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitDecl" ):
                listener.enterTraitDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitDecl" ):
                listener.exitTraitDecl(self)




    def traitDecl(self):

        localctx = dafnyParser.TraitDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_traitDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(dafnyParser.T__47)
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 835
                self.attribute()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 841
            self.className()
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 842
                self.genericParameters()


            self.state = 855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 845
                self.match(dafnyParser.T__16)
                self.state = 846
                self.type_()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 847
                    self.match(dafnyParser.T__14)
                    self.state = 848
                    self.type_()
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [150]:
                self.state = 854
                self.match(dafnyParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 857
            self.match(dafnyParser.T__7)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1441151880758558660) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 55) != 0):
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 60) != 0):
                    self.state = 858
                    self.declModifier()
                    self.state = 863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 865 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 864
                        self.classMemberDecl()

                    else:
                        raise NoViableAltException(self)
                    self.state = 867 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 874
            self.match(dafnyParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_objectType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectType_" ):
                listener.enterObjectType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectType_" ):
                listener.exitObjectType_(self)




    def objectType_(self):

        localctx = dafnyParser.ObjectType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_objectType_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            _la = self._input.LA(1)
            if not(_la==49 or _la==50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_TOKEN(self):
            return self.getToken(dafnyParser.ARRAY_TOKEN, 0)

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_arrayType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType_" ):
                listener.enterArrayType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType_" ):
                listener.exitArrayType_(self)




    def arrayType_(self):

        localctx = dafnyParser.ArrayType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_arrayType_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(dafnyParser.ARRAY_TOKEN)
            self.state = 880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 879
                self.genericInstantiation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iteratorName(self):
            return self.getTypedRuleContext(dafnyParser.IteratorNameContext,0)


        def iteratorSpec(self):
            return self.getTypedRuleContext(dafnyParser.IteratorSpecContext,0)


        def formals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.FormalsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.FormalsContext,i)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def blockStmt(self):
            return self.getTypedRuleContext(dafnyParser.BlockStmtContext,0)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_iteratorDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorDecl" ):
                listener.enterIteratorDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorDecl" ):
                listener.exitIteratorDecl(self)




    def iteratorDecl(self):

        localctx = dafnyParser.IteratorDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_iteratorDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(dafnyParser.T__50)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 883
                self.attribute()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 889
            self.iteratorName()
            self.state = 899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 28]:
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 890
                    self.genericParameters()


                self.state = 893
                self.formals()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 894
                    self.match(dafnyParser.T__51)
                    self.state = 895
                    self.formals()


                pass
            elif token in [150]:
                self.state = 898
                self.match(dafnyParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 901
            self.iteratorSpec()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 902
                self.blockStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowType_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domainType_(self):
            return self.getTypedRuleContext(dafnyParser.DomainType_Context,0)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_arrowType_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowType_" ):
                listener.enterArrowType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowType_" ):
                listener.exitArrowType_(self)




    def arrowType_(self):

        localctx = dafnyParser.ArrowType_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_arrowType_)
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self.domainType_()
                self.state = 906
                self.match(dafnyParser.T__52)
                self.state = 907
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 909
                self.domainType_()
                self.state = 910
                self.match(dafnyParser.T__53)
                self.state = 911
                self.type_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 913
                self.domainType_()
                self.state = 914
                self.match(dafnyParser.T__54)
                self.state = 915
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatypeName(self):
            return self.getTypedRuleContext(dafnyParser.DatatypeNameContext,0)


        def datatypeMemberDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.DatatypeMemberDeclContext)
            else:
                return self.getTypedRuleContext(dafnyParser.DatatypeMemberDeclContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def typeMembers(self):
            return self.getTypedRuleContext(dafnyParser.TypeMembersContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_datatypeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatypeDecl" ):
                listener.enterDatatypeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatypeDecl" ):
                listener.exitDatatypeDecl(self)




    def datatypeDecl(self):

        localctx = dafnyParser.DatatypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_datatypeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            _la = self._input.LA(1)
            if not(_la==56 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 920
                self.attribute()
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 926
            self.datatypeName()
            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 927
                self.genericParameters()


            self.state = 930
            self.match(dafnyParser.T__11)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 931
                self.match(dafnyParser.ELLIPSIS)


            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 934
                self.match(dafnyParser.T__42)


            self.state = 937
            self.datatypeMemberDecl()
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 938
                self.match(dafnyParser.T__42)
                self.state = 939
                self.datatypeMemberDecl()
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 945
                self.typeMembers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeMemberDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatypeMemberName(self):
            return self.getTypedRuleContext(dafnyParser.DatatypeMemberNameContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def formalsOptionalIds(self):
            return self.getTypedRuleContext(dafnyParser.FormalsOptionalIdsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_datatypeMemberDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatypeMemberDecl" ):
                listener.enterDatatypeMemberDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatypeMemberDecl" ):
                listener.exitDatatypeMemberDecl(self)




    def datatypeMemberDecl(self):

        localctx = dafnyParser.DatatypeMemberDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_datatypeMemberDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 948
                self.attribute()
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 954
            self.datatypeMemberName()
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 955
                self.formalsOptionalIds()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fIdentType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.FIdentTypeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.FIdentTypeContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_fieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDecl" ):
                listener.enterFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDecl" ):
                listener.exitFieldDecl(self)




    def fieldDecl(self):

        localctx = dafnyParser.FieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fieldDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(dafnyParser.T__57)
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 959
                self.attribute()
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 965
            self.fIdentType()
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 966
                self.match(dafnyParser.T__14)
                self.state = 967
                self.fIdentType()
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cIdentType(self):
            return self.getTypedRuleContext(dafnyParser.CIdentTypeContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_constantFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantFieldDecl" ):
                listener.enterConstantFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantFieldDecl" ):
                listener.exitConstantFieldDecl(self)




    def constantFieldDecl(self):

        localctx = dafnyParser.ConstantFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_constantFieldDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(dafnyParser.T__58)
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 974
                self.attribute()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 980
            self.cIdentType()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 981
                self.match(dafnyParser.ELLIPSIS)


            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 984
                self.match(dafnyParser.T__59)
                self.state = 985
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodKeyword_(self):
            return self.getTypedRuleContext(dafnyParser.MethodKeyword_Context,0)


        def methodSpec(self):
            return self.getTypedRuleContext(dafnyParser.MethodSpecContext,0)


        def methodSignature_(self):
            return self.getTypedRuleContext(dafnyParser.MethodSignature_Context,0)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def methodFunctionName(self):
            return self.getTypedRuleContext(dafnyParser.MethodFunctionNameContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(dafnyParser.BlockStmtContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_methodDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDecl" ):
                listener.enterMethodDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDecl" ):
                listener.exitMethodDecl(self)




    def methodDecl(self):

        localctx = dafnyParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_methodDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.methodKeyword_()
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 989
                self.attribute()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141 or _la==144:
                self.state = 995
                self.methodFunctionName()


            self.state = 1000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 28, 152]:
                self.state = 998
                self.methodSignature_()
                pass
            elif token in [150]:
                self.state = 999
                self.match(dafnyParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1002
            self.methodSpec()
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1003
                self.blockStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodKeyword_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_methodKeyword_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodKeyword_" ):
                listener.enterMethodKeyword_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodKeyword_" ):
                listener.exitMethodKeyword_(self)




    def methodKeyword_(self):

        localctx = dafnyParser.MethodKeyword_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_methodKeyword_)
        try:
            self.state = 1015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.match(dafnyParser.T__60)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.match(dafnyParser.T__61)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1008
                self.match(dafnyParser.T__62)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1009
                self.match(dafnyParser.T__63)
                self.state = 1010
                self.match(dafnyParser.T__62)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1011
                self.match(dafnyParser.T__64)
                self.state = 1012
                self.match(dafnyParser.T__62)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1013
                self.match(dafnyParser.T__65)
                self.state = 1014
                self.match(dafnyParser.T__62)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSignature_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.FormalsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.FormalsContext,i)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def KType(self):
            return self.getToken(dafnyParser.KType, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_methodSignature_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSignature_" ):
                listener.enterMethodSignature_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSignature_" ):
                listener.exitMethodSignature_(self)




    def methodSignature_(self):

        localctx = dafnyParser.MethodSignature_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_methodSignature_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1017
                self.genericParameters()


            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1020
                self.match(dafnyParser.KType)


            self.state = 1023
            self.formals()
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1024
                self.match(dafnyParser.T__66)
                self.state = 1025
                self.formals()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gIdentType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.GIdentTypeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.GIdentTypeContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_formals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormals" ):
                listener.enterFormals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormals" ):
                listener.exitFormals(self)




    def formals(self):

        localctx = dafnyParser.FormalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_formals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(dafnyParser.T__27)
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==34 or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 271) != 0):
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==136:
                    self.state = 1029
                    self.attribute()
                    self.state = 1034
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1035
                self.gIdentType()
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1036
                    self.match(dafnyParser.T__14)
                    self.state = 1040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==136:
                        self.state = 1037
                        self.attribute()
                        self.state = 1042
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1043
                    self.gIdentType()
                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1051
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSpec(self):
            return self.getTypedRuleContext(dafnyParser.FunctionSpecContext,0)


        def methodFunctionName(self):
            return self.getTypedRuleContext(dafnyParser.MethodFunctionNameContext,0)


        def functionSignatureOrEllipsis_(self):
            return self.getTypedRuleContext(dafnyParser.FunctionSignatureOrEllipsis_Context,0)


        def predicateSignatureOrEllipsis_(self):
            return self.getTypedRuleContext(dafnyParser.PredicateSignatureOrEllipsis_Context,0)


        def functionBody(self):
            return self.getTypedRuleContext(dafnyParser.FunctionBodyContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def opaqueAttribute(self):
            return self.getTypedRuleContext(dafnyParser.OpaqueAttributeContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_functionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDecl" ):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDecl" ):
                listener.exitFunctionDecl(self)




    def functionDecl(self):

        localctx = dafnyParser.FunctionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_functionDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64, 68]:
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 1053
                    self.match(dafnyParser.T__63)


                self.state = 1056
                self.match(dafnyParser.T__67)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 1057
                    self.match(dafnyParser.T__60)


                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==136:
                    self.state = 1060
                    self.attribute()
                    self.state = 1065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 1066
                    self.opaqueAttribute()


                self.state = 1069
                self.methodFunctionName()
                self.state = 1070
                self.functionSignatureOrEllipsis_()
                pass
            elif token in [69]:
                self.state = 1072
                self.match(dafnyParser.T__68)
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 1073
                    self.match(dafnyParser.T__60)


                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==136:
                    self.state = 1076
                    self.attribute()
                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1082
                self.methodFunctionName()
                self.state = 1083
                self.predicateSignatureOrEllipsis_()
                pass
            elif token in [65, 66]:
                self.state = 1085
                _la = self._input.LA(1)
                if not(_la==65 or _la==66):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1086
                self.match(dafnyParser.T__68)
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==136:
                    self.state = 1087
                    self.attribute()
                    self.state = 1092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1093
                self.methodFunctionName()
                self.state = 1094
                self.predicateSignatureOrEllipsis_()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1098
            self.functionSpec()
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1099
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_opaqueAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueAttribute" ):
                listener.enterOpaqueAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueAttribute" ):
                listener.exitOpaqueAttribute(self)




    def opaqueAttribute(self):

        localctx = dafnyParser.OpaqueAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_opaqueAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(dafnyParser.T__69)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSignatureOrEllipsis_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSignature_(self):
            return self.getTypedRuleContext(dafnyParser.FunctionSignature_Context,0)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_functionSignatureOrEllipsis_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSignatureOrEllipsis_" ):
                listener.enterFunctionSignatureOrEllipsis_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSignatureOrEllipsis_" ):
                listener.exitFunctionSignatureOrEllipsis_(self)




    def functionSignatureOrEllipsis_(self):

        localctx = dafnyParser.FunctionSignatureOrEllipsis_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_functionSignatureOrEllipsis_)
        try:
            self.state = 1106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.functionSignature_()
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.match(dafnyParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSignature_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formals(self):
            return self.getTypedRuleContext(dafnyParser.FormalsContext,0)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def gIdentType(self):
            return self.getTypedRuleContext(dafnyParser.GIdentTypeContext,0)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_functionSignature_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSignature_" ):
                listener.enterFunctionSignature_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSignature_" ):
                listener.exitFunctionSignature_(self)




    def functionSignature_(self):

        localctx = dafnyParser.FunctionSignature_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_functionSignature_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1108
                self.genericParameters()


            self.state = 1111
            self.formals()
            self.state = 1112
            self.match(dafnyParser.T__12)
            self.state = 1118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 22, 23, 24, 25, 35, 36, 37, 38, 39, 40, 41, 45, 49, 50, 141, 142, 143]:
                self.state = 1113
                self.type_()
                pass
            elif token in [28]:
                self.state = 1114
                self.match(dafnyParser.T__27)
                self.state = 1115
                self.gIdentType()
                self.state = 1116
                self.match(dafnyParser.T__28)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateSignatureOrEllipsis_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicateSignature_(self):
            return self.getTypedRuleContext(dafnyParser.PredicateSignature_Context,0)


        def ELLIPSIS(self):
            return self.getToken(dafnyParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_predicateSignatureOrEllipsis_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateSignatureOrEllipsis_" ):
                listener.enterPredicateSignatureOrEllipsis_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateSignatureOrEllipsis_" ):
                listener.exitPredicateSignatureOrEllipsis_(self)




    def predicateSignatureOrEllipsis_(self):

        localctx = dafnyParser.PredicateSignatureOrEllipsis_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_predicateSignatureOrEllipsis_)
        try:
            self.state = 1122
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 28, 152]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.predicateSignature_()
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self.match(dafnyParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateSignature_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formals(self):
            return self.getTypedRuleContext(dafnyParser.FormalsContext,0)


        def genericParameters(self):
            return self.getTypedRuleContext(dafnyParser.GenericParametersContext,0)


        def KType(self):
            return self.getToken(dafnyParser.KType, 0)

        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_predicateSignature_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateSignature_" ):
                listener.enterPredicateSignature_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateSignature_" ):
                listener.exitPredicateSignature_(self)




    def predicateSignature_(self):

        localctx = dafnyParser.PredicateSignature_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predicateSignature_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1124
                self.genericParameters()


            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1127
                self.match(dafnyParser.KType)


            self.state = 1130
            self.formals()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1131
                self.match(dafnyParser.T__12)
                self.state = 1138
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [21, 22, 23, 24, 25, 35, 36, 37, 38, 39, 40, 41, 45, 49, 50, 141, 142, 143]:
                    self.state = 1132
                    self.type_()
                    pass
                elif token in [28]:
                    self.state = 1133
                    self.match(dafnyParser.T__27)
                    self.state = 1134
                    self.match(dafnyParser.IDENT)
                    self.state = 1135
                    self.match(dafnyParser.T__12)
                    self.state = 1136
                    self.match(dafnyParser.T__20)
                    self.state = 1137
                    self.match(dafnyParser.T__28)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(dafnyParser.BlockStmtContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = dafnyParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_functionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(dafnyParser.T__7)
            self.state = 1143
            self.expression()
            self.state = 1144
            self.match(dafnyParser.T__8)
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1145
                self.match(dafnyParser.T__70)
                self.state = 1146
                self.match(dafnyParser.T__60)
                self.state = 1147
                self.blockStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiesClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ModifiesClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ModifiesClauseContext,i)


        def requiresClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RequiresClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RequiresClauseContext,i)


        def ensuresClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.EnsuresClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.EnsuresClauseContext,i)


        def decreasesClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.DecreasesClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.DecreasesClauseContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_methodSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSpec" ):
                listener.enterMethodSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSpec" ):
                listener.exitMethodSpec(self)




    def methodSpec(self):

        localctx = dafnyParser.MethodSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_methodSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 29) != 0):
                self.state = 1154
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [76]:
                    self.state = 1150
                    self.modifiesClause()
                    pass
                elif token in [72]:
                    self.state = 1151
                    self.requiresClause()
                    pass
                elif token in [74]:
                    self.state = 1152
                    self.ensuresClause()
                    pass
                elif token in [75]:
                    self.state = 1153
                    self.decreasesClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requiresClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RequiresClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RequiresClauseContext,i)


        def readsClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ReadsClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ReadsClauseContext,i)


        def ensuresClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.EnsuresClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.EnsuresClauseContext,i)


        def decreasesClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.DecreasesClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.DecreasesClauseContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_functionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpec" ):
                listener.enterFunctionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpec" ):
                listener.exitFunctionSpec(self)




    def functionSpec(self):

        localctx = dafnyParser.FunctionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_functionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 77) != 0):
                self.state = 1163
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [72]:
                    self.state = 1159
                    self.requiresClause()
                    pass
                elif token in [78]:
                    self.state = 1160
                    self.readsClause()
                    pass
                elif token in [74]:
                    self.state = 1161
                    self.ensuresClause()
                    pass
                elif token in [75]:
                    self.state = 1162
                    self.decreasesClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def readsClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ReadsClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ReadsClauseContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_lambdaSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaSpec" ):
                listener.enterLambdaSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaSpec" ):
                listener.exitLambdaSpec(self)




    def lambdaSpec(self):

        localctx = dafnyParser.LambdaSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_lambdaSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==72 or _la==78:
                self.state = 1171
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [78]:
                    self.state = 1168
                    self.readsClause()
                    pass
                elif token in [72]:
                    self.state = 1169
                    self.match(dafnyParser.T__71)
                    self.state = 1170
                    self.expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def readsClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ReadsClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ReadsClauseContext,i)


        def modifiesClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ModifiesClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ModifiesClauseContext,i)


        def requiresClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RequiresClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RequiresClauseContext,i)


        def ensuresClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.EnsuresClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.EnsuresClauseContext,i)


        def decreasesClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.DecreasesClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.DecreasesClauseContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_iteratorSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorSpec" ):
                listener.enterIteratorSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorSpec" ):
                listener.exitIteratorSpec(self)




    def iteratorSpec(self):

        localctx = dafnyParser.IteratorSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_iteratorSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 95) != 0):
                self.state = 1187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1176
                    self.readsClause()
                    pass

                elif la_ == 2:
                    self.state = 1177
                    self.modifiesClause()
                    pass

                elif la_ == 3:
                    self.state = 1179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 1178
                        self.match(dafnyParser.T__72)


                    self.state = 1181
                    self.requiresClause()
                    pass

                elif la_ == 4:
                    self.state = 1183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 1182
                        self.match(dafnyParser.T__72)


                    self.state = 1185
                    self.ensuresClause()
                    pass

                elif la_ == 5:
                    self.state = 1186
                    self.decreasesClause()
                    pass


                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def invariantClause_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.InvariantClause_Context)
            else:
                return self.getTypedRuleContext(dafnyParser.InvariantClause_Context,i)


        def decreasesClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.DecreasesClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.DecreasesClauseContext,i)


        def modifiesClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ModifiesClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ModifiesClauseContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_loopSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopSpec" ):
                listener.enterLoopSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopSpec" ):
                listener.exitLoopSpec(self)




    def loopSpec(self):

        localctx = dafnyParser.LoopSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_loopSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0):
                self.state = 1195
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [77]:
                    self.state = 1192
                    self.invariantClause_()
                    pass
                elif token in [75]:
                    self.state = 1193
                    self.decreasesClause()
                    pass
                elif token in [76]:
                    self.state = 1194
                    self.modifiesClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiresClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def labelName(self):
            return self.getTypedRuleContext(dafnyParser.LabelNameContext,0)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_requiresClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiresClause" ):
                listener.enterRequiresClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiresClause" ):
                listener.exitRequiresClause(self)




    def requiresClause(self):

        localctx = dafnyParser.RequiresClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_requiresClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.match(dafnyParser.T__71)
            self.state = 1204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1201
                self.attribute()
                self.state = 1206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1207
                self.labelName()
                self.state = 1208
                self.match(dafnyParser.T__12)


            self.state = 1212
            self.expression()
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 1213
                self.match(dafnyParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnsuresClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_ensuresClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnsuresClause" ):
                listener.enterEnsuresClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnsuresClause" ):
                listener.exitEnsuresClause(self)




    def ensuresClause(self):

        localctx = dafnyParser.EnsuresClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ensuresClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(dafnyParser.T__73)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1217
                self.attribute()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1223
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecreasesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decreasesList(self):
            return self.getTypedRuleContext(dafnyParser.DecreasesListContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_decreasesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecreasesClause" ):
                listener.enterDecreasesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecreasesClause" ):
                listener.exitDecreasesClause(self)




    def decreasesClause(self):

        localctx = dafnyParser.DecreasesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_decreasesClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(dafnyParser.T__74)
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1226
                self.attribute()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self.decreasesList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecreasesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def possiblyWildExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.PossiblyWildExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.PossiblyWildExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_decreasesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecreasesList" ):
                listener.enterDecreasesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecreasesList" ):
                listener.exitDecreasesList(self)




    def decreasesList(self):

        localctx = dafnyParser.DecreasesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_decreasesList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.possiblyWildExpression()
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1235
                self.match(dafnyParser.T__14)
                self.state = 1236
                self.possiblyWildExpression()
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PossiblyWildExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HavocRhs_(self):
            return self.getToken(dafnyParser.HavocRhs_, 0)

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_possiblyWildExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPossiblyWildExpression" ):
                listener.enterPossiblyWildExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPossiblyWildExpression" ):
                listener.exitPossiblyWildExpression(self)




    def possiblyWildExpression(self):

        localctx = dafnyParser.PossiblyWildExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_possiblyWildExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [157]:
                self.state = 1242
                self.match(dafnyParser.HavocRhs_)
                pass
            elif token in [3, 8, 28, 33, 35, 36, 37, 38, 40, 41, 43, 58, 84, 85, 86, 87, 88, 96, 98, 99, 101, 103, 111, 112, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 133, 141, 144, 145, 146, 148, 149]:
                self.state = 1243
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifiesClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.FrameExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.FrameExpressionContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_modifiesClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifiesClause" ):
                listener.enterModifiesClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifiesClause" ):
                listener.exitModifiesClause(self)




    def modifiesClause(self):

        localctx = dafnyParser.ModifiesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_modifiesClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(dafnyParser.T__75)
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1247
                self.attribute()
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1253
            self.frameExpression()
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1254
                self.match(dafnyParser.T__14)
                self.state = 1255
                self.frameExpression()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvariantClause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_invariantClause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariantClause_" ):
                listener.enterInvariantClause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariantClause_" ):
                listener.exitInvariantClause_(self)




    def invariantClause_(self):

        localctx = dafnyParser.InvariantClause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_invariantClause_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self.match(dafnyParser.T__76)
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1262
                self.attribute()
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1268
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def possiblyWildFrameExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.PossiblyWildFrameExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.PossiblyWildFrameExpressionContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_readsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadsClause" ):
                listener.enterReadsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadsClause" ):
                listener.exitReadsClause(self)




    def readsClause(self):

        localctx = dafnyParser.ReadsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_readsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(dafnyParser.T__77)
            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1271
                self.attribute()
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1277
            self.possiblyWildFrameExpression()
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1278
                self.match(dafnyParser.T__14)
                self.state = 1279
                self.possiblyWildFrameExpression()
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PossiblyWildFrameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HavocRhs_(self):
            return self.getToken(dafnyParser.HavocRhs_, 0)

        def frameExpression(self):
            return self.getTypedRuleContext(dafnyParser.FrameExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_possiblyWildFrameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPossiblyWildFrameExpression" ):
                listener.enterPossiblyWildFrameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPossiblyWildFrameExpression" ):
                listener.exitPossiblyWildFrameExpression(self)




    def possiblyWildFrameExpression(self):

        localctx = dafnyParser.PossiblyWildFrameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_possiblyWildFrameExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [157]:
                self.state = 1285
                self.match(dafnyParser.HavocRhs_)
                pass
            elif token in [3, 8, 14, 28, 33, 35, 36, 37, 38, 40, 41, 43, 58, 84, 85, 86, 87, 88, 96, 98, 99, 101, 103, 111, 112, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 133, 141, 144, 145, 146, 148, 149]:
                self.state = 1286
                self.frameExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def frameField(self):
            return self.getTypedRuleContext(dafnyParser.FrameFieldContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_frameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameExpression" ):
                listener.enterFrameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameExpression" ):
                listener.exitFrameExpression(self)




    def frameExpression(self):

        localctx = dafnyParser.FrameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_frameExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 28, 33, 35, 36, 37, 38, 40, 41, 43, 58, 84, 85, 86, 87, 88, 96, 98, 99, 101, 103, 111, 112, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 133, 141, 144, 145, 146, 148, 149]:
                self.state = 1289
                self.expression()
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 1290
                    self.frameField()


                pass
            elif token in [14]:
                self.state = 1293
                self.frameField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.IdentOrDigitsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_frameField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameField" ):
                listener.enterFrameField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameField" ):
                listener.exitFrameField(self)




    def frameField(self):

        localctx = dafnyParser.FrameFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_frameField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(dafnyParser.T__13)
            self.state = 1297
            self.identOrDigits()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonLabeledStmt(self):
            return self.getTypedRuleContext(dafnyParser.NonLabeledStmtContext,0)


        def labelName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.LabelNameContext)
            else:
                return self.getTypedRuleContext(dafnyParser.LabelNameContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = dafnyParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 1299
                self.match(dafnyParser.T__78)
                self.state = 1300
                self.labelName()
                self.state = 1301
                self.match(dafnyParser.T__12)
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1308
            self.nonLabeledStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonLabeledStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assertStmt(self):
            return self.getTypedRuleContext(dafnyParser.AssertStmtContext,0)


        def assumeStmt(self):
            return self.getTypedRuleContext(dafnyParser.AssumeStmtContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(dafnyParser.BlockStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(dafnyParser.BreakStmtContext,0)


        def calcStmt(self):
            return self.getTypedRuleContext(dafnyParser.CalcStmtContext,0)


        def expectStmt(self):
            return self.getTypedRuleContext(dafnyParser.ExpectStmtContext,0)


        def forallStmt(self):
            return self.getTypedRuleContext(dafnyParser.ForallStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(dafnyParser.IfStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(dafnyParser.MatchStmtContext,0)


        def modifyStmt(self):
            return self.getTypedRuleContext(dafnyParser.ModifyStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(dafnyParser.PrintStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(dafnyParser.ReturnStmtContext,0)


        def revealStmt(self):
            return self.getTypedRuleContext(dafnyParser.RevealStmtContext,0)


        def updateStmt(self):
            return self.getTypedRuleContext(dafnyParser.UpdateStmtContext,0)


        def updateFailureStmt(self):
            return self.getTypedRuleContext(dafnyParser.UpdateFailureStmtContext,0)


        def varDeclStatement(self):
            return self.getTypedRuleContext(dafnyParser.VarDeclStatementContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(dafnyParser.WhileStmtContext,0)


        def forLoopStmt(self):
            return self.getTypedRuleContext(dafnyParser.ForLoopStmtContext,0)


        def yieldStmt(self):
            return self.getTypedRuleContext(dafnyParser.YieldStmtContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_nonLabeledStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonLabeledStmt" ):
                listener.enterNonLabeledStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonLabeledStmt" ):
                listener.exitNonLabeledStmt(self)




    def nonLabeledStmt(self):

        localctx = dafnyParser.NonLabeledStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_nonLabeledStmt)
        try:
            self.state = 1329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self.assertStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.assumeStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1312
                self.blockStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1313
                self.breakStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1314
                self.calcStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1315
                self.expectStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1316
                self.forallStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1317
                self.ifStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1318
                self.matchStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1319
                self.modifyStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1320
                self.printStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1321
                self.returnStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1322
                self.revealStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1323
                self.updateStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1324
                self.updateFailureStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1325
                self.varDeclStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1326
                self.whileStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1327
                self.forLoopStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1328
                self.yieldStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(dafnyParser.LabelNameContext,0)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = dafnyParser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_breakStmt)
        self._la = 0 # Token type
        try:
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.match(dafnyParser.T__79)
                self.state = 1332
                self.labelName()
                self.state = 1333
                self.match(dafnyParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1335
                self.match(dafnyParser.T__80)
                self.state = 1336
                self.labelName()
                self.state = 1337
                self.match(dafnyParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1339
                        self.match(dafnyParser.T__79) 
                    self.state = 1344
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

                self.state = 1345
                self.match(dafnyParser.T__79)
                self.state = 1346
                self.match(dafnyParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 1347
                    self.match(dafnyParser.T__79)
                    self.state = 1352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1353
                self.match(dafnyParser.T__80)
                self.state = 1354
                self.match(dafnyParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.StmtContext)
            else:
                return self.getTypedRuleContext(dafnyParser.StmtContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = dafnyParser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_blockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(dafnyParser.T__7)
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 288239172513169672) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 33706628991220673) != 0) or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 441) != 0):
                self.state = 1358
                self.stmt()
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1364
            self.match(dafnyParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def rhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RhsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RhsContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = dafnyParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(dafnyParser.T__81)
            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288243012213932296) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 515) != 0):
                self.state = 1367
                self.rhs()
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1368
                    self.match(dafnyParser.T__14)
                    self.state = 1369
                    self.rhs()
                    self.state = 1374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1377
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def rhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RhsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RhsContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_yieldStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStmt" ):
                listener.enterYieldStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStmt" ):
                listener.exitYieldStmt(self)




    def yieldStmt(self):

        localctx = dafnyParser.YieldStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_yieldStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(dafnyParser.T__72)
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288243012213932296) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or ((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 515) != 0):
                self.state = 1380
                self.rhs()
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1381
                    self.match(dafnyParser.T__14)
                    self.state = 1382
                    self.rhs()
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1390
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.LhsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.LhsContext,i)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def rhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RhsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RhsContext,i)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_updateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStmt" ):
                listener.enterUpdateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStmt" ):
                listener.exitUpdateStmt(self)




    def updateStmt(self):

        localctx = dafnyParser.UpdateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_updateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self.lhs()
            self.state = 1425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136, 139]:
                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==136:
                    self.state = 1393
                    self.attribute()
                    self.state = 1398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1399
                self.match(dafnyParser.SEMICOLON)
                pass
            elif token in [15, 60, 83]:
                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1400
                    self.match(dafnyParser.T__14)
                    self.state = 1401
                    self.lhs()
                    self.state = 1406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1421
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 1407
                    self.match(dafnyParser.T__59)
                    self.state = 1408
                    self.rhs()
                    self.state = 1413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1409
                        self.match(dafnyParser.T__14)
                        self.state = 1410
                        self.rhs()
                        self.state = 1415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [83]:
                    self.state = 1416
                    self.match(dafnyParser.T__82)
                    self.state = 1418
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1417
                        self.match(dafnyParser.T__83)


                    self.state = 1420
                    self.expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1423
                self.match(dafnyParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateFailureStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def lhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.LhsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.LhsContext,i)


        def rhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RhsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RhsContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_updateFailureStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateFailureStmt" ):
                listener.enterUpdateFailureStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateFailureStmt" ):
                listener.exitUpdateFailureStmt(self)




    def updateFailureStmt(self):

        localctx = dafnyParser.UpdateFailureStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_updateFailureStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28 or _la==43 or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1849688543) != 0):
                self.state = 1427
                self.lhs()
                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1428
                    self.match(dafnyParser.T__14)
                    self.state = 1429
                    self.lhs()
                    self.state = 1434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1437
            self.match(dafnyParser.T__84)
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1438
                _la = self._input.LA(1)
                if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 13) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1441
            self.expression()
            self.state = 1446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1442
                self.match(dafnyParser.T__14)
                self.state = 1443
                self.rhs()
                self.state = 1448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1449
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def localIdentTypeOptional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.LocalIdentTypeOptionalContext)
            else:
                return self.getTypedRuleContext(dafnyParser.LocalIdentTypeOptionalContext,i)


        def casePatternLocal(self):
            return self.getTypedRuleContext(dafnyParser.CasePatternLocalContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def rhs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RhsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RhsContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_varDeclStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDeclStatement" ):
                listener.enterVarDeclStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDeclStatement" ):
                listener.exitVarDeclStatement(self)




    def varDeclStatement(self):

        localctx = dafnyParser.VarDeclStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_varDeclStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 1451
                self.match(dafnyParser.T__2)


            self.state = 1454
            self.match(dafnyParser.T__57)
            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1455
                self.attribute()
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1461
                self.localIdentTypeOptional()
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1462
                    self.match(dafnyParser.T__14)
                    self.state = 1466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==136:
                        self.state = 1463
                        self.attribute()
                        self.state = 1468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1469
                    self.localIdentTypeOptional()
                    self.state = 1474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1507
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 1475
                    self.match(dafnyParser.T__59)
                    self.state = 1476
                    self.rhs()
                    self.state = 1481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1477
                        self.match(dafnyParser.T__14)
                        self.state = 1478
                        self.rhs()
                        self.state = 1483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [85]:
                    self.state = 1484
                    self.match(dafnyParser.T__84)
                    self.state = 1486
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1485
                        _la = self._input.LA(1)
                        if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 13) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1488
                    self.expression()
                    self.state = 1493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1489
                        self.match(dafnyParser.T__14)
                        self.state = 1490
                        self.rhs()
                        self.state = 1495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [83, 136]:
                    self.state = 1499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==136:
                        self.state = 1496
                        self.attribute()
                        self.state = 1501
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1502
                    self.match(dafnyParser.T__82)
                    self.state = 1504
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1503
                        self.match(dafnyParser.T__83)


                    self.state = 1506
                    self.expression()
                    pass
                elif token in [139]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.state = 1509
                self.casePatternLocal()
                self.state = 1518
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 1510
                    self.match(dafnyParser.T__59)
                    pass
                elif token in [83, 136]:
                    self.state = 1514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==136:
                        self.state = 1511
                        self.attribute()
                        self.state = 1516
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1517
                    self.match(dafnyParser.T__82)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1520
                self.expression()
                pass


            self.state = 1524
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CasePatternLocalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def casePatternLocal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.CasePatternLocalContext)
            else:
                return self.getTypedRuleContext(dafnyParser.CasePatternLocalContext,i)


        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def localIdentTypeOptional(self):
            return self.getTypedRuleContext(dafnyParser.LocalIdentTypeOptionalContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_casePatternLocal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasePatternLocal" ):
                listener.enterCasePatternLocal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasePatternLocal" ):
                listener.exitCasePatternLocal(self)




    def casePatternLocal(self):

        localctx = dafnyParser.CasePatternLocalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_casePatternLocal)
        self._la = 0 # Token type
        try:
            self.state = 1541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 1526
                    self.match(dafnyParser.IDENT)


                self.state = 1529
                self.match(dafnyParser.T__27)
                self.state = 1530
                self.casePatternLocal()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1531
                    self.match(dafnyParser.T__14)
                    self.state = 1532
                    self.casePatternLocal()
                    self.state = 1537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1538
                self.match(dafnyParser.T__28)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1540
                self.localIdentTypeOptional()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HavocRhs_(self):
            return self.getToken(dafnyParser.HavocRhs_, 0)

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)




    def guard(self):

        localctx = dafnyParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_guard)
        try:
            self.state = 1548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1543
                self.match(dafnyParser.HavocRhs_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1544
                self.match(dafnyParser.T__27)
                self.state = 1545
                self.match(dafnyParser.HavocRhs_)
                self.state = 1546
                self.match(dafnyParser.T__28)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1547
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identTypeOptional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.IdentTypeOptionalContext)
            else:
                return self.getTypedRuleContext(dafnyParser.IdentTypeOptionalContext,i)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_bindingGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindingGuard" ):
                listener.enterBindingGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindingGuard" ):
                listener.exitBindingGuard(self)




    def bindingGuard(self):

        localctx = dafnyParser.BindingGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_bindingGuard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.identTypeOptional()
            self.state = 1555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1551
                self.match(dafnyParser.T__14)
                self.state = 1552
                self.identTypeOptional()
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1558
                self.attribute()
                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1564
            self.match(dafnyParser.T__82)
            self.state = 1565
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alternativeBlock(self):
            return self.getTypedRuleContext(dafnyParser.AlternativeBlockContext,0)


        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(dafnyParser.BlockStmtContext,i)


        def bindingGuard(self):
            return self.getTypedRuleContext(dafnyParser.BindingGuardContext,0)


        def guard(self):
            return self.getTypedRuleContext(dafnyParser.GuardContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(dafnyParser.IfStmtContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = dafnyParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.match(dafnyParser.T__87)
            self.state = 1581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1568
                self.alternativeBlock()
                pass

            elif la_ == 2:
                self.state = 1571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1569
                    self.bindingGuard()
                    pass

                elif la_ == 2:
                    self.state = 1570
                    self.guard()
                    pass


                self.state = 1573
                self.blockStmt()
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1574
                    self.match(dafnyParser.T__88)
                    self.state = 1577
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [88]:
                        self.state = 1575
                        self.ifStmt()
                        pass
                    elif token in [8]:
                        self.state = 1576
                        self.blockStmt()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternativeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alternativeBlockCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AlternativeBlockCaseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AlternativeBlockCaseContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_alternativeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternativeBlock" ):
                listener.enterAlternativeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternativeBlock" ):
                listener.exitAlternativeBlock(self)




    def alternativeBlock(self):

        localctx = dafnyParser.AlternativeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_alternativeBlock)
        self._la = 0 # Token type
        try:
            self.state = 1597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1583
                        self.alternativeBlockCase() 
                    self.state = 1588
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1589
                self.match(dafnyParser.T__7)
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1590
                    self.alternativeBlockCase()
                    self.state = 1595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1596
                self.match(dafnyParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlternativeBlockCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bindingGuard(self):
            return self.getTypedRuleContext(dafnyParser.BindingGuardContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.StmtContext)
            else:
                return self.getTypedRuleContext(dafnyParser.StmtContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_alternativeBlockCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlternativeBlockCase" ):
                listener.enterAlternativeBlockCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlternativeBlockCase" ):
                listener.exitAlternativeBlockCase(self)




    def alternativeBlockCase(self):

        localctx = dafnyParser.AlternativeBlockCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_alternativeBlockCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.match(dafnyParser.T__89)
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1600
                self.bindingGuard()
                pass

            elif la_ == 2:
                self.state = 1601
                self.expression()
                pass


            self.state = 1604
            self.match(dafnyParser.T__90)
            self.state = 1608
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1605
                    self.stmt() 
                self.state = 1610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSpec(self):
            return self.getTypedRuleContext(dafnyParser.LoopSpecContext,0)


        def alternativeBlock(self):
            return self.getTypedRuleContext(dafnyParser.AlternativeBlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(dafnyParser.GuardContext,0)


        def blockStmt(self):
            return self.getTypedRuleContext(dafnyParser.BlockStmtContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = dafnyParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.match(dafnyParser.T__91)
            self.state = 1621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1612
                self.loopSpec()
                self.state = 1613
                self.alternativeBlock()
                pass

            elif la_ == 2:
                self.state = 1615
                self.guard()
                self.state = 1616
                self.loopSpec()
                self.state = 1619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1617
                    self.blockStmt()
                    pass

                elif la_ == 2:
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identTypeOptional(self):
            return self.getTypedRuleContext(dafnyParser.IdentTypeOptionalContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def loopSpec(self):
            return self.getTypedRuleContext(dafnyParser.LoopSpecContext,0)


        def HavocRhs_(self):
            return self.getToken(dafnyParser.HavocRhs_, 0)

        def blockStmt(self):
            return self.getTypedRuleContext(dafnyParser.BlockStmtContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_forLoopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoopStmt" ):
                listener.enterForLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoopStmt" ):
                listener.exitForLoopStmt(self)




    def forLoopStmt(self):

        localctx = dafnyParser.ForLoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_forLoopStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(dafnyParser.T__92)
            self.state = 1624
            self.identTypeOptional()
            self.state = 1625
            self.match(dafnyParser.T__59)
            self.state = 1626
            self.expression()
            self.state = 1627
            _la = self._input.LA(1)
            if not(_la==94 or _la==95):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [157]:
                self.state = 1628
                self.match(dafnyParser.HavocRhs_)
                pass
            elif token in [3, 8, 28, 33, 35, 36, 37, 38, 40, 41, 43, 58, 84, 85, 86, 87, 88, 96, 98, 99, 101, 103, 111, 112, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 133, 141, 144, 145, 146, 148, 149]:
                self.state = 1629
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1632
            self.loopSpec()
            self.state = 1635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1633
                self.blockStmt()
                pass

            elif la_ == 2:
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def caseStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.CaseStmtContext)
            else:
                return self.getTypedRuleContext(dafnyParser.CaseStmtContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)




    def matchStmt(self):

        localctx = dafnyParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.match(dafnyParser.T__95)
            self.state = 1638
            self.expression()
            self.state = 1653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1639
                self.match(dafnyParser.T__7)
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1640
                    self.caseStmt()
                    self.state = 1645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1646
                self.match(dafnyParser.T__8)
                pass

            elif la_ == 2:
                self.state = 1650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1647
                        self.caseStmt() 
                    self.state = 1652
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extendedPattern(self):
            return self.getTypedRuleContext(dafnyParser.ExtendedPatternContext,0)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.StmtContext)
            else:
                return self.getTypedRuleContext(dafnyParser.StmtContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_caseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStmt" ):
                listener.enterCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStmt" ):
                listener.exitCaseStmt(self)




    def caseStmt(self):

        localctx = dafnyParser.CaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_caseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.match(dafnyParser.T__89)
            self.state = 1656
            self.extendedPattern()
            self.state = 1657
            self.match(dafnyParser.T__90)
            self.state = 1661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1658
                    self.stmt() 
                self.state = 1663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def blockStmt(self):
            return self.getTypedRuleContext(dafnyParser.BlockStmtContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def labelName(self):
            return self.getTypedRuleContext(dafnyParser.LabelNameContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_assertStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStmt" ):
                listener.enterAssertStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStmt" ):
                listener.exitAssertStmt(self)




    def assertStmt(self):

        localctx = dafnyParser.AssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_assertStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(dafnyParser.T__86)
            self.state = 1668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1665
                self.attribute()
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1671
                self.labelName()
                self.state = 1672
                self.match(dafnyParser.T__12)


            self.state = 1676
            self.expression()
            self.state = 1680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.state = 1677
                self.match(dafnyParser.SEMICOLON)
                pass
            elif token in [71]:
                self.state = 1678
                self.match(dafnyParser.T__70)
                self.state = 1679
                self.blockStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssumeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_assumeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssumeStmt" ):
                listener.enterAssumeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssumeStmt" ):
                listener.exitAssumeStmt(self)




    def assumeStmt(self):

        localctx = dafnyParser.AssumeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_assumeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.match(dafnyParser.T__83)
            self.state = 1686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1683
                self.attribute()
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1689
            self.expression()
            self.state = 1690
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_expectStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpectStmt" ):
                listener.enterExpectStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpectStmt" ):
                listener.exitExpectStmt(self)




    def expectStmt(self):

        localctx = dafnyParser.ExpectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_expectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(dafnyParser.T__85)
            self.state = 1696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1693
                self.attribute()
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1699
            self.expression()
            self.state = 1702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1700
                self.match(dafnyParser.T__14)
                self.state = 1701
                self.expression()


            self.state = 1704
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = dafnyParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.match(dafnyParser.T__96)
            self.state = 1707
            self.expression()
            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1708
                self.match(dafnyParser.T__14)
                self.state = 1709
                self.expression()
                self.state = 1714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1715
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevealStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_revealStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevealStmt" ):
                listener.enterRevealStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevealStmt" ):
                listener.exitRevealStmt(self)




    def revealStmt(self):

        localctx = dafnyParser.RevealStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_revealStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self.match(dafnyParser.T__97)
            self.state = 1718
            self.expression()
            self.state = 1723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1719
                self.match(dafnyParser.T__14)
                self.state = 1720
                self.expression()
                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1726
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ensuresClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.EnsuresClauseContext)
            else:
                return self.getTypedRuleContext(dafnyParser.EnsuresClauseContext,i)


        def blockStmt(self):
            return self.getTypedRuleContext(dafnyParser.BlockStmtContext,0)


        def quantifierDomain(self):
            return self.getTypedRuleContext(dafnyParser.QuantifierDomainContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_forallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForallStmt" ):
                listener.enterForallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForallStmt" ):
                listener.exitForallStmt(self)




    def forallStmt(self):

        localctx = dafnyParser.ForallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_forallStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.match(dafnyParser.T__98)
            self.state = 1735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.state = 1729
                self.match(dafnyParser.T__27)
                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133 or _la==141:
                    self.state = 1730
                    self.quantifierDomain()


                self.state = 1733
                self.match(dafnyParser.T__28)
                pass
            elif token in [133, 141]:
                self.state = 1734
                self.quantifierDomain()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 1737
                self.ensuresClause()
                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1743
                self.blockStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.FrameExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.FrameExpressionContext,i)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_modifyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifyStmt" ):
                listener.enterModifyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifyStmt" ):
                listener.exitModifyStmt(self)




    def modifyStmt(self):

        localctx = dafnyParser.ModifyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_modifyStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            self.match(dafnyParser.T__99)
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1747
                self.attribute()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1753
            self.frameExpression()
            self.state = 1758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1754
                self.match(dafnyParser.T__14)
                self.state = 1755
                self.frameExpression()
                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1761
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalcStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calcBody_(self):
            return self.getTypedRuleContext(dafnyParser.CalcBody_Context,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def calcOp(self):
            return self.getTypedRuleContext(dafnyParser.CalcOpContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_calcStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcStmt" ):
                listener.enterCalcStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcStmt" ):
                listener.exitCalcStmt(self)




    def calcStmt(self):

        localctx = dafnyParser.CalcStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_calcStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self.match(dafnyParser.T__100)
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1764
                self.attribute()
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1275068416) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 63) != 0):
                self.state = 1770
                self.calcOp()


            self.state = 1773
            self.match(dafnyParser.T__7)
            self.state = 1774
            self.calcBody_()
            self.state = 1775
            self.match(dafnyParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalcBody_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calcLine_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.CalcLine_Context)
            else:
                return self.getTypedRuleContext(dafnyParser.CalcLine_Context,i)


        def hints_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.Hints_Context)
            else:
                return self.getTypedRuleContext(dafnyParser.Hints_Context,i)


        def calcOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.CalcOpContext)
            else:
                return self.getTypedRuleContext(dafnyParser.CalcOpContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_calcBody_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcBody_" ):
                listener.enterCalcBody_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcBody_" ):
                listener.exitCalcBody_(self)




    def calcBody_(self):

        localctx = dafnyParser.CalcBody_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_calcBody_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                self.state = 1777
                self.calcLine_()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1275068416) != 0) or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 63) != 0):
                    self.state = 1778
                    self.calcOp()


                self.state = 1781
                self.hints_()
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalcLine_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_calcLine_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcLine_" ):
                listener.enterCalcLine_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcLine_" ):
                listener.exitCalcLine_(self)




    def calcLine_(self):

        localctx = dafnyParser.CalcLine_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_calcLine_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self.expression()
            self.state = 1789
            self.match(dafnyParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hints_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(dafnyParser.BlockStmtContext,i)


        def calcStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.CalcStmtContext)
            else:
                return self.getTypedRuleContext(dafnyParser.CalcStmtContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_hints_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHints_" ):
                listener.enterHints_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHints_" ):
                listener.exitHints_(self)




    def hints_(self):

        localctx = dafnyParser.Hints_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_hints_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1793
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [8]:
                        self.state = 1791
                        self.blockStmt()
                        pass
                    elif token in [101]:
                        self.state = 1792
                        self.calcStmt()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalcOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_calcOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcOp" ):
                listener.enterCalcOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcOp" ):
                listener.exitCalcOp(self)




    def calcOp(self):

        localctx = dafnyParser.CalcOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_calcOp)
        self._la = 0 # Token type
        try:
            self.state = 1814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1798
                self.match(dafnyParser.T__29)
                self.state = 1804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 1799
                    self.match(dafnyParser.T__101)
                    self.state = 1800
                    self.match(dafnyParser.T__102)
                    self.state = 1801
                    self.expression()
                    self.state = 1802
                    self.match(dafnyParser.T__103)


                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1806
                self.match(dafnyParser.T__25)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1807
                self.match(dafnyParser.T__26)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1808
                self.match(dafnyParser.T__104)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1809
                self.match(dafnyParser.T__105)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1810
                self.match(dafnyParser.T__106)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1811
                self.match(dafnyParser.T__107)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1812
                self.match(dafnyParser.T__108)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1813
                self.match(dafnyParser.T__109)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equivExpression(self):
            return self.getTypedRuleContext(dafnyParser.EquivExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = dafnyParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.equivExpression()
            self.state = 1819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1817
                self.match(dafnyParser.SEMICOLON)
                self.state = 1818
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EquivExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def impliesExpliesExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ImpliesExpliesExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ImpliesExpliesExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_equivExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquivExpression" ):
                listener.enterEquivExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquivExpression" ):
                listener.exitEquivExpression(self)




    def equivExpression(self):

        localctx = dafnyParser.EquivExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_equivExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.impliesExpliesExpression()
            self.state = 1826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1822
                    self.match(dafnyParser.T__107)
                    self.state = 1823
                    self.impliesExpliesExpression() 
                self.state = 1828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImpliesExpliesExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.LogicalExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.LogicalExpressionContext,i)


        def impliesExpression(self):
            return self.getTypedRuleContext(dafnyParser.ImpliesExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_impliesExpliesExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImpliesExpliesExpression" ):
                listener.enterImpliesExpliesExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImpliesExpliesExpression" ):
                listener.exitImpliesExpliesExpression(self)




    def impliesExpliesExpression(self):

        localctx = dafnyParser.ImpliesExpliesExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_impliesExpliesExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.logicalExpression()
            self.state = 1841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1830
                self.match(dafnyParser.T__108)
                self.state = 1831
                self.impliesExpression()

            elif la_ == 2:
                self.state = 1832
                self.match(dafnyParser.T__109)
                self.state = 1833
                self.logicalExpression()
                self.state = 1838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1834
                        self.match(dafnyParser.T__109)
                        self.state = 1835
                        self.logicalExpression() 
                    self.state = 1840
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImpliesExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalExpression(self):
            return self.getTypedRuleContext(dafnyParser.LogicalExpressionContext,0)


        def impliesExpression(self):
            return self.getTypedRuleContext(dafnyParser.ImpliesExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_impliesExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImpliesExpression" ):
                listener.enterImpliesExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImpliesExpression" ):
                listener.exitImpliesExpression(self)




    def impliesExpression(self):

        localctx = dafnyParser.ImpliesExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_impliesExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.logicalExpression()
            self.state = 1846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1844
                self.match(dafnyParser.T__108)
                self.state = 1845
                self.impliesExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RelationalExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_logicalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)




    def logicalExpression(self):

        localctx = dafnyParser.LogicalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_logicalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111 or _la==112:
                self.state = 1848
                _la = self._input.LA(1)
                if not(_la==111 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1851
            self.relationalExpression()
            self.state = 1856
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1852
                    _la = self._input.LA(1)
                    if not(_la==111 or _la==112):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1853
                    self.relationalExpression() 
                self.state = 1858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ShiftTermContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ShiftTermContext,i)


        def relOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.RelOpContext)
            else:
                return self.getTypedRuleContext(dafnyParser.RelOpContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = dafnyParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_relationalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.shiftTerm()
            self.state = 1865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1860
                    self.relOp()
                    self.state = 1861
                    self.shiftTerm() 
                self.state = 1867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_relOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelOp" ):
                listener.enterRelOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelOp" ):
                listener.exitRelOp(self)




    def relOp(self):

        localctx = dafnyParser.RelOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_relOp)
        self._la = 0 # Token type
        try:
            self.state = 1891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1868
                self.match(dafnyParser.T__29)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 1869
                    self.match(dafnyParser.T__101)
                    self.state = 1870
                    self.match(dafnyParser.T__102)
                    self.state = 1871
                    self.expression()
                    self.state = 1872
                    self.match(dafnyParser.T__103)


                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1876
                self.match(dafnyParser.T__104)
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 1877
                    self.match(dafnyParser.T__101)
                    self.state = 1878
                    self.match(dafnyParser.T__102)
                    self.state = 1879
                    self.expression()
                    self.state = 1880
                    self.match(dafnyParser.T__103)


                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1884
                self.match(dafnyParser.T__25)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1885
                self.match(dafnyParser.T__26)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1886
                self.match(dafnyParser.T__105)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1887
                self.match(dafnyParser.T__106)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1888
                self.match(dafnyParser.T__112)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1889
                self.match(dafnyParser.T__113)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1890
                self.match(dafnyParser.T__114)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TermContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TermContext,i)


        def ShiftOp(self, i:int=None):
            if i is None:
                return self.getTokens(dafnyParser.ShiftOp)
            else:
                return self.getToken(dafnyParser.ShiftOp, i)

        def getRuleIndex(self):
            return dafnyParser.RULE_shiftTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftTerm" ):
                listener.enterShiftTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftTerm" ):
                listener.exitShiftTerm(self)




    def shiftTerm(self):

        localctx = dafnyParser.ShiftTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_shiftTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893
            self.term()
            self.state = 1898
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1894
                    self.match(dafnyParser.ShiftOp)
                    self.state = 1895
                    self.term() 
                self.state = 1900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.FactorContext)
            else:
                return self.getTypedRuleContext(dafnyParser.FactorContext,i)


        def AddOp(self, i:int=None):
            if i is None:
                return self.getTokens(dafnyParser.AddOp)
            else:
                return self.getToken(dafnyParser.AddOp, i)

        def getRuleIndex(self):
            return dafnyParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = dafnyParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_term)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.factor()
            self.state = 1906
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1902
                    self.match(dafnyParser.AddOp)
                    self.state = 1903
                    self.factor() 
                self.state = 1908
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitvectorFactor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.BitvectorFactorContext)
            else:
                return self.getTypedRuleContext(dafnyParser.BitvectorFactorContext,i)


        def MulOp(self, i:int=None):
            if i is None:
                return self.getTokens(dafnyParser.MulOp)
            else:
                return self.getToken(dafnyParser.MulOp, i)

        def getRuleIndex(self):
            return dafnyParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = dafnyParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_factor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.bitvectorFactor()
            self.state = 1914
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1910
                    self.match(dafnyParser.MulOp)
                    self.state = 1911
                    self.bitvectorFactor() 
                self.state = 1916
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitvectorFactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AsExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AsExpressionContext,i)


        def BVOp(self, i:int=None):
            if i is None:
                return self.getTokens(dafnyParser.BVOp)
            else:
                return self.getToken(dafnyParser.BVOp, i)

        def getRuleIndex(self):
            return dafnyParser.RULE_bitvectorFactor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitvectorFactor" ):
                listener.enterBitvectorFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitvectorFactor" ):
                listener.exitBitvectorFactor(self)




    def bitvectorFactor(self):

        localctx = dafnyParser.BitvectorFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_bitvectorFactor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1917
            self.asExpression()
            self.state = 1922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1918
                    self.match(dafnyParser.BVOp)
                    self.state = 1919
                    self.asExpression() 
                self.state = 1924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(dafnyParser.UnaryExpressionContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_asExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsExpression" ):
                listener.enterAsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsExpression" ):
                listener.exitAsExpression(self)




    def asExpression(self):

        localctx = dafnyParser.AsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_asExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self.unaryExpression()
            self.state = 1930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1926
                    _la = self._input.LA(1)
                    if not(_la==116 or _la==117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1927
                    self.type_() 
                self.state = 1932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(dafnyParser.UnaryExpressionContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(dafnyParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = dafnyParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_unaryExpression)
        try:
            self.state = 1938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1933
                self.match(dafnyParser.T__117)
                self.state = 1934
                self.unaryExpression()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1935
                self.match(dafnyParser.T__32)
                self.state = 1936
                self.unaryExpression()
                pass
            elif token in [3, 8, 28, 35, 36, 37, 38, 40, 41, 43, 58, 84, 85, 86, 87, 88, 96, 98, 99, 101, 103, 119, 120, 121, 122, 123, 125, 126, 127, 129, 133, 141, 144, 145, 146, 148, 149]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1937
                self.primaryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameSegment(self):
            return self.getTypedRuleContext(dafnyParser.NameSegmentContext,0)


        def suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.SuffixContext)
            else:
                return self.getTypedRuleContext(dafnyParser.SuffixContext,i)


        def lambdaExpression(self):
            return self.getTypedRuleContext(dafnyParser.LambdaExpressionContext,0)


        def mapDisplayExpr(self):
            return self.getTypedRuleContext(dafnyParser.MapDisplayExprContext,0)


        def seqDisplayExpr(self):
            return self.getTypedRuleContext(dafnyParser.SeqDisplayExprContext,0)


        def setDisplayExpr(self):
            return self.getTypedRuleContext(dafnyParser.SetDisplayExprContext,0)


        def endlessExpression(self):
            return self.getTypedRuleContext(dafnyParser.EndlessExpressionContext,0)


        def constAtomExpression(self):
            return self.getTypedRuleContext(dafnyParser.ConstAtomExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = dafnyParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_primaryExpression)
        try:
            self.state = 1977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                self.nameSegment()
                self.state = 1944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1941
                        self.suffix() 
                    self.state = 1946
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1947
                self.lambdaExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1948
                self.mapDisplayExpr()
                self.state = 1952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1949
                        self.suffix() 
                    self.state = 1954
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1955
                self.seqDisplayExpr()
                self.state = 1959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1956
                        self.suffix() 
                    self.state = 1961
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1962
                self.setDisplayExpr()
                self.state = 1966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1963
                        self.suffix() 
                    self.state = 1968
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1969
                self.endlessExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1970
                self.constAtomExpression()
                self.state = 1974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1971
                        self.suffix() 
                    self.state = 1976
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaSpec(self):
            return self.getTypedRuleContext(dafnyParser.LambdaSpecContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def wildIdent(self):
            return self.getTypedRuleContext(dafnyParser.WildIdentContext,0)


        def identTypeOptional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.IdentTypeOptionalContext)
            else:
                return self.getTypedRuleContext(dafnyParser.IdentTypeOptionalContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = dafnyParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_lambdaExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133, 141]:
                self.state = 1979
                self.wildIdent()
                pass
            elif token in [28]:
                self.state = 1980
                self.match(dafnyParser.T__27)
                self.state = 1989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133 or _la==141:
                    self.state = 1981
                    self.identTypeOptional()
                    self.state = 1986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1982
                        self.match(dafnyParser.T__14)
                        self.state = 1983
                        self.identTypeOptional()
                        self.state = 1988
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1991
                self.match(dafnyParser.T__28)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1994
            self.lambdaSpec()
            self.state = 1995
            self.match(dafnyParser.T__90)
            self.state = 1996
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameSegment(self):
            return self.getTypedRuleContext(dafnyParser.NameSegmentContext,0)


        def suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.SuffixContext)
            else:
                return self.getTypedRuleContext(dafnyParser.SuffixContext,i)


        def constAtomExpression(self):
            return self.getTypedRuleContext(dafnyParser.ConstAtomExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_lhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLhs" ):
                listener.enterLhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLhs" ):
                listener.exitLhs(self)




    def lhs(self):

        localctx = dafnyParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_lhs)
        self._la = 0 # Token type
        try:
            self.state = 2013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1998
                self.nameSegment()
                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==20 or _la==28 or _la==103:
                    self.state = 1999
                    self.suffix()
                    self.state = 2004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [28, 43, 119, 120, 121, 122, 123, 125, 126, 127, 144, 145, 146, 148, 149]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2005
                self.constAtomExpression()
                self.state = 2006
                self.suffix()
                self.state = 2010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==20 or _la==28 or _la==103:
                    self.state = 2007
                    self.suffix()
                    self.state = 2012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayAllocation_(self):
            return self.getTypedRuleContext(dafnyParser.ArrayAllocation_Context,0)


        def objectAllocation_(self):
            return self.getTypedRuleContext(dafnyParser.ObjectAllocation_Context,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def HavocRhs_(self):
            return self.getToken(dafnyParser.HavocRhs_, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_rhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRhs" ):
                listener.enterRhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRhs" ):
                listener.exitRhs(self)




    def rhs(self):

        localctx = dafnyParser.RhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_rhs)
        self._la = 0 # Token type
        try:
            self.state = 2025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2015
                self.arrayAllocation_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2016
                self.objectAllocation_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2017
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2018
                self.match(dafnyParser.HavocRhs_)
                self.state = 2022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==136:
                    self.state = 2019
                    self.attribute()
                    self.state = 2024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAllocation_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def expressions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionsContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionsContext,i)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_arrayAllocation_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAllocation_" ):
                listener.enterArrayAllocation_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAllocation_" ):
                listener.exitArrayAllocation_(self)




    def arrayAllocation_(self):

        localctx = dafnyParser.ArrayAllocation_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_arrayAllocation_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.match(dafnyParser.T__33)
            self.state = 2029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1728397984137216) != 0) or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 7) != 0):
                self.state = 2028
                self.type_()


            self.state = 2031
            self.match(dafnyParser.T__102)
            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                self.state = 2032
                self.expressions()


            self.state = 2035
            self.match(dafnyParser.T__103)
            self.state = 2045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.state = 2036
                self.match(dafnyParser.T__27)
                self.state = 2037
                self.expression()
                self.state = 2038
                self.match(dafnyParser.T__28)
                pass
            elif token in [103]:
                self.state = 2040
                self.match(dafnyParser.T__102)
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                    self.state = 2041
                    self.expressions()


                self.state = 2044
                self.match(dafnyParser.T__103)
                pass
            elif token in [15, 139]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualBindingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actualBinding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ActualBindingContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ActualBindingContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_actualBindings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualBindings" ):
                listener.enterActualBindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualBindings" ):
                listener.exitActualBindings(self)




    def actualBindings(self):

        localctx = dafnyParser.ActualBindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_actualBindings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            self.actualBinding()
            self.state = 2052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2048
                self.match(dafnyParser.T__14)
                self.state = 2049
                self.actualBinding()
                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_actualBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualBinding" ):
                listener.enterActualBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualBinding" ):
                listener.exitActualBinding(self)




    def actualBinding(self):

        localctx = dafnyParser.ActualBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_actualBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 2055
                self.noUSIdentOrDigits()
                self.state = 2056
                self.match(dafnyParser.T__59)


            self.state = 2060
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectAllocation_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def typeNameOrCtorSuffix(self):
            return self.getTypedRuleContext(dafnyParser.TypeNameOrCtorSuffixContext,0)


        def actualBindings(self):
            return self.getTypedRuleContext(dafnyParser.ActualBindingsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_objectAllocation_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectAllocation_" ):
                listener.enterObjectAllocation_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectAllocation_" ):
                listener.exitObjectAllocation_(self)




    def objectAllocation_(self):

        localctx = dafnyParser.ObjectAllocation_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_objectAllocation_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.match(dafnyParser.T__33)
            self.state = 2063
            self.type_()
            self.state = 2066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2064
                self.match(dafnyParser.T__19)
                self.state = 2065
                self.typeNameOrCtorSuffix()


            self.state = 2073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 2068
                self.match(dafnyParser.T__27)
                self.state = 2070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                    self.state = 2069
                    self.actualBindings()


                self.state = 2072
                self.match(dafnyParser.T__28)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstAtomExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalExpression(self):
            return self.getTypedRuleContext(dafnyParser.LiteralExpressionContext,0)


        def thisExpression_(self):
            return self.getTypedRuleContext(dafnyParser.ThisExpression_Context,0)


        def freshExpression_(self):
            return self.getTypedRuleContext(dafnyParser.FreshExpression_Context,0)


        def allocatedExpression_(self):
            return self.getTypedRuleContext(dafnyParser.AllocatedExpression_Context,0)


        def unchangedExpression_(self):
            return self.getTypedRuleContext(dafnyParser.UnchangedExpression_Context,0)


        def oldExpression_(self):
            return self.getTypedRuleContext(dafnyParser.OldExpression_Context,0)


        def cardinalityExpression_(self):
            return self.getTypedRuleContext(dafnyParser.CardinalityExpression_Context,0)


        def parensExpression(self):
            return self.getTypedRuleContext(dafnyParser.ParensExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_constAtomExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstAtomExpression" ):
                listener.enterConstAtomExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstAtomExpression" ):
                listener.exitConstAtomExpression(self)




    def constAtomExpression(self):

        localctx = dafnyParser.ConstAtomExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_constAtomExpression)
        try:
            self.state = 2083
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119, 120, 121, 144, 145, 146, 148, 149]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2075
                self.literalExpression()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2076
                self.thisExpression_()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2077
                self.freshExpression_()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2078
                self.allocatedExpression_()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2079
                self.unchangedExpression_()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2080
                self.oldExpression_()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2081
                self.cardinalityExpression_()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2082
                self.parensExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nat(self):
            return self.getTypedRuleContext(dafnyParser.NatContext,0)


        def dec(self):
            return self.getTypedRuleContext(dafnyParser.DecContext,0)


        def CHARTOKEN(self):
            return self.getToken(dafnyParser.CHARTOKEN, 0)

        def STRINGTOKEN(self):
            return self.getToken(dafnyParser.STRINGTOKEN, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)




    def literalExpression(self):

        localctx = dafnyParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_literalExpression)
        try:
            self.state = 2092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2085
                self.match(dafnyParser.T__118)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2086
                self.match(dafnyParser.T__119)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2087
                self.match(dafnyParser.T__120)
                pass
            elif token in [144, 145]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2088
                self.nat()
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2089
                self.dec()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2090
                self.match(dafnyParser.CHARTOKEN)
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2091
                self.match(dafnyParser.STRINGTOKEN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(dafnyParser.DIGITS, 0)

        def HEXDIGITS(self):
            return self.getToken(dafnyParser.HEXDIGITS, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_nat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNat" ):
                listener.enterNat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNat" ):
                listener.exitNat(self)




    def nat(self):

        localctx = dafnyParser.NatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_nat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            _la = self._input.LA(1)
            if not(_la==144 or _la==145):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMALDIGITS(self):
            return self.getToken(dafnyParser.DECIMALDIGITS, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDec" ):
                listener.enterDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDec" ):
                listener.exitDec(self)




    def dec(self):

        localctx = dafnyParser.DecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2096
            self.match(dafnyParser.DECIMALDIGITS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThisExpression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return dafnyParser.RULE_thisExpression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression_" ):
                listener.enterThisExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression_" ):
                listener.exitThisExpression_(self)




    def thisExpression_(self):

        localctx = dafnyParser.ThisExpression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_thisExpression_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            self.match(dafnyParser.T__121)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OldExpression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def labelName(self):
            return self.getTypedRuleContext(dafnyParser.LabelNameContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_oldExpression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOldExpression_" ):
                listener.enterOldExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOldExpression_" ):
                listener.exitOldExpression_(self)




    def oldExpression_(self):

        localctx = dafnyParser.OldExpression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oldExpression_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2100
            self.match(dafnyParser.T__122)
            self.state = 2103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 2101
                self.match(dafnyParser.T__123)
                self.state = 2102
                self.labelName()


            self.state = 2105
            self.match(dafnyParser.T__27)
            self.state = 2106
            self.expression()
            self.state = 2107
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FreshExpression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def labelName(self):
            return self.getTypedRuleContext(dafnyParser.LabelNameContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_freshExpression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreshExpression_" ):
                listener.enterFreshExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreshExpression_" ):
                listener.exitFreshExpression_(self)




    def freshExpression_(self):

        localctx = dafnyParser.FreshExpression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_freshExpression_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.match(dafnyParser.T__124)
            self.state = 2112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 2110
                self.match(dafnyParser.T__123)
                self.state = 2111
                self.labelName()


            self.state = 2114
            self.match(dafnyParser.T__27)
            self.state = 2115
            self.expression()
            self.state = 2116
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocatedExpression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_allocatedExpression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocatedExpression_" ):
                listener.enterAllocatedExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocatedExpression_" ):
                listener.exitAllocatedExpression_(self)




    def allocatedExpression_(self):

        localctx = dafnyParser.AllocatedExpression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_allocatedExpression_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.match(dafnyParser.T__125)
            self.state = 2119
            self.match(dafnyParser.T__27)
            self.state = 2120
            self.expression()
            self.state = 2121
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnchangedExpression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.FrameExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.FrameExpressionContext,i)


        def labelName(self):
            return self.getTypedRuleContext(dafnyParser.LabelNameContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_unchangedExpression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnchangedExpression_" ):
                listener.enterUnchangedExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnchangedExpression_" ):
                listener.exitUnchangedExpression_(self)




    def unchangedExpression_(self):

        localctx = dafnyParser.UnchangedExpression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_unchangedExpression_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.match(dafnyParser.T__126)
            self.state = 2126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 2124
                self.match(dafnyParser.T__123)
                self.state = 2125
                self.labelName()


            self.state = 2128
            self.match(dafnyParser.T__27)
            self.state = 2129
            self.frameExpression()
            self.state = 2134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2130
                self.match(dafnyParser.T__14)
                self.state = 2131
                self.frameExpression()
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2137
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CardinalityExpression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_cardinalityExpression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCardinalityExpression_" ):
                listener.enterCardinalityExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCardinalityExpression_" ):
                listener.exitCardinalityExpression_(self)




    def cardinalityExpression_(self):

        localctx = dafnyParser.CardinalityExpression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_cardinalityExpression_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.match(dafnyParser.T__42)
            self.state = 2140
            self.expression()
            self.state = 2141
            self.match(dafnyParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParensExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleArgs(self):
            return self.getTypedRuleContext(dafnyParser.TupleArgsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_parensExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParensExpression" ):
                listener.enterParensExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParensExpression" ):
                listener.exitParensExpression(self)




    def parensExpression(self):

        localctx = dafnyParser.ParensExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_parensExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.match(dafnyParser.T__27)
            self.state = 2145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                self.state = 2144
                self.tupleArgs()


            self.state = 2147
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actualBinding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ActualBindingContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ActualBindingContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_tupleArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleArgs" ):
                listener.enterTupleArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleArgs" ):
                listener.exitTupleArgs(self)




    def tupleArgs(self):

        localctx = dafnyParser.TupleArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_tupleArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 2149
                self.match(dafnyParser.T__2)


            self.state = 2152
            self.actualBinding()
            self.state = 2160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2153
                self.match(dafnyParser.T__14)
                self.state = 2155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 2154
                    self.match(dafnyParser.T__2)


                self.state = 2157
                self.actualBinding()
                self.state = 2162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeqDisplayExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionsContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_seqDisplayExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeqDisplayExpr" ):
                listener.enterSeqDisplayExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeqDisplayExpr" ):
                listener.exitSeqDisplayExpr(self)




    def seqDisplayExpr(self):

        localctx = dafnyParser.SeqDisplayExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_seqDisplayExpr)
        self._la = 0 # Token type
        try:
            self.state = 2178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.match(dafnyParser.T__102)
                self.state = 2165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                    self.state = 2164
                    self.expressions()


                self.state = 2167
                self.match(dafnyParser.T__103)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2168
                self.match(dafnyParser.T__37)
                self.state = 2170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 2169
                    self.genericInstantiation()


                self.state = 2172
                self.match(dafnyParser.T__27)
                self.state = 2173
                self.expression()
                self.state = 2174
                self.match(dafnyParser.T__14)
                self.state = 2175
                self.expression()
                self.state = 2176
                self.match(dafnyParser.T__28)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetDisplayExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionsContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_setDisplayExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDisplayExpr" ):
                listener.enterSetDisplayExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDisplayExpr" ):
                listener.exitSetDisplayExpr(self)




    def setDisplayExpr(self):

        localctx = dafnyParser.SetDisplayExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_setDisplayExpr)
        self._la = 0 # Token type
        try:
            self.state = 2193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36 or _la==37:
                    self.state = 2180
                    _la = self._input.LA(1)
                    if not(_la==36 or _la==37):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2183
                self.match(dafnyParser.T__7)
                self.state = 2185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                    self.state = 2184
                    self.expressions()


                self.state = 2187
                self.match(dafnyParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2188
                self.match(dafnyParser.T__36)
                self.state = 2189
                self.match(dafnyParser.T__27)
                self.state = 2190
                self.expression()
                self.state = 2191
                self.match(dafnyParser.T__28)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapDisplayExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapLiteralExpressions(self):
            return self.getTypedRuleContext(dafnyParser.MapLiteralExpressionsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_mapDisplayExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapDisplayExpr" ):
                listener.enterMapDisplayExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapDisplayExpr" ):
                listener.exitMapDisplayExpr(self)




    def mapDisplayExpr(self):

        localctx = dafnyParser.MapDisplayExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_mapDisplayExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2195
            _la = self._input.LA(1)
            if not(_la==40 or _la==41):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2196
            self.match(dafnyParser.T__102)

            self.state = 2197
            self.mapLiteralExpressions()
            self.state = 2198
            self.match(dafnyParser.T__103)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapLiteralExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_mapLiteralExpressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapLiteralExpressions" ):
                listener.enterMapLiteralExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapLiteralExpressions" ):
                listener.exitMapLiteralExpressions(self)




    def mapLiteralExpressions(self):

        localctx = dafnyParser.MapLiteralExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_mapLiteralExpressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            self.expression()
            self.state = 2201
            self.match(dafnyParser.T__59)
            self.state = 2202
            self.expression()
            self.state = 2210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2203
                self.match(dafnyParser.T__14)
                self.state = 2204
                self.expression()
                self.state = 2205
                self.match(dafnyParser.T__59)
                self.state = 2206
                self.expression()
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndlessExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpression(self):
            return self.getTypedRuleContext(dafnyParser.IfExpressionContext,0)


        def matchExpression(self):
            return self.getTypedRuleContext(dafnyParser.MatchExpressionContext,0)


        def quantifierExpression(self):
            return self.getTypedRuleContext(dafnyParser.QuantifierExpressionContext,0)


        def setComprehensionExpr(self):
            return self.getTypedRuleContext(dafnyParser.SetComprehensionExprContext,0)


        def stmtInExpr(self):
            return self.getTypedRuleContext(dafnyParser.StmtInExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def letExpression(self):
            return self.getTypedRuleContext(dafnyParser.LetExpressionContext,0)


        def mapComprehensionExpr(self):
            return self.getTypedRuleContext(dafnyParser.MapComprehensionExprContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_endlessExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndlessExpression" ):
                listener.enterEndlessExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndlessExpression" ):
                listener.exitEndlessExpression(self)




    def endlessExpression(self):

        localctx = dafnyParser.EndlessExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_endlessExpression)
        try:
            self.state = 2222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2213
                self.ifExpression()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2214
                self.matchExpression()
                pass
            elif token in [99, 129]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2215
                self.quantifierExpression()
                pass
            elif token in [35, 36, 133, 141]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2216
                self.setComprehensionExpr()
                pass
            elif token in [84, 86, 87, 98, 101]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2217
                self.stmtInExpr()
                self.state = 2218
                self.expression()
                pass
            elif token in [3, 58, 85]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2220
                self.letExpression()
                pass
            elif token in [40, 41]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2221
                self.mapComprehensionExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def bindingGuard(self):
            return self.getTypedRuleContext(dafnyParser.BindingGuardContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)




    def ifExpression(self):

        localctx = dafnyParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_ifExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.match(dafnyParser.T__87)
            self.state = 2227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 2225
                self.bindingGuard()
                pass

            elif la_ == 2:
                self.state = 2226
                self.expression()
                pass


            self.state = 2229
            self.match(dafnyParser.T__127)
            self.state = 2230
            self.expression()
            self.state = 2231
            self.match(dafnyParser.T__88)
            self.state = 2232
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def caseExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.CaseExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.CaseExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_matchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchExpression" ):
                listener.enterMatchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchExpression" ):
                listener.exitMatchExpression(self)




    def matchExpression(self):

        localctx = dafnyParser.MatchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_matchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2234
            self.match(dafnyParser.T__95)
            self.state = 2235
            self.expression()
            self.state = 2250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 2236
                self.match(dafnyParser.T__7)
                self.state = 2240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 2237
                    self.caseExpression()
                    self.state = 2242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2243
                self.match(dafnyParser.T__8)
                pass

            elif la_ == 2:
                self.state = 2247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2244
                        self.caseExpression() 
                    self.state = 2249
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extendedPattern(self):
            return self.getTypedRuleContext(dafnyParser.ExtendedPatternContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_caseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpression" ):
                listener.enterCaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpression" ):
                listener.exitCaseExpression(self)




    def caseExpression(self):

        localctx = dafnyParser.CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_caseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2252
            self.match(dafnyParser.T__89)
            self.state = 2256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 2253
                self.attribute()
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2259
            self.extendedPattern()
            self.state = 2260
            self.match(dafnyParser.T__90)
            self.state = 2261
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CasePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identTypeOptional(self):
            return self.getTypedRuleContext(dafnyParser.IdentTypeOptionalContext,0)


        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def casePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.CasePatternContext)
            else:
                return self.getTypedRuleContext(dafnyParser.CasePatternContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_casePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasePattern" ):
                listener.enterCasePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasePattern" ):
                listener.exitCasePattern(self)




    def casePattern(self):

        localctx = dafnyParser.CasePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_casePattern)
        self._la = 0 # Token type
        try:
            self.state = 2279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2263
                self.identTypeOptional()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 2264
                    self.match(dafnyParser.IDENT)


                self.state = 2267
                self.match(dafnyParser.T__27)
                self.state = 2276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28 or _la==133 or _la==141:
                    self.state = 2268
                    self.casePattern()
                    self.state = 2273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 2269
                        self.match(dafnyParser.T__14)
                        self.state = 2270
                        self.casePattern()
                        self.state = 2275
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2278
                self.match(dafnyParser.T__28)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExtendedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def possiblyNegatedLiteralExpression(self):
            return self.getTypedRuleContext(dafnyParser.PossiblyNegatedLiteralExpressionContext,0)


        def identTypeOptional(self):
            return self.getTypedRuleContext(dafnyParser.IdentTypeOptionalContext,0)


        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def singleExtendedPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.SingleExtendedPatternContext)
            else:
                return self.getTypedRuleContext(dafnyParser.SingleExtendedPatternContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_singleExtendedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExtendedPattern" ):
                listener.enterSingleExtendedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExtendedPattern" ):
                listener.exitSingleExtendedPattern(self)




    def singleExtendedPattern(self):

        localctx = dafnyParser.SingleExtendedPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_singleExtendedPattern)
        self._la = 0 # Token type
        try:
            self.state = 2298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2281
                self.possiblyNegatedLiteralExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2282
                self.identTypeOptional()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 2283
                    self.match(dafnyParser.IDENT)


                self.state = 2286
                self.match(dafnyParser.T__27)
                self.state = 2295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28 or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 3699408911) != 0):
                    self.state = 2287
                    self.singleExtendedPattern()
                    self.state = 2292
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 2288
                        self.match(dafnyParser.T__14)
                        self.state = 2289
                        self.singleExtendedPattern()
                        self.state = 2294
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2297
                self.match(dafnyParser.T__28)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExtendedPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.SingleExtendedPatternContext)
            else:
                return self.getTypedRuleContext(dafnyParser.SingleExtendedPatternContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_extendedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedPattern" ):
                listener.enterExtendedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedPattern" ):
                listener.exitExtendedPattern(self)




    def extendedPattern(self):

        localctx = dafnyParser.ExtendedPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_extendedPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 2300
                self.match(dafnyParser.T__42)


            self.state = 2303
            self.singleExtendedPattern()
            self.state = 2308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 2304
                self.match(dafnyParser.T__42)
                self.state = 2305
                self.singleExtendedPattern()
                self.state = 2310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PossiblyNegatedLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nat(self):
            return self.getTypedRuleContext(dafnyParser.NatContext,0)


        def dec(self):
            return self.getTypedRuleContext(dafnyParser.DecContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(dafnyParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_possiblyNegatedLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPossiblyNegatedLiteralExpression" ):
                listener.enterPossiblyNegatedLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPossiblyNegatedLiteralExpression" ):
                listener.exitPossiblyNegatedLiteralExpression(self)




    def possiblyNegatedLiteralExpression(self):

        localctx = dafnyParser.PossiblyNegatedLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_possiblyNegatedLiteralExpression)
        try:
            self.state = 2317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2311
                self.match(dafnyParser.T__117)
                self.state = 2314
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [144, 145]:
                    self.state = 2312
                    self.nat()
                    pass
                elif token in [146]:
                    self.state = 2313
                    self.dec()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [119, 120, 121, 144, 145, 146, 148, 149]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2316
                self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantifierDomain(self):
            return self.getTypedRuleContext(dafnyParser.QuantifierDomainContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_quantifierExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifierExpression" ):
                listener.enterQuantifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifierExpression" ):
                listener.exitQuantifierExpression(self)




    def quantifierExpression(self):

        localctx = dafnyParser.QuantifierExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_quantifierExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            _la = self._input.LA(1)
            if not(_la==99 or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2320
            self.quantifierDomain()
            self.state = 2321
            self.match(dafnyParser.T__129)
            self.state = 2322
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetComprehensionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantifierDomain(self):
            return self.getTypedRuleContext(dafnyParser.QuantifierDomainContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_setComprehensionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetComprehensionExpr" ):
                listener.enterSetComprehensionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetComprehensionExpr" ):
                listener.exitSetComprehensionExpr(self)




    def setComprehensionExpr(self):

        localctx = dafnyParser.SetComprehensionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_setComprehensionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==36:
                self.state = 2324
                _la = self._input.LA(1)
                if not(_la==35 or _la==36):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2327
            self.quantifierDomain()
            self.state = 2330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2328
                self.match(dafnyParser.T__129)
                self.state = 2329
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapComprehensionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantifierDomain(self):
            return self.getTypedRuleContext(dafnyParser.QuantifierDomainContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_mapComprehensionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapComprehensionExpr" ):
                listener.enterMapComprehensionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapComprehensionExpr" ):
                listener.exitMapComprehensionExpr(self)




    def mapComprehensionExpr(self):

        localctx = dafnyParser.MapComprehensionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_mapComprehensionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            _la = self._input.LA(1)
            if not(_la==40 or _la==41):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2333
            self.quantifierDomain()
            self.state = 2334
            self.match(dafnyParser.T__129)
            self.state = 2335
            self.expression()
            self.state = 2338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2336
                self.match(dafnyParser.T__59)
                self.state = 2337
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtInExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assertStmt(self):
            return self.getTypedRuleContext(dafnyParser.AssertStmtContext,0)


        def assumeStmt(self):
            return self.getTypedRuleContext(dafnyParser.AssumeStmtContext,0)


        def expectStmt(self):
            return self.getTypedRuleContext(dafnyParser.ExpectStmtContext,0)


        def revealStmt(self):
            return self.getTypedRuleContext(dafnyParser.RevealStmtContext,0)


        def calcStmt(self):
            return self.getTypedRuleContext(dafnyParser.CalcStmtContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_stmtInExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmtInExpr" ):
                listener.enterStmtInExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmtInExpr" ):
                listener.exitStmtInExpr(self)




    def stmtInExpr(self):

        localctx = dafnyParser.StmtInExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_stmtInExpr)
        try:
            self.state = 2345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2340
                self.assertStmt()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2341
                self.assumeStmt()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2342
                self.expectStmt()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2343
                self.revealStmt()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2344
                self.calcStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(dafnyParser.SEMICOLON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def casePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.CasePatternContext)
            else:
                return self.getTypedRuleContext(dafnyParser.CasePatternContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_letExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetExpression" ):
                listener.enterLetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetExpression" ):
                listener.exitLetExpression(self)




    def letExpression(self):

        localctx = dafnyParser.LetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_letExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 58]:
                self.state = 2348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 2347
                    self.match(dafnyParser.T__2)


                self.state = 2350
                self.match(dafnyParser.T__57)
                self.state = 2351
                self.casePattern()
                self.state = 2356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2352
                    self.match(dafnyParser.T__14)
                    self.state = 2353
                    self.casePattern()
                    self.state = 2358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2368
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 2359
                    self.match(dafnyParser.T__59)
                    pass
                elif token in [85]:
                    self.state = 2360
                    self.match(dafnyParser.T__84)
                    pass
                elif token in [83, 136]:
                    self.state = 2364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==136:
                        self.state = 2361
                        self.attribute()
                        self.state = 2366
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2367
                    self.match(dafnyParser.T__82)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2370
                self.expression()
                self.state = 2375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2371
                    self.match(dafnyParser.T__14)
                    self.state = 2372
                    self.expression()
                    self.state = 2377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [85]:
                self.state = 2378
                self.match(dafnyParser.T__84)
                self.state = 2379
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2382
            self.match(dafnyParser.SEMICOLON)
            self.state = 2383
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def hashCall(self):
            return self.getTypedRuleContext(dafnyParser.HashCallContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_nameSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameSegment" ):
                listener.enterNameSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameSegment" ):
                listener.exitNameSegment(self)




    def nameSegment(self):

        localctx = dafnyParser.NameSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_nameSegment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            self.match(dafnyParser.IDENT)
            self.state = 2388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2386
                self.genericInstantiation()

            elif la_ == 2:
                self.state = 2387
                self.hashCall()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HashCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def actualBindings(self):
            return self.getTypedRuleContext(dafnyParser.ActualBindingsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_hashCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashCall" ):
                listener.enterHashCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashCall" ):
                listener.exitHashCall(self)




    def hashCall(self):

        localctx = dafnyParser.HashCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_hashCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2390
            self.match(dafnyParser.T__101)
            self.state = 2392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 2391
                self.genericInstantiation()


            self.state = 2394
            self.match(dafnyParser.T__102)
            self.state = 2395
            self.expression()
            self.state = 2396
            self.match(dafnyParser.T__103)
            self.state = 2397
            self.match(dafnyParser.T__27)
            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                self.state = 2398
                self.actualBindings()


            self.state = 2401
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def augmentedDotSuffix_(self):
            return self.getTypedRuleContext(dafnyParser.AugmentedDotSuffix_Context,0)


        def datatypeUpdateSuffix_(self):
            return self.getTypedRuleContext(dafnyParser.DatatypeUpdateSuffix_Context,0)


        def subsequenceSuffix_(self):
            return self.getTypedRuleContext(dafnyParser.SubsequenceSuffix_Context,0)


        def slicesByLengthSuffix_(self):
            return self.getTypedRuleContext(dafnyParser.SlicesByLengthSuffix_Context,0)


        def sequenceUpdateSuffix_(self):
            return self.getTypedRuleContext(dafnyParser.SequenceUpdateSuffix_Context,0)


        def selectionSuffix_(self):
            return self.getTypedRuleContext(dafnyParser.SelectionSuffix_Context,0)


        def argumentListSuffix_(self):
            return self.getTypedRuleContext(dafnyParser.ArgumentListSuffix_Context,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuffix" ):
                listener.enterSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuffix" ):
                listener.exitSuffix(self)




    def suffix(self):

        localctx = dafnyParser.SuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_suffix)
        try:
            self.state = 2410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2403
                self.augmentedDotSuffix_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2404
                self.datatypeUpdateSuffix_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2405
                self.subsequenceSuffix_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2406
                self.slicesByLengthSuffix_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2407
                self.sequenceUpdateSuffix_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2408
                self.selectionSuffix_()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2409
                self.argumentListSuffix_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugmentedDotSuffix_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotSuffix(self):
            return self.getTypedRuleContext(dafnyParser.DotSuffixContext,0)


        def genericInstantiation(self):
            return self.getTypedRuleContext(dafnyParser.GenericInstantiationContext,0)


        def hashCall(self):
            return self.getTypedRuleContext(dafnyParser.HashCallContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_augmentedDotSuffix_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugmentedDotSuffix_" ):
                listener.enterAugmentedDotSuffix_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugmentedDotSuffix_" ):
                listener.exitAugmentedDotSuffix_(self)




    def augmentedDotSuffix_(self):

        localctx = dafnyParser.AugmentedDotSuffix_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_augmentedDotSuffix_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(dafnyParser.T__19)
            self.state = 2413
            self.dotSuffix()
            self.state = 2416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.state = 2414
                self.genericInstantiation()

            elif la_ == 2:
                self.state = 2415
                self.hashCall()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeUpdateSuffix_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberBindingUpdate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.MemberBindingUpdateContext)
            else:
                return self.getTypedRuleContext(dafnyParser.MemberBindingUpdateContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_datatypeUpdateSuffix_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatypeUpdateSuffix_" ):
                listener.enterDatatypeUpdateSuffix_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatypeUpdateSuffix_" ):
                listener.exitDatatypeUpdateSuffix_(self)




    def datatypeUpdateSuffix_(self):

        localctx = dafnyParser.DatatypeUpdateSuffix_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_datatypeUpdateSuffix_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2418
            self.match(dafnyParser.T__19)
            self.state = 2419
            self.match(dafnyParser.T__27)
            self.state = 2420
            self.memberBindingUpdate()
            self.state = 2425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2421
                self.match(dafnyParser.T__14)
                self.state = 2422
                self.memberBindingUpdate()
                self.state = 2427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2428
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberBindingUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def DIGITS(self):
            return self.getToken(dafnyParser.DIGITS, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_memberBindingUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberBindingUpdate" ):
                listener.enterMemberBindingUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberBindingUpdate" ):
                listener.exitMemberBindingUpdate(self)




    def memberBindingUpdate(self):

        localctx = dafnyParser.MemberBindingUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_memberBindingUpdate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            _la = self._input.LA(1)
            if not(_la==141 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2431
            self.match(dafnyParser.T__59)
            self.state = 2432
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsequenceSuffix_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_subsequenceSuffix_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubsequenceSuffix_" ):
                listener.enterSubsequenceSuffix_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubsequenceSuffix_" ):
                listener.exitSubsequenceSuffix_(self)




    def subsequenceSuffix_(self):

        localctx = dafnyParser.SubsequenceSuffix_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_subsequenceSuffix_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2434
            self.match(dafnyParser.T__102)
            self.state = 2436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                self.state = 2435
                self.expression()


            self.state = 2438
            self.match(dafnyParser.T__130)
            self.state = 2440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                self.state = 2439
                self.expression()


            self.state = 2442
            self.match(dafnyParser.T__103)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SlicesByLengthSuffix_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_slicesByLengthSuffix_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlicesByLengthSuffix_" ):
                listener.enterSlicesByLengthSuffix_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlicesByLengthSuffix_" ):
                listener.exitSlicesByLengthSuffix_(self)




    def slicesByLengthSuffix_(self):

        localctx = dafnyParser.SlicesByLengthSuffix_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_slicesByLengthSuffix_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self.match(dafnyParser.T__102)
            self.state = 2445
            self.expression()
            self.state = 2446
            self.match(dafnyParser.T__12)
            self.state = 2458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                self.state = 2447
                self.expression()
                self.state = 2452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2448
                        self.match(dafnyParser.T__12)
                        self.state = 2449
                        self.expression() 
                    self.state = 2454
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

                self.state = 2456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 2455
                    self.match(dafnyParser.T__12)




            self.state = 2460
            self.match(dafnyParser.T__103)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SequenceUpdateSuffix_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_sequenceUpdateSuffix_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequenceUpdateSuffix_" ):
                listener.enterSequenceUpdateSuffix_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequenceUpdateSuffix_" ):
                listener.exitSequenceUpdateSuffix_(self)




    def sequenceUpdateSuffix_(self):

        localctx = dafnyParser.SequenceUpdateSuffix_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_sequenceUpdateSuffix_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2462
            self.match(dafnyParser.T__102)
            self.state = 2463
            self.expression()
            self.state = 2464
            self.match(dafnyParser.T__59)
            self.state = 2465
            self.expression()
            self.state = 2466
            self.match(dafnyParser.T__103)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionSuffix_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_selectionSuffix_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionSuffix_" ):
                listener.enterSelectionSuffix_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionSuffix_" ):
                listener.exitSelectionSuffix_(self)




    def selectionSuffix_(self):

        localctx = dafnyParser.SelectionSuffix_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_selectionSuffix_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self.match(dafnyParser.T__102)
            self.state = 2469
            self.expression()
            self.state = 2474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2470
                self.match(dafnyParser.T__14)
                self.state = 2471
                self.expression()
                self.state = 2476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2477
            self.match(dafnyParser.T__103)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListSuffix_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_argumentListSuffix_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentListSuffix_" ):
                listener.enterArgumentListSuffix_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentListSuffix_" ):
                listener.exitArgumentListSuffix_(self)




    def argumentListSuffix_(self):

        localctx = dafnyParser.ArgumentListSuffix_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_argumentListSuffix_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.match(dafnyParser.T__27)

            self.state = 2480
            self.expressions()
            self.state = 2481
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = dafnyParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2483
            self.expression()
            self.state = 2488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2484
                self.match(dafnyParser.T__14)
                self.state = 2485
                self.expression()
                self.state = 2490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierDomainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantifierVarDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.QuantifierVarDeclContext)
            else:
                return self.getTypedRuleContext(dafnyParser.QuantifierVarDeclContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_quantifierDomain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifierDomain" ):
                listener.enterQuantifierDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifierDomain" ):
                listener.exitQuantifierDomain(self)




    def quantifierDomain(self):

        localctx = dafnyParser.QuantifierDomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_quantifierDomain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2491
            self.quantifierVarDecl()
            self.state = 2496
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2492
                    self.match(dafnyParser.T__14)
                    self.state = 2493
                    self.quantifierVarDecl() 
                self.state = 2498
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identTypeOptional(self):
            return self.getTypedRuleContext(dafnyParser.IdentTypeOptionalContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ExpressionContext,i)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_quantifierVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifierVarDecl" ):
                listener.enterQuantifierVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifierVarDecl" ):
                listener.exitQuantifierVarDecl(self)




    def quantifierVarDecl(self):

        localctx = dafnyParser.QuantifierVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_quantifierVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.identTypeOptional()
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 2500
                self.match(dafnyParser.T__131)
                self.state = 2501
                self.expression()


            self.state = 2507
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2504
                    self.attribute() 
                self.state = 2509
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

            self.state = 2512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2510
                self.match(dafnyParser.T__42)
                self.state = 2511
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_ident

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdent" ):
                listener.enterIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdent" ):
                listener.exitIdent(self)




    def ident(self):

        localctx = dafnyParser.IdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_ident)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2514
            self.match(dafnyParser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def DIGITS(self):
            return self.getToken(dafnyParser.DIGITS, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_dotSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotSuffix" ):
                listener.enterDotSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotSuffix" ):
                listener.exitDotSuffix(self)




    def dotSuffix(self):

        localctx = dafnyParser.DotSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_dotSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            _la = self._input.LA(1)
            if not(_la==72 or _la==78 or _la==141 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoUSIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_noUSIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoUSIdent" ):
                listener.enterNoUSIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoUSIdent" ):
                listener.exitNoUSIdent(self)




    def noUSIdent(self):

        localctx = dafnyParser.NoUSIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_noUSIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self.match(dafnyParser.IDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_wildIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildIdent" ):
                listener.enterWildIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildIdent" ):
                listener.exitWildIdent(self)




    def wildIdent(self):

        localctx = dafnyParser.WildIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_wildIdent)
        try:
            self.state = 2522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2520
                self.noUSIdent()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2521
                self.match(dafnyParser.T__132)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentOrDigitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENT(self):
            return self.getToken(dafnyParser.IDENT, 0)

        def DIGITS(self):
            return self.getToken(dafnyParser.DIGITS, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_identOrDigits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentOrDigits" ):
                listener.enterIdentOrDigits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentOrDigits" ):
                listener.exitIdentOrDigits(self)




    def identOrDigits(self):

        localctx = dafnyParser.IdentOrDigitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_identOrDigits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524
            _la = self._input.LA(1)
            if not(_la==141 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoUSIdentOrDigitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def DIGITS(self):
            return self.getToken(dafnyParser.DIGITS, 0)

        def getRuleIndex(self):
            return dafnyParser.RULE_noUSIdentOrDigits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoUSIdentOrDigits" ):
                listener.enterNoUSIdentOrDigits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoUSIdentOrDigits" ):
                listener.exitNoUSIdentOrDigits(self)




    def noUSIdentOrDigits(self):

        localctx = dafnyParser.NoUSIdentOrDigitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_noUSIdentOrDigits)
        try:
            self.state = 2528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2526
                self.noUSIdent()
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2527
                self.match(dafnyParser.DIGITS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)




    def moduleName(self):

        localctx = dafnyParser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_moduleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2530
            self.noUSIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_className

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassName" ):
                listener.enterClassName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassName" ):
                listener.exitClassName(self)




    def className(self):

        localctx = dafnyParser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_className)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2532
            self.noUSIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_datatypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatypeName" ):
                listener.enterDatatypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatypeName" ):
                listener.exitDatatypeName(self)




    def datatypeName(self):

        localctx = dafnyParser.DatatypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_datatypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2534
            self.noUSIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeMemberNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_datatypeMemberName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatypeMemberName" ):
                listener.enterDatatypeMemberName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatypeMemberName" ):
                listener.exitDatatypeMemberName(self)




    def datatypeMemberName(self):

        localctx = dafnyParser.DatatypeMemberNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_datatypeMemberName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            self.noUSIdentOrDigits()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_newtypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeName" ):
                listener.enterNewtypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeName" ):
                listener.exitNewtypeName(self)




    def newtypeName(self):

        localctx = dafnyParser.NewtypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_newtypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            self.noUSIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_iteratorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteratorName" ):
                listener.enterIteratorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteratorName" ):
                listener.exitIteratorName(self)




    def iteratorName(self):

        localctx = dafnyParser.IteratorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_iteratorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self.noUSIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeVariableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_typeVariableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeVariableName" ):
                listener.enterTypeVariableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeVariableName" ):
                listener.exitTypeVariableName(self)




    def typeVariableName(self):

        localctx = dafnyParser.TypeVariableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_typeVariableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            self.noUSIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_methodFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodFunctionName" ):
                listener.enterMethodFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodFunctionName" ):
                listener.exitMethodFunctionName(self)




    def methodFunctionName(self):

        localctx = dafnyParser.MethodFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_methodFunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self.noUSIdentOrDigits()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_labelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelName" ):
                listener.enterLabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelName" ):
                listener.exitLabelName(self)




    def labelName(self):

        localctx = dafnyParser.LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_labelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2546
            self.noUSIdentOrDigits()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdent(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_attributeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeName" ):
                listener.enterAttributeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeName" ):
                listener.exitAttributeName(self)




    def attributeName(self):

        localctx = dafnyParser.AttributeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_attributeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self.noUSIdent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_exportId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportId" ):
                listener.enterExportId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportId" ):
                listener.exitExportId(self)




    def exportId(self):

        localctx = dafnyParser.ExportIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_exportId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2550
            self.noUSIdentOrDigits()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameOrCtorSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_typeNameOrCtorSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameOrCtorSuffix" ):
                listener.enterTypeNameOrCtorSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameOrCtorSuffix" ):
                listener.exitTypeNameOrCtorSuffix(self)




    def typeNameOrCtorSuffix(self):

        localctx = dafnyParser.TypeNameOrCtorSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_typeNameOrCtorSuffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.noUSIdentOrDigits()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.ModuleNameContext)
            else:
                return self.getTypedRuleContext(dafnyParser.ModuleNameContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_moduleQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleQualifiedName" ):
                listener.enterModuleQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleQualifiedName" ):
                listener.exitModuleQualifiedName(self)




    def moduleQualifiedName(self):

        localctx = dafnyParser.ModuleQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_moduleQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2554
            self.moduleName()
            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==20:
                self.state = 2555
                self.match(dafnyParser.T__19)
                self.state = 2556
                self.moduleName()
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildIdent(self):
            return self.getTypedRuleContext(dafnyParser.WildIdentContext,0)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_identType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentType" ):
                listener.enterIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentType" ):
                listener.exitIdentType(self)




    def identType(self):

        localctx = dafnyParser.IdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_identType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self.wildIdent()
            self.state = 2563
            self.match(dafnyParser.T__12)
            self.state = 2564
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FIdentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_fIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFIdentType" ):
                listener.enterFIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFIdentType" ):
                listener.exitFIdentType(self)




    def fIdentType(self):

        localctx = dafnyParser.FIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_fIdentType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self.noUSIdentOrDigits()
            self.state = 2567
            self.match(dafnyParser.T__12)
            self.state = 2568
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CIdentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_cIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCIdentType" ):
                listener.enterCIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCIdentType" ):
                listener.exitCIdentType(self)




    def cIdentType(self):

        localctx = dafnyParser.CIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_cIdentType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.noUSIdentOrDigits()
            self.state = 2573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 2571
                self.match(dafnyParser.T__12)
                self.state = 2572
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GIdentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identType(self):
            return self.getTypedRuleContext(dafnyParser.IdentTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_gIdentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGIdentType" ):
                listener.enterGIdentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGIdentType" ):
                listener.exitGIdentType(self)




    def gIdentType(self):

        localctx = dafnyParser.GIdentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_gIdentType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3 or _la==34 or _la==134 or _la==135:
                self.state = 2575
                _la = self._input.LA(1)
                if not(_la==3 or _la==34 or _la==134 or _la==135):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2581
            self.identType()
            self.state = 2584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 2582
                self.match(dafnyParser.T__59)
                self.state = 2583
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalIdentTypeOptionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildIdent(self):
            return self.getTypedRuleContext(dafnyParser.WildIdentContext,0)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_localIdentTypeOptional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalIdentTypeOptional" ):
                listener.enterLocalIdentTypeOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalIdentTypeOptional" ):
                listener.exitLocalIdentTypeOptional(self)




    def localIdentTypeOptional(self):

        localctx = dafnyParser.LocalIdentTypeOptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_localIdentTypeOptional)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            self.wildIdent()
            self.state = 2589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 2587
                self.match(dafnyParser.T__12)
                self.state = 2588
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentTypeOptionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildIdent(self):
            return self.getTypedRuleContext(dafnyParser.WildIdentContext,0)


        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_identTypeOptional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentTypeOptional" ):
                listener.enterIdentTypeOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentTypeOptional" ):
                listener.exitIdentTypeOptional(self)




    def identTypeOptional(self):

        localctx = dafnyParser.IdentTypeOptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_identTypeOptional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2591
            self.wildIdent()
            self.state = 2594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2592
                self.match(dafnyParser.T__12)
                self.state = 2593
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentOptionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(dafnyParser.TypeContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.AttributeContext)
            else:
                return self.getTypedRuleContext(dafnyParser.AttributeContext,i)


        def noUSIdentOrDigits(self):
            return self.getTypedRuleContext(dafnyParser.NoUSIdentOrDigitsContext,0)


        def expression(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_typeIdentOptional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentOptional" ):
                listener.enterTypeIdentOptional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentOptional" ):
                listener.exitTypeIdentOptional(self)




    def typeIdentOptional(self):

        localctx = dafnyParser.TypeIdentOptionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_typeIdentOptional)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 2596
                self.attribute()
                self.state = 2601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3 or _la==134:
                self.state = 2602
                _la = self._input.LA(1)
                if not(_la==3 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2608
                self.noUSIdentOrDigits()
                self.state = 2609
                self.match(dafnyParser.T__12)


            self.state = 2613
            self.type_()
            self.state = 2616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 2614
                self.match(dafnyParser.T__59)
                self.state = 2615
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalsOptionalIdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentOptional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(dafnyParser.TypeIdentOptionalContext)
            else:
                return self.getTypedRuleContext(dafnyParser.TypeIdentOptionalContext,i)


        def getRuleIndex(self):
            return dafnyParser.RULE_formalsOptionalIds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalsOptionalIds" ):
                listener.enterFormalsOptionalIds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalsOptionalIds" ):
                listener.exitFormalsOptionalIds(self)




    def formalsOptionalIds(self):

        localctx = dafnyParser.FormalsOptionalIdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_formalsOptionalIds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2618
            self.match(dafnyParser.T__27)

            self.state = 2619
            self.typeIdentOptional()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2620
                self.match(dafnyParser.T__14)
                self.state = 2621
                self.typeIdentOptional()
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2627
            self.match(dafnyParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeName(self):
            return self.getTypedRuleContext(dafnyParser.AttributeNameContext,0)


        def expressions(self):
            return self.getTypedRuleContext(dafnyParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return dafnyParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = dafnyParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            self.match(dafnyParser.T__135)
            self.state = 2630
            self.attributeName()
            self.state = 2632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288242995034063112) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 8215180330547204127) != 0) or _la==148 or _la==149:
                self.state = 2631
                self.expressions()


            self.state = 2634
            self.match(dafnyParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





